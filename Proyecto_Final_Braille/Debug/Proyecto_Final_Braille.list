
Proyecto_Final_Braille.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  080058ac  080058ac  000158ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a4c  08005a4c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005a4c  08005a4c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a4c  08005a4c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a50  08005a50  00015a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000007c  08005ad0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08005ad0  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a0ef  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002279  00000000  00000000  0002a1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae0  00000000  00000000  0002c450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000083a  00000000  00000000  0002cf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000040d2  00000000  00000000  0002d76a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efe8  00000000  00000000  0003183c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088879  00000000  00000000  00040824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fbc  00000000  00000000  000c90a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000cc05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005894 	.word	0x08005894

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08005894 	.word	0x08005894

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Base_de_Datos>:
#include "Base_de_Datos.h"

int Base_de_Datos(char caracter,int k, int l){
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
 8000168:	73fb      	strb	r3, [r7, #15]
	switch (caracter){
 800016a:	7bfb      	ldrb	r3, [r7, #15]
 800016c:	3b20      	subs	r3, #32
 800016e:	2b5a      	cmp	r3, #90	; 0x5a
 8000170:	f200 865e 	bhi.w	8000e30 <Base_de_Datos+0xcd4>
 8000174:	a201      	add	r2, pc, #4	; (adr r2, 800017c <Base_de_Datos+0x20>)
 8000176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800017a:	bf00      	nop
 800017c:	08000d67 	.word	0x08000d67
 8000180:	08000e31 	.word	0x08000e31
 8000184:	08000e31 	.word	0x08000e31
 8000188:	08000e31 	.word	0x08000e31
 800018c:	08000e31 	.word	0x08000e31
 8000190:	08000e31 	.word	0x08000e31
 8000194:	08000e31 	.word	0x08000e31
 8000198:	08000e31 	.word	0x08000e31
 800019c:	08000e31 	.word	0x08000e31
 80001a0:	08000e31 	.word	0x08000e31
 80001a4:	08000e31 	.word	0x08000e31
 80001a8:	08000e31 	.word	0x08000e31
 80001ac:	08000e31 	.word	0x08000e31
 80001b0:	08000e31 	.word	0x08000e31
 80001b4:	08000e31 	.word	0x08000e31
 80001b8:	08000e31 	.word	0x08000e31
 80001bc:	08000e31 	.word	0x08000e31
 80001c0:	08000e31 	.word	0x08000e31
 80001c4:	08000e31 	.word	0x08000e31
 80001c8:	08000e31 	.word	0x08000e31
 80001cc:	08000e31 	.word	0x08000e31
 80001d0:	08000e31 	.word	0x08000e31
 80001d4:	08000e31 	.word	0x08000e31
 80001d8:	08000e31 	.word	0x08000e31
 80001dc:	08000e31 	.word	0x08000e31
 80001e0:	08000e31 	.word	0x08000e31
 80001e4:	08000e31 	.word	0x08000e31
 80001e8:	08000e31 	.word	0x08000e31
 80001ec:	08000e31 	.word	0x08000e31
 80001f0:	08000e31 	.word	0x08000e31
 80001f4:	08000e31 	.word	0x08000e31
 80001f8:	08000e31 	.word	0x08000e31
 80001fc:	08000e31 	.word	0x08000e31
 8000200:	08000e31 	.word	0x08000e31
 8000204:	08000e31 	.word	0x08000e31
 8000208:	08000e31 	.word	0x08000e31
 800020c:	08000e31 	.word	0x08000e31
 8000210:	08000e31 	.word	0x08000e31
 8000214:	08000e31 	.word	0x08000e31
 8000218:	08000e31 	.word	0x08000e31
 800021c:	08000e31 	.word	0x08000e31
 8000220:	08000e31 	.word	0x08000e31
 8000224:	08000e31 	.word	0x08000e31
 8000228:	08000e31 	.word	0x08000e31
 800022c:	08000e31 	.word	0x08000e31
 8000230:	08000e31 	.word	0x08000e31
 8000234:	08000e31 	.word	0x08000e31
 8000238:	08000e31 	.word	0x08000e31
 800023c:	08000e31 	.word	0x08000e31
 8000240:	08000e31 	.word	0x08000e31
 8000244:	08000e31 	.word	0x08000e31
 8000248:	08000e31 	.word	0x08000e31
 800024c:	08000e31 	.word	0x08000e31
 8000250:	08000e31 	.word	0x08000e31
 8000254:	08000e31 	.word	0x08000e31
 8000258:	08000e31 	.word	0x08000e31
 800025c:	08000e31 	.word	0x08000e31
 8000260:	08000e31 	.word	0x08000e31
 8000264:	08000e31 	.word	0x08000e31
 8000268:	08000e31 	.word	0x08000e31
 800026c:	08000e31 	.word	0x08000e31
 8000270:	08000e31 	.word	0x08000e31
 8000274:	08000e31 	.word	0x08000e31
 8000278:	08000e31 	.word	0x08000e31
 800027c:	08000e31 	.word	0x08000e31
 8000280:	080002e9 	.word	0x080002e9
 8000284:	08000359 	.word	0x08000359
 8000288:	080003c9 	.word	0x080003c9
 800028c:	08000439 	.word	0x08000439
 8000290:	080004a9 	.word	0x080004a9
 8000294:	08000519 	.word	0x08000519
 8000298:	08000589 	.word	0x08000589
 800029c:	080005f9 	.word	0x080005f9
 80002a0:	08000663 	.word	0x08000663
 80002a4:	080006c7 	.word	0x080006c7
 80002a8:	0800072b 	.word	0x0800072b
 80002ac:	0800078f 	.word	0x0800078f
 80002b0:	080007f3 	.word	0x080007f3
 80002b4:	08000857 	.word	0x08000857
 80002b8:	080008bb 	.word	0x080008bb
 80002bc:	0800091f 	.word	0x0800091f
 80002c0:	08000983 	.word	0x08000983
 80002c4:	080009e7 	.word	0x080009e7
 80002c8:	08000a4b 	.word	0x08000a4b
 80002cc:	08000aaf 	.word	0x08000aaf
 80002d0:	08000b13 	.word	0x08000b13
 80002d4:	08000b77 	.word	0x08000b77
 80002d8:	08000bdb 	.word	0x08000bdb
 80002dc:	08000c3f 	.word	0x08000c3f
 80002e0:	08000ca3 	.word	0x08000ca3
 80002e4:	08000d07 	.word	0x08000d07
		case('a'):
			if (k == 0 && l == 0){
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d105      	bne.n	80002fa <Base_de_Datos+0x19e>
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d102      	bne.n	80002fa <Base_de_Datos+0x19e>
				return 1;
 80002f4:	2301      	movs	r3, #1
 80002f6:	f000 bd9c 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d105      	bne.n	800030c <Base_de_Datos+0x1b0>
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2b01      	cmp	r3, #1
 8000304:	d102      	bne.n	800030c <Base_de_Datos+0x1b0>
				return 0;
 8000306:	2300      	movs	r3, #0
 8000308:	f000 bd93 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d105      	bne.n	800031e <Base_de_Datos+0x1c2>
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d102      	bne.n	800031e <Base_de_Datos+0x1c2>
				return 0;
 8000318:	2300      	movs	r3, #0
 800031a:	f000 bd8a 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d105      	bne.n	8000330 <Base_de_Datos+0x1d4>
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d102      	bne.n	8000330 <Base_de_Datos+0x1d4>
				return 0;
 800032a:	2300      	movs	r3, #0
 800032c:	f000 bd81 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	2b02      	cmp	r3, #2
 8000334:	d105      	bne.n	8000342 <Base_de_Datos+0x1e6>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d102      	bne.n	8000342 <Base_de_Datos+0x1e6>
				return 0;
 800033c:	2300      	movs	r3, #0
 800033e:	f000 bd78 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	2b02      	cmp	r3, #2
 8000346:	f040 853e 	bne.w	8000dc6 <Base_de_Datos+0xc6a>
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	2b01      	cmp	r3, #1
 800034e:	f040 853a 	bne.w	8000dc6 <Base_de_Datos+0xc6a>
				return 0;
 8000352:	2300      	movs	r3, #0
 8000354:	f000 bd6d 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('b'):
			if (k == 0 && l == 0){
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d105      	bne.n	800036a <Base_de_Datos+0x20e>
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d102      	bne.n	800036a <Base_de_Datos+0x20e>
				return 1;
 8000364:	2301      	movs	r3, #1
 8000366:	f000 bd64 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d105      	bne.n	800037c <Base_de_Datos+0x220>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d102      	bne.n	800037c <Base_de_Datos+0x220>
				return 0;
 8000376:	2300      	movs	r3, #0
 8000378:	f000 bd5b 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d105      	bne.n	800038e <Base_de_Datos+0x232>
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d102      	bne.n	800038e <Base_de_Datos+0x232>
				return 1;
 8000388:	2301      	movs	r3, #1
 800038a:	f000 bd52 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	2b01      	cmp	r3, #1
 8000392:	d105      	bne.n	80003a0 <Base_de_Datos+0x244>
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d102      	bne.n	80003a0 <Base_de_Datos+0x244>
				return 0;
 800039a:	2300      	movs	r3, #0
 800039c:	f000 bd49 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	2b02      	cmp	r3, #2
 80003a4:	d105      	bne.n	80003b2 <Base_de_Datos+0x256>
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d102      	bne.n	80003b2 <Base_de_Datos+0x256>
				return 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	f000 bd40 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	f040 8508 	bne.w	8000dca <Base_de_Datos+0xc6e>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	f040 8504 	bne.w	8000dca <Base_de_Datos+0xc6e>
				return 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	f000 bd35 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('c'):
			if (k == 0 && l == 0){
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d105      	bne.n	80003da <Base_de_Datos+0x27e>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d102      	bne.n	80003da <Base_de_Datos+0x27e>
				return 1;
 80003d4:	2301      	movs	r3, #1
 80003d6:	f000 bd2c 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d105      	bne.n	80003ec <Base_de_Datos+0x290>
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d102      	bne.n	80003ec <Base_de_Datos+0x290>
				return 1;
 80003e6:	2301      	movs	r3, #1
 80003e8:	f000 bd23 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d105      	bne.n	80003fe <Base_de_Datos+0x2a2>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d102      	bne.n	80003fe <Base_de_Datos+0x2a2>
				return 0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	f000 bd1a 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d105      	bne.n	8000410 <Base_de_Datos+0x2b4>
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d102      	bne.n	8000410 <Base_de_Datos+0x2b4>
				return 0;
 800040a:	2300      	movs	r3, #0
 800040c:	f000 bd11 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	2b02      	cmp	r3, #2
 8000414:	d105      	bne.n	8000422 <Base_de_Datos+0x2c6>
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d102      	bne.n	8000422 <Base_de_Datos+0x2c6>
				return 0;
 800041c:	2300      	movs	r3, #0
 800041e:	f000 bd08 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	2b02      	cmp	r3, #2
 8000426:	f040 84d2 	bne.w	8000dce <Base_de_Datos+0xc72>
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2b01      	cmp	r3, #1
 800042e:	f040 84ce 	bne.w	8000dce <Base_de_Datos+0xc72>
				return 0;
 8000432:	2300      	movs	r3, #0
 8000434:	f000 bcfd 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('d'):
			if (k == 0 && l == 0){
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d105      	bne.n	800044a <Base_de_Datos+0x2ee>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d102      	bne.n	800044a <Base_de_Datos+0x2ee>
				return 1;
 8000444:	2301      	movs	r3, #1
 8000446:	f000 bcf4 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d105      	bne.n	800045c <Base_de_Datos+0x300>
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d102      	bne.n	800045c <Base_de_Datos+0x300>
				return 1;
 8000456:	2301      	movs	r3, #1
 8000458:	f000 bceb 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d105      	bne.n	800046e <Base_de_Datos+0x312>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d102      	bne.n	800046e <Base_de_Datos+0x312>
				return 0;
 8000468:	2300      	movs	r3, #0
 800046a:	f000 bce2 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d105      	bne.n	8000480 <Base_de_Datos+0x324>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d102      	bne.n	8000480 <Base_de_Datos+0x324>
				return 1;
 800047a:	2301      	movs	r3, #1
 800047c:	f000 bcd9 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	2b02      	cmp	r3, #2
 8000484:	d105      	bne.n	8000492 <Base_de_Datos+0x336>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d102      	bne.n	8000492 <Base_de_Datos+0x336>
				return 0;
 800048c:	2300      	movs	r3, #0
 800048e:	f000 bcd0 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	2b02      	cmp	r3, #2
 8000496:	f040 849c 	bne.w	8000dd2 <Base_de_Datos+0xc76>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b01      	cmp	r3, #1
 800049e:	f040 8498 	bne.w	8000dd2 <Base_de_Datos+0xc76>
				return 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	f000 bcc5 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			break;
		case('e'):
			if (k == 0 && l == 0){
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d105      	bne.n	80004ba <Base_de_Datos+0x35e>
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d102      	bne.n	80004ba <Base_de_Datos+0x35e>
				return 1;
 80004b4:	2301      	movs	r3, #1
 80004b6:	f000 bcbc 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d105      	bne.n	80004cc <Base_de_Datos+0x370>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d102      	bne.n	80004cc <Base_de_Datos+0x370>
				return 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	f000 bcb3 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d105      	bne.n	80004de <Base_de_Datos+0x382>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d102      	bne.n	80004de <Base_de_Datos+0x382>
				return 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	f000 bcaa 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d105      	bne.n	80004f0 <Base_de_Datos+0x394>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d102      	bne.n	80004f0 <Base_de_Datos+0x394>
				return 1;
 80004ea:	2301      	movs	r3, #1
 80004ec:	f000 bca1 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	2b02      	cmp	r3, #2
 80004f4:	d105      	bne.n	8000502 <Base_de_Datos+0x3a6>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d102      	bne.n	8000502 <Base_de_Datos+0x3a6>
				return 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f000 bc98 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	2b02      	cmp	r3, #2
 8000506:	f040 8466 	bne.w	8000dd6 <Base_de_Datos+0xc7a>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b01      	cmp	r3, #1
 800050e:	f040 8462 	bne.w	8000dd6 <Base_de_Datos+0xc7a>
				return 0;
 8000512:	2300      	movs	r3, #0
 8000514:	f000 bc8d 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('f'):
			if (k == 0 && l == 0){
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d105      	bne.n	800052a <Base_de_Datos+0x3ce>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <Base_de_Datos+0x3ce>
				return 1;
 8000524:	2301      	movs	r3, #1
 8000526:	f000 bc84 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d105      	bne.n	800053c <Base_de_Datos+0x3e0>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d102      	bne.n	800053c <Base_de_Datos+0x3e0>
				return 1;
 8000536:	2301      	movs	r3, #1
 8000538:	f000 bc7b 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d105      	bne.n	800054e <Base_de_Datos+0x3f2>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d102      	bne.n	800054e <Base_de_Datos+0x3f2>
				return 1;
 8000548:	2301      	movs	r3, #1
 800054a:	f000 bc72 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d105      	bne.n	8000560 <Base_de_Datos+0x404>
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d102      	bne.n	8000560 <Base_de_Datos+0x404>
				return 0;
 800055a:	2300      	movs	r3, #0
 800055c:	f000 bc69 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	2b02      	cmp	r3, #2
 8000564:	d105      	bne.n	8000572 <Base_de_Datos+0x416>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d102      	bne.n	8000572 <Base_de_Datos+0x416>
				return 0;
 800056c:	2300      	movs	r3, #0
 800056e:	f000 bc60 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000572:	68bb      	ldr	r3, [r7, #8]
 8000574:	2b02      	cmp	r3, #2
 8000576:	f040 8430 	bne.w	8000dda <Base_de_Datos+0xc7e>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b01      	cmp	r3, #1
 800057e:	f040 842c 	bne.w	8000dda <Base_de_Datos+0xc7e>
				return 0;
 8000582:	2300      	movs	r3, #0
 8000584:	f000 bc55 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('g'):
			if (k == 0 && l == 0){
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d105      	bne.n	800059a <Base_de_Datos+0x43e>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d102      	bne.n	800059a <Base_de_Datos+0x43e>
				return 1;
 8000594:	2301      	movs	r3, #1
 8000596:	f000 bc4c 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d105      	bne.n	80005ac <Base_de_Datos+0x450>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d102      	bne.n	80005ac <Base_de_Datos+0x450>
				return 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	f000 bc43 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d105      	bne.n	80005be <Base_de_Datos+0x462>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d102      	bne.n	80005be <Base_de_Datos+0x462>
				return 1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	f000 bc3a 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d105      	bne.n	80005d0 <Base_de_Datos+0x474>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d102      	bne.n	80005d0 <Base_de_Datos+0x474>
				return 1;
 80005ca:	2301      	movs	r3, #1
 80005cc:	f000 bc31 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d105      	bne.n	80005e2 <Base_de_Datos+0x486>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d102      	bne.n	80005e2 <Base_de_Datos+0x486>
				return 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	f000 bc28 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	f040 83fa 	bne.w	8000dde <Base_de_Datos+0xc82>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	f040 83f6 	bne.w	8000dde <Base_de_Datos+0xc82>
				return 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	f000 bc1d 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('h'):
			if (k == 0 && l == 0){
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d105      	bne.n	800060a <Base_de_Datos+0x4ae>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <Base_de_Datos+0x4ae>
				return 1;
 8000604:	2301      	movs	r3, #1
 8000606:	f000 bc14 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d105      	bne.n	800061c <Base_de_Datos+0x4c0>
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d102      	bne.n	800061c <Base_de_Datos+0x4c0>
				return 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f000 bc0b 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d105      	bne.n	800062e <Base_de_Datos+0x4d2>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d102      	bne.n	800062e <Base_de_Datos+0x4d2>
				return 1;
 8000628:	2301      	movs	r3, #1
 800062a:	f000 bc02 	b.w	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d104      	bne.n	800063e <Base_de_Datos+0x4e2>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d101      	bne.n	800063e <Base_de_Datos+0x4e2>
				return 1;
 800063a:	2301      	movs	r3, #1
 800063c:	e3f9      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d104      	bne.n	800064e <Base_de_Datos+0x4f2>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d101      	bne.n	800064e <Base_de_Datos+0x4f2>
				return 0;
 800064a:	2300      	movs	r3, #0
 800064c:	e3f1      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	2b02      	cmp	r3, #2
 8000652:	f040 83c6 	bne.w	8000de2 <Base_de_Datos+0xc86>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b01      	cmp	r3, #1
 800065a:	f040 83c2 	bne.w	8000de2 <Base_de_Datos+0xc86>
				return 0;
 800065e:	2300      	movs	r3, #0
 8000660:	e3e7      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('i'):
			if (k == 0 && l == 0){
 8000662:	68bb      	ldr	r3, [r7, #8]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d104      	bne.n	8000672 <Base_de_Datos+0x516>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d101      	bne.n	8000672 <Base_de_Datos+0x516>
				return 0;
 800066e:	2300      	movs	r3, #0
 8000670:	e3df      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d104      	bne.n	8000682 <Base_de_Datos+0x526>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d101      	bne.n	8000682 <Base_de_Datos+0x526>
				return 1;
 800067e:	2301      	movs	r3, #1
 8000680:	e3d7      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d104      	bne.n	8000692 <Base_de_Datos+0x536>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d101      	bne.n	8000692 <Base_de_Datos+0x536>
				return 1;
 800068e:	2301      	movs	r3, #1
 8000690:	e3cf      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d104      	bne.n	80006a2 <Base_de_Datos+0x546>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d101      	bne.n	80006a2 <Base_de_Datos+0x546>
				return 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	e3c7      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d104      	bne.n	80006b2 <Base_de_Datos+0x556>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d101      	bne.n	80006b2 <Base_de_Datos+0x556>
				return 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e3bf      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	f040 8396 	bne.w	8000de6 <Base_de_Datos+0xc8a>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	f040 8392 	bne.w	8000de6 <Base_de_Datos+0xc8a>
				return 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e3b5      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('j'):
			if (k == 0 && l == 0){
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d104      	bne.n	80006d6 <Base_de_Datos+0x57a>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d101      	bne.n	80006d6 <Base_de_Datos+0x57a>
				return 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	e3ad      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d104      	bne.n	80006e6 <Base_de_Datos+0x58a>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d101      	bne.n	80006e6 <Base_de_Datos+0x58a>
				return 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e3a5      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d104      	bne.n	80006f6 <Base_de_Datos+0x59a>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d101      	bne.n	80006f6 <Base_de_Datos+0x59a>
				return 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	e39d      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d104      	bne.n	8000706 <Base_de_Datos+0x5aa>
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d101      	bne.n	8000706 <Base_de_Datos+0x5aa>
				return 1;
 8000702:	2301      	movs	r3, #1
 8000704:	e395      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	2b02      	cmp	r3, #2
 800070a:	d104      	bne.n	8000716 <Base_de_Datos+0x5ba>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <Base_de_Datos+0x5ba>
				return 0;
 8000712:	2300      	movs	r3, #0
 8000714:	e38d      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	2b02      	cmp	r3, #2
 800071a:	f040 8366 	bne.w	8000dea <Base_de_Datos+0xc8e>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b01      	cmp	r3, #1
 8000722:	f040 8362 	bne.w	8000dea <Base_de_Datos+0xc8e>
				return 0;
 8000726:	2300      	movs	r3, #0
 8000728:	e383      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('k'):
			if (k == 0 && l == 0){
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d104      	bne.n	800073a <Base_de_Datos+0x5de>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d101      	bne.n	800073a <Base_de_Datos+0x5de>
				return 1;
 8000736:	2301      	movs	r3, #1
 8000738:	e37b      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d104      	bne.n	800074a <Base_de_Datos+0x5ee>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d101      	bne.n	800074a <Base_de_Datos+0x5ee>
				return 0;
 8000746:	2300      	movs	r3, #0
 8000748:	e373      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d104      	bne.n	800075a <Base_de_Datos+0x5fe>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d101      	bne.n	800075a <Base_de_Datos+0x5fe>
				return 0;
 8000756:	2300      	movs	r3, #0
 8000758:	e36b      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d104      	bne.n	800076a <Base_de_Datos+0x60e>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d101      	bne.n	800076a <Base_de_Datos+0x60e>
				return 0;
 8000766:	2300      	movs	r3, #0
 8000768:	e363      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d104      	bne.n	800077a <Base_de_Datos+0x61e>
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d101      	bne.n	800077a <Base_de_Datos+0x61e>
				return 1;
 8000776:	2301      	movs	r3, #1
 8000778:	e35b      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	2b02      	cmp	r3, #2
 800077e:	f040 8336 	bne.w	8000dee <Base_de_Datos+0xc92>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b01      	cmp	r3, #1
 8000786:	f040 8332 	bne.w	8000dee <Base_de_Datos+0xc92>
				return 0;
 800078a:	2300      	movs	r3, #0
 800078c:	e351      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('l'):
			if (k == 0 && l == 0){
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d104      	bne.n	800079e <Base_de_Datos+0x642>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d101      	bne.n	800079e <Base_de_Datos+0x642>
				return 1;
 800079a:	2301      	movs	r3, #1
 800079c:	e349      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d104      	bne.n	80007ae <Base_de_Datos+0x652>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d101      	bne.n	80007ae <Base_de_Datos+0x652>
				return 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e341      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d104      	bne.n	80007be <Base_de_Datos+0x662>
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <Base_de_Datos+0x662>
				return 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e339      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d104      	bne.n	80007ce <Base_de_Datos+0x672>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d101      	bne.n	80007ce <Base_de_Datos+0x672>
				return 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e331      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d104      	bne.n	80007de <Base_de_Datos+0x682>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <Base_de_Datos+0x682>
				return 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	e329      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	f040 8306 	bne.w	8000df2 <Base_de_Datos+0xc96>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	f040 8302 	bne.w	8000df2 <Base_de_Datos+0xc96>
				return 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e31f      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('m'):
			if (k == 0 && l == 0){
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d104      	bne.n	8000802 <Base_de_Datos+0x6a6>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d101      	bne.n	8000802 <Base_de_Datos+0x6a6>
				return 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	e317      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d104      	bne.n	8000812 <Base_de_Datos+0x6b6>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d101      	bne.n	8000812 <Base_de_Datos+0x6b6>
				return 1;
 800080e:	2301      	movs	r3, #1
 8000810:	e30f      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d104      	bne.n	8000822 <Base_de_Datos+0x6c6>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d101      	bne.n	8000822 <Base_de_Datos+0x6c6>
				return 0;
 800081e:	2300      	movs	r3, #0
 8000820:	e307      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d104      	bne.n	8000832 <Base_de_Datos+0x6d6>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d101      	bne.n	8000832 <Base_de_Datos+0x6d6>
				return 0;
 800082e:	2300      	movs	r3, #0
 8000830:	e2ff      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	2b02      	cmp	r3, #2
 8000836:	d104      	bne.n	8000842 <Base_de_Datos+0x6e6>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <Base_de_Datos+0x6e6>
				return 1;
 800083e:	2301      	movs	r3, #1
 8000840:	e2f7      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	2b02      	cmp	r3, #2
 8000846:	f040 82d6 	bne.w	8000df6 <Base_de_Datos+0xc9a>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b01      	cmp	r3, #1
 800084e:	f040 82d2 	bne.w	8000df6 <Base_de_Datos+0xc9a>
				return 0;
 8000852:	2300      	movs	r3, #0
 8000854:	e2ed      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('n'):
			if (k == 0 && l == 0){
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d104      	bne.n	8000866 <Base_de_Datos+0x70a>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d101      	bne.n	8000866 <Base_de_Datos+0x70a>
				return 1;
 8000862:	2301      	movs	r3, #1
 8000864:	e2e5      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d104      	bne.n	8000876 <Base_de_Datos+0x71a>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d101      	bne.n	8000876 <Base_de_Datos+0x71a>
				return 1;
 8000872:	2301      	movs	r3, #1
 8000874:	e2dd      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d104      	bne.n	8000886 <Base_de_Datos+0x72a>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d101      	bne.n	8000886 <Base_de_Datos+0x72a>
				return 0;
 8000882:	2300      	movs	r3, #0
 8000884:	e2d5      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d104      	bne.n	8000896 <Base_de_Datos+0x73a>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d101      	bne.n	8000896 <Base_de_Datos+0x73a>
				return 1;
 8000892:	2301      	movs	r3, #1
 8000894:	e2cd      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d104      	bne.n	80008a6 <Base_de_Datos+0x74a>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d101      	bne.n	80008a6 <Base_de_Datos+0x74a>
				return 1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e2c5      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	f040 82a6 	bne.w	8000dfa <Base_de_Datos+0xc9e>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	f040 82a2 	bne.w	8000dfa <Base_de_Datos+0xc9e>
				return 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	e2bb      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('o'):
			if (k == 0 && l == 0){
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d104      	bne.n	80008ca <Base_de_Datos+0x76e>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d101      	bne.n	80008ca <Base_de_Datos+0x76e>
				return 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e2b3      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d104      	bne.n	80008da <Base_de_Datos+0x77e>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d101      	bne.n	80008da <Base_de_Datos+0x77e>
				return 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e2ab      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d104      	bne.n	80008ea <Base_de_Datos+0x78e>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d101      	bne.n	80008ea <Base_de_Datos+0x78e>
				return 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	e2a3      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d104      	bne.n	80008fa <Base_de_Datos+0x79e>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d101      	bne.n	80008fa <Base_de_Datos+0x79e>
				return 1;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e29b      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d104      	bne.n	800090a <Base_de_Datos+0x7ae>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d101      	bne.n	800090a <Base_de_Datos+0x7ae>
				return 1;
 8000906:	2301      	movs	r3, #1
 8000908:	e293      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	2b02      	cmp	r3, #2
 800090e:	f040 8276 	bne.w	8000dfe <Base_de_Datos+0xca2>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b01      	cmp	r3, #1
 8000916:	f040 8272 	bne.w	8000dfe <Base_de_Datos+0xca2>
				return 0;
 800091a:	2300      	movs	r3, #0
 800091c:	e289      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('p'):
			if (k == 0 && l == 0){
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d104      	bne.n	800092e <Base_de_Datos+0x7d2>
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d101      	bne.n	800092e <Base_de_Datos+0x7d2>
				return 1;
 800092a:	2301      	movs	r3, #1
 800092c:	e281      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d104      	bne.n	800093e <Base_de_Datos+0x7e2>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d101      	bne.n	800093e <Base_de_Datos+0x7e2>
				return 1;
 800093a:	2301      	movs	r3, #1
 800093c:	e279      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d104      	bne.n	800094e <Base_de_Datos+0x7f2>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <Base_de_Datos+0x7f2>
				return 1;
 800094a:	2301      	movs	r3, #1
 800094c:	e271      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d104      	bne.n	800095e <Base_de_Datos+0x802>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d101      	bne.n	800095e <Base_de_Datos+0x802>
				return 0;
 800095a:	2300      	movs	r3, #0
 800095c:	e269      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d104      	bne.n	800096e <Base_de_Datos+0x812>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <Base_de_Datos+0x812>
				return 1;
 800096a:	2301      	movs	r3, #1
 800096c:	e261      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	2b02      	cmp	r3, #2
 8000972:	f040 8246 	bne.w	8000e02 <Base_de_Datos+0xca6>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b01      	cmp	r3, #1
 800097a:	f040 8242 	bne.w	8000e02 <Base_de_Datos+0xca6>
				return 0;
 800097e:	2300      	movs	r3, #0
 8000980:	e257      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('q'):
			if (k == 0 && l == 0){
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d104      	bne.n	8000992 <Base_de_Datos+0x836>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d101      	bne.n	8000992 <Base_de_Datos+0x836>
				return 1;
 800098e:	2301      	movs	r3, #1
 8000990:	e24f      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d104      	bne.n	80009a2 <Base_de_Datos+0x846>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d101      	bne.n	80009a2 <Base_de_Datos+0x846>
				return 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	e247      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d104      	bne.n	80009b2 <Base_de_Datos+0x856>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d101      	bne.n	80009b2 <Base_de_Datos+0x856>
				return 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e23f      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d104      	bne.n	80009c2 <Base_de_Datos+0x866>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d101      	bne.n	80009c2 <Base_de_Datos+0x866>
				return 1;
 80009be:	2301      	movs	r3, #1
 80009c0:	e237      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d104      	bne.n	80009d2 <Base_de_Datos+0x876>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d101      	bne.n	80009d2 <Base_de_Datos+0x876>
				return 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e22f      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	f040 8216 	bne.w	8000e06 <Base_de_Datos+0xcaa>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	f040 8212 	bne.w	8000e06 <Base_de_Datos+0xcaa>
				return 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e225      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('r'):
			if (k == 0 && l == 0){
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d104      	bne.n	80009f6 <Base_de_Datos+0x89a>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d101      	bne.n	80009f6 <Base_de_Datos+0x89a>
				return 1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e21d      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d104      	bne.n	8000a06 <Base_de_Datos+0x8aa>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d101      	bne.n	8000a06 <Base_de_Datos+0x8aa>
				return 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e215      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d104      	bne.n	8000a16 <Base_de_Datos+0x8ba>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d101      	bne.n	8000a16 <Base_de_Datos+0x8ba>
				return 1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e20d      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d104      	bne.n	8000a26 <Base_de_Datos+0x8ca>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d101      	bne.n	8000a26 <Base_de_Datos+0x8ca>
				return 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e205      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d104      	bne.n	8000a36 <Base_de_Datos+0x8da>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d101      	bne.n	8000a36 <Base_de_Datos+0x8da>
				return 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e1fd      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	f040 81e6 	bne.w	8000e0a <Base_de_Datos+0xcae>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	f040 81e2 	bne.w	8000e0a <Base_de_Datos+0xcae>
				return 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e1f3      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('s'):
			if (k == 0 && l == 0){
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d104      	bne.n	8000a5a <Base_de_Datos+0x8fe>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <Base_de_Datos+0x8fe>
				return 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e1eb      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d104      	bne.n	8000a6a <Base_de_Datos+0x90e>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d101      	bne.n	8000a6a <Base_de_Datos+0x90e>
				return 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e1e3      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d104      	bne.n	8000a7a <Base_de_Datos+0x91e>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <Base_de_Datos+0x91e>
				return 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e1db      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d104      	bne.n	8000a8a <Base_de_Datos+0x92e>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d101      	bne.n	8000a8a <Base_de_Datos+0x92e>
				return 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e1d3      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d104      	bne.n	8000a9a <Base_de_Datos+0x93e>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d101      	bne.n	8000a9a <Base_de_Datos+0x93e>
				return 1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e1cb      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	f040 81b6 	bne.w	8000e0e <Base_de_Datos+0xcb2>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	f040 81b2 	bne.w	8000e0e <Base_de_Datos+0xcb2>
				return 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e1c1      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('t'):
			if (k == 0 && l == 0){
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d104      	bne.n	8000abe <Base_de_Datos+0x962>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d101      	bne.n	8000abe <Base_de_Datos+0x962>
				return 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e1b9      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d104      	bne.n	8000ace <Base_de_Datos+0x972>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d101      	bne.n	8000ace <Base_de_Datos+0x972>
				return 1;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e1b1      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d104      	bne.n	8000ade <Base_de_Datos+0x982>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d101      	bne.n	8000ade <Base_de_Datos+0x982>
				return 1;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e1a9      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d104      	bne.n	8000aee <Base_de_Datos+0x992>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d101      	bne.n	8000aee <Base_de_Datos+0x992>
				return 1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e1a1      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d104      	bne.n	8000afe <Base_de_Datos+0x9a2>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <Base_de_Datos+0x9a2>
				return 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e199      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	f040 8186 	bne.w	8000e12 <Base_de_Datos+0xcb6>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	f040 8182 	bne.w	8000e12 <Base_de_Datos+0xcb6>
				return 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e18f      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('u'):
			if (k == 0 && l == 0){
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d104      	bne.n	8000b22 <Base_de_Datos+0x9c6>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d101      	bne.n	8000b22 <Base_de_Datos+0x9c6>
				return 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e187      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d104      	bne.n	8000b32 <Base_de_Datos+0x9d6>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d101      	bne.n	8000b32 <Base_de_Datos+0x9d6>
				return 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e17f      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d104      	bne.n	8000b42 <Base_de_Datos+0x9e6>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <Base_de_Datos+0x9e6>
				return 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e177      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d104      	bne.n	8000b52 <Base_de_Datos+0x9f6>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d101      	bne.n	8000b52 <Base_de_Datos+0x9f6>
				return 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e16f      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d104      	bne.n	8000b62 <Base_de_Datos+0xa06>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <Base_de_Datos+0xa06>
				return 1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e167      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	f040 8156 	bne.w	8000e16 <Base_de_Datos+0xcba>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	f040 8152 	bne.w	8000e16 <Base_de_Datos+0xcba>
				return 1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e15d      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('v'):
			if (k == 0 && l == 0){
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d104      	bne.n	8000b86 <Base_de_Datos+0xa2a>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d101      	bne.n	8000b86 <Base_de_Datos+0xa2a>
				return 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e155      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d104      	bne.n	8000b96 <Base_de_Datos+0xa3a>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d101      	bne.n	8000b96 <Base_de_Datos+0xa3a>
				return 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e14d      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d104      	bne.n	8000ba6 <Base_de_Datos+0xa4a>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <Base_de_Datos+0xa4a>
				return 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e145      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d104      	bne.n	8000bb6 <Base_de_Datos+0xa5a>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d101      	bne.n	8000bb6 <Base_de_Datos+0xa5a>
				return 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e13d      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d104      	bne.n	8000bc6 <Base_de_Datos+0xa6a>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <Base_de_Datos+0xa6a>
				return 1;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e135      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	f040 8126 	bne.w	8000e1a <Base_de_Datos+0xcbe>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	f040 8122 	bne.w	8000e1a <Base_de_Datos+0xcbe>
				return 1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e12b      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('w'):
			if (k == 0 && l == 0){
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <Base_de_Datos+0xa8e>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <Base_de_Datos+0xa8e>
				return 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e123      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d104      	bne.n	8000bfa <Base_de_Datos+0xa9e>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d101      	bne.n	8000bfa <Base_de_Datos+0xa9e>
				return 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e11b      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d104      	bne.n	8000c0a <Base_de_Datos+0xaae>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <Base_de_Datos+0xaae>
				return 1;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e113      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d104      	bne.n	8000c1a <Base_de_Datos+0xabe>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d101      	bne.n	8000c1a <Base_de_Datos+0xabe>
				return 1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e10b      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d104      	bne.n	8000c2a <Base_de_Datos+0xace>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <Base_de_Datos+0xace>
				return 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e103      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	f040 80f6 	bne.w	8000e1e <Base_de_Datos+0xcc2>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	f040 80f2 	bne.w	8000e1e <Base_de_Datos+0xcc2>
				return 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e0f9      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('x'):
			if (k == 0 && l == 0){
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d104      	bne.n	8000c4e <Base_de_Datos+0xaf2>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <Base_de_Datos+0xaf2>
				return 1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e0f1      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d104      	bne.n	8000c5e <Base_de_Datos+0xb02>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d101      	bne.n	8000c5e <Base_de_Datos+0xb02>
				return 1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e0e9      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d104      	bne.n	8000c6e <Base_de_Datos+0xb12>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <Base_de_Datos+0xb12>
				return 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e0e1      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d104      	bne.n	8000c7e <Base_de_Datos+0xb22>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d101      	bne.n	8000c7e <Base_de_Datos+0xb22>
				return 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e0d9      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d104      	bne.n	8000c8e <Base_de_Datos+0xb32>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <Base_de_Datos+0xb32>
				return 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e0d1      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	f040 80c6 	bne.w	8000e22 <Base_de_Datos+0xcc6>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	f040 80c2 	bne.w	8000e22 <Base_de_Datos+0xcc6>
				return 1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e0c7      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('y'):
			if (k == 0 && l == 0){
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d104      	bne.n	8000cb2 <Base_de_Datos+0xb56>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <Base_de_Datos+0xb56>
				return 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e0bf      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d104      	bne.n	8000cc2 <Base_de_Datos+0xb66>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d101      	bne.n	8000cc2 <Base_de_Datos+0xb66>
				return 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e0b7      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d104      	bne.n	8000cd2 <Base_de_Datos+0xb76>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <Base_de_Datos+0xb76>
				return 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e0af      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d104      	bne.n	8000ce2 <Base_de_Datos+0xb86>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d101      	bne.n	8000ce2 <Base_de_Datos+0xb86>
				return 1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e0a7      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d104      	bne.n	8000cf2 <Base_de_Datos+0xb96>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d101      	bne.n	8000cf2 <Base_de_Datos+0xb96>
				return 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e09f      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	f040 8096 	bne.w	8000e26 <Base_de_Datos+0xcca>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	f040 8092 	bne.w	8000e26 <Base_de_Datos+0xcca>
				return 1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e095      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case('z'):
			if (k == 0 && l == 0){
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d104      	bne.n	8000d16 <Base_de_Datos+0xbba>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <Base_de_Datos+0xbba>
				return 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e08d      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 0 && l == 1){
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d104      	bne.n	8000d26 <Base_de_Datos+0xbca>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d101      	bne.n	8000d26 <Base_de_Datos+0xbca>
				return 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e085      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 0){
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d104      	bne.n	8000d36 <Base_de_Datos+0xbda>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <Base_de_Datos+0xbda>
				return 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e07d      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 1 && l == 1){
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d104      	bne.n	8000d46 <Base_de_Datos+0xbea>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d101      	bne.n	8000d46 <Base_de_Datos+0xbea>
				return 1;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e075      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 0){
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d104      	bne.n	8000d56 <Base_de_Datos+0xbfa>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <Base_de_Datos+0xbfa>
				return 1;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e06d      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			else if (k == 2 && l == 1){
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d166      	bne.n	8000e2a <Base_de_Datos+0xcce>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d163      	bne.n	8000e2a <Base_de_Datos+0xcce>
				return 1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e065      	b.n	8000e32 <Base_de_Datos+0xcd6>
			}
			break;

		case(' '):
				if (k == 0 && l == 0){
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d104      	bne.n	8000d76 <Base_de_Datos+0xc1a>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <Base_de_Datos+0xc1a>
					return 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e05d      	b.n	8000e32 <Base_de_Datos+0xcd6>
				}
				else if (k == 0 && l == 1){
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d104      	bne.n	8000d86 <Base_de_Datos+0xc2a>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d101      	bne.n	8000d86 <Base_de_Datos+0xc2a>
					return 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e055      	b.n	8000e32 <Base_de_Datos+0xcd6>
				}
				else if (k == 1 && l == 0){
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d104      	bne.n	8000d96 <Base_de_Datos+0xc3a>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <Base_de_Datos+0xc3a>
					return 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e04d      	b.n	8000e32 <Base_de_Datos+0xcd6>
				}
				else if (k == 1 && l == 1){
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d104      	bne.n	8000da6 <Base_de_Datos+0xc4a>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d101      	bne.n	8000da6 <Base_de_Datos+0xc4a>
					return 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e045      	b.n	8000e32 <Base_de_Datos+0xcd6>
				}
				else if (k == 2 && l == 0){
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d104      	bne.n	8000db6 <Base_de_Datos+0xc5a>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <Base_de_Datos+0xc5a>
					return 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e03d      	b.n	8000e32 <Base_de_Datos+0xcd6>
				}
				else if (k == 2 && l == 1){
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d138      	bne.n	8000e2e <Base_de_Datos+0xcd2>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d135      	bne.n	8000e2e <Base_de_Datos+0xcd2>
					return 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e035      	b.n	8000e32 <Base_de_Datos+0xcd6>
			break;
 8000dc6:	bf00      	nop
 8000dc8:	e032      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000dca:	bf00      	nop
 8000dcc:	e030      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000dce:	bf00      	nop
 8000dd0:	e02e      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000dd2:	bf00      	nop
 8000dd4:	e02c      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000dd6:	bf00      	nop
 8000dd8:	e02a      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000dda:	bf00      	nop
 8000ddc:	e028      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000dde:	bf00      	nop
 8000de0:	e026      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000de2:	bf00      	nop
 8000de4:	e024      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000de6:	bf00      	nop
 8000de8:	e022      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000dea:	bf00      	nop
 8000dec:	e020      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000dee:	bf00      	nop
 8000df0:	e01e      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000df2:	bf00      	nop
 8000df4:	e01c      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000df6:	bf00      	nop
 8000df8:	e01a      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000dfa:	bf00      	nop
 8000dfc:	e018      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000dfe:	bf00      	nop
 8000e00:	e016      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000e02:	bf00      	nop
 8000e04:	e014      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000e06:	bf00      	nop
 8000e08:	e012      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000e0a:	bf00      	nop
 8000e0c:	e010      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000e0e:	bf00      	nop
 8000e10:	e00e      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000e12:	bf00      	nop
 8000e14:	e00c      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000e16:	bf00      	nop
 8000e18:	e00a      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000e1a:	bf00      	nop
 8000e1c:	e008      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000e1e:	bf00      	nop
 8000e20:	e006      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000e22:	bf00      	nop
 8000e24:	e004      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000e26:	bf00      	nop
 8000e28:	e002      	b.n	8000e30 <Base_de_Datos+0xcd4>
			break;
 8000e2a:	bf00      	nop
 8000e2c:	e000      	b.n	8000e30 <Base_de_Datos+0xcd4>
				}
				break;
 8000e2e:	bf00      	nop
	}
	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4906      	ldr	r1, [pc, #24]	; (8000e70 <__NVIC_EnableIRQ+0x34>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db12      	blt.n	8000eac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	490a      	ldr	r1, [pc, #40]	; (8000eb8 <__NVIC_DisableIRQ+0x44>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	3320      	adds	r3, #32
 8000e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea0:	f3bf 8f4f 	dsb	sy
}
 8000ea4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ea6:	f3bf 8f6f 	isb	sy
}
 8000eaa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <Homing>:
uint16_t velocidad1_homing = 1;
uint16_t velocidad2_homing = 3;
//const uint16_t pxmmX = 110; //Pasos por mm del motor X (previamente calibrados, no es numero al azar)
//const uint16_t pxmmY = 110; //Pasos por mm del motor Y

void Homing(){
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b093      	sub	sp, #76	; 0x4c
 8000ec0:	af04      	add	r7, sp, #16
	homingX = 1;
 8000ec2:	4b66      	ldr	r3, [pc, #408]	; (800105c <Homing+0x1a0>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
	homingY = 1;
 8000ec8:	4b65      	ldr	r3, [pc, #404]	; (8001060 <Homing+0x1a4>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
	Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 8000ece:	4b65      	ldr	r3, [pc, #404]	; (8001064 <Homing+0x1a8>)
 8000ed0:	f107 0420 	add.w	r4, r7, #32
 8000ed4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
 8000eda:	4a63      	ldr	r2, [pc, #396]	; (8001068 <Homing+0x1ac>)
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ee4:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd;
	lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 8000ee8:	4638      	mov	r0, r7
 8000eea:	f107 0218 	add.w	r2, r7, #24
 8000eee:	f107 0120 	add.w	r1, r7, #32
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9303      	str	r3, [sp, #12]
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	9302      	str	r3, [sp, #8]
 8000efa:	4b5c      	ldr	r3, [pc, #368]	; (800106c <Homing+0x1b0>)
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	2302      	movs	r3, #2
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	4b5a      	ldr	r3, [pc, #360]	; (800106c <Homing+0x1b0>)
 8000f04:	f001 faf4 	bl	80024f0 <Lcd_create>

	//====Homing rapido====
	HAL_GPIO_WritePin(GPIOB, dir_motorX_Pin, GPIO_PIN_RESET);	//seteo sentido de cada motor
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	4858      	ldr	r0, [pc, #352]	; (8001070 <Homing+0x1b4>)
 8000f0e:	f002 fc82 	bl	8003816 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, dir_motorY_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2108      	movs	r1, #8
 8000f16:	4856      	ldr	r0, [pc, #344]	; (8001070 <Homing+0x1b4>)
 8000f18:	f002 fc7d 	bl	8003816 <HAL_GPIO_WritePin>

	while(homingX == 1 || homingY == 1){
 8000f1c:	e014      	b.n	8000f48 <Homing+0x8c>
		if (homingX == 1){
 8000f1e:	4b4f      	ldr	r3, [pc, #316]	; (800105c <Homing+0x1a0>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d103      	bne.n	8000f2e <Homing+0x72>
			HAL_GPIO_TogglePin(GPIOA, motorX_Pin);
 8000f26:	2110      	movs	r1, #16
 8000f28:	4850      	ldr	r0, [pc, #320]	; (800106c <Homing+0x1b0>)
 8000f2a:	f002 fc8c 	bl	8003846 <HAL_GPIO_TogglePin>
		}
		if (homingY == 1){
 8000f2e:	4b4c      	ldr	r3, [pc, #304]	; (8001060 <Homing+0x1a4>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d103      	bne.n	8000f3e <Homing+0x82>
			HAL_GPIO_TogglePin(GPIOA, motorY_Pin);
 8000f36:	2120      	movs	r1, #32
 8000f38:	484c      	ldr	r0, [pc, #304]	; (800106c <Homing+0x1b0>)
 8000f3a:	f002 fc84 	bl	8003846 <HAL_GPIO_TogglePin>
		}
		HAL_Delay(velocidad1_homing);
 8000f3e:	4b4d      	ldr	r3, [pc, #308]	; (8001074 <Homing+0x1b8>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 f99a 	bl	800327c <HAL_Delay>
	while(homingX == 1 || homingY == 1){
 8000f48:	4b44      	ldr	r3, [pc, #272]	; (800105c <Homing+0x1a0>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d0e6      	beq.n	8000f1e <Homing+0x62>
 8000f50:	4b43      	ldr	r3, [pc, #268]	; (8001060 <Homing+0x1a4>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d0e2      	beq.n	8000f1e <Homing+0x62>
	}

	//===Retroceso===
	HAL_GPIO_WritePin(GPIOB, dir_motorX_Pin, GPIO_PIN_SET);	//seteo sentido de cada motor
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	4844      	ldr	r0, [pc, #272]	; (8001070 <Homing+0x1b4>)
 8000f5e:	f002 fc5a 	bl	8003816 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, dir_motorY_Pin, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2108      	movs	r1, #8
 8000f66:	4842      	ldr	r0, [pc, #264]	; (8001070 <Homing+0x1b4>)
 8000f68:	f002 fc55 	bl	8003816 <HAL_GPIO_WritePin>
	NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000f6c:	2017      	movs	r0, #23
 8000f6e:	f7ff ff81 	bl	8000e74 <__NVIC_DisableIRQ>
	for (int i = 0; i < 1000; i++){
 8000f72:	2300      	movs	r3, #0
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
 8000f76:	e00f      	b.n	8000f98 <Homing+0xdc>
		HAL_GPIO_TogglePin(GPIOA, motorX_Pin);
 8000f78:	2110      	movs	r1, #16
 8000f7a:	483c      	ldr	r0, [pc, #240]	; (800106c <Homing+0x1b0>)
 8000f7c:	f002 fc63 	bl	8003846 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, motorY_Pin);
 8000f80:	2120      	movs	r1, #32
 8000f82:	483a      	ldr	r0, [pc, #232]	; (800106c <Homing+0x1b0>)
 8000f84:	f002 fc5f 	bl	8003846 <HAL_GPIO_TogglePin>
		HAL_Delay(velocidad1_homing);
 8000f88:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <Homing+0x1b8>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 f975 	bl	800327c <HAL_Delay>
	for (int i = 0; i < 1000; i++){
 8000f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f94:	3301      	adds	r3, #1
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
 8000f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f9e:	dbeb      	blt.n	8000f78 <Homing+0xbc>
	}
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fa0:	2017      	movs	r0, #23
 8000fa2:	f7ff ff4b 	bl	8000e3c <__NVIC_EnableIRQ>

	//===Homing lento===
	HAL_GPIO_WritePin(GPIOB, dir_motorX_Pin, GPIO_PIN_RESET);	//seteo sentido de cada motor
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2110      	movs	r1, #16
 8000faa:	4831      	ldr	r0, [pc, #196]	; (8001070 <Homing+0x1b4>)
 8000fac:	f002 fc33 	bl	8003816 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, dir_motorY_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	482e      	ldr	r0, [pc, #184]	; (8001070 <Homing+0x1b4>)
 8000fb6:	f002 fc2e 	bl	8003816 <HAL_GPIO_WritePin>


	while(homingX == 2 || homingY == 2){
 8000fba:	e014      	b.n	8000fe6 <Homing+0x12a>
		if (homingX == 2){
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <Homing+0x1a0>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d103      	bne.n	8000fcc <Homing+0x110>
			HAL_GPIO_TogglePin(GPIOA, motorX_Pin);
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	4829      	ldr	r0, [pc, #164]	; (800106c <Homing+0x1b0>)
 8000fc8:	f002 fc3d 	bl	8003846 <HAL_GPIO_TogglePin>
		}
		if (homingY == 2){
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <Homing+0x1a4>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d103      	bne.n	8000fdc <Homing+0x120>
			HAL_GPIO_TogglePin(GPIOA, motorY_Pin);
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	4825      	ldr	r0, [pc, #148]	; (800106c <Homing+0x1b0>)
 8000fd8:	f002 fc35 	bl	8003846 <HAL_GPIO_TogglePin>
		}
		HAL_Delay(velocidad2_homing);
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <Homing+0x1bc>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 f94b 	bl	800327c <HAL_Delay>
	while(homingX == 2 || homingY == 2){
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <Homing+0x1a0>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d0e6      	beq.n	8000fbc <Homing+0x100>
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <Homing+0x1a4>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d0e2      	beq.n	8000fbc <Homing+0x100>
	}

	HAL_GPIO_WritePin(GPIOB, dir_motorY_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	481d      	ldr	r0, [pc, #116]	; (8001070 <Homing+0x1b4>)
 8000ffc:	f002 fc0b 	bl	8003816 <HAL_GPIO_WritePin>
	for (int i = 0; i < pxmmY*35; i++){	//Eje Y se va al extremo opuesto al del final de carrera alli es donde debe comenzar la impresion
 8001000:	2300      	movs	r3, #0
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
 8001004:	e00b      	b.n	800101e <Homing+0x162>
		HAL_GPIO_TogglePin(GPIOA, motorY_Pin);
 8001006:	2120      	movs	r1, #32
 8001008:	4818      	ldr	r0, [pc, #96]	; (800106c <Homing+0x1b0>)
 800100a:	f002 fc1c 	bl	8003846 <HAL_GPIO_TogglePin>
		HAL_Delay(velocidad1_homing);
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <Homing+0x1b8>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f002 f932 	bl	800327c <HAL_Delay>
	for (int i = 0; i < pxmmY*35; i++){	//Eje Y se va al extremo opuesto al del final de carrera alli es donde debe comenzar la impresion
 8001018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800101a:	3301      	adds	r3, #1
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <Homing+0x1c0>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	00da      	lsls	r2, r3, #3
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001030:	429a      	cmp	r2, r3
 8001032:	dbe8      	blt.n	8001006 <Homing+0x14a>
	}
	HAL_GPIO_WritePin(GPIOB, dir_motorX_Pin, GPIO_PIN_SET);	//seteo sentido de cada motor
 8001034:	2201      	movs	r2, #1
 8001036:	2110      	movs	r1, #16
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <Homing+0x1b4>)
 800103a:	f002 fbec 	bl	8003816 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, dir_motorY_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2108      	movs	r1, #8
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <Homing+0x1b4>)
 8001044:	f002 fbe7 	bl	8003816 <HAL_GPIO_WritePin>
	homingX = 0;
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <Homing+0x1a0>)
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
	homingY = 0;
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <Homing+0x1a4>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	373c      	adds	r7, #60	; 0x3c
 8001058:	46bd      	mov	sp, r7
 800105a:	bd90      	pop	{r4, r7, pc}
 800105c:	2000014d 	.word	0x2000014d
 8001060:	2000014e 	.word	0x2000014e
 8001064:	080058ac 	.word	0x080058ac
 8001068:	080058bc 	.word	0x080058bc
 800106c:	40010800 	.word	0x40010800
 8001070:	40010c00 	.word	0x40010c00
 8001074:	20000000 	.word	0x20000000
 8001078:	20000002 	.word	0x20000002
 800107c:	080059ec 	.word	0x080059ec

08001080 <Manejo_Interrupciones>:
uint8_t columnas = 5*2;
uint8_t i = 0;
uint8_t cont_espacios = 0;
char texto[15] = "              ";	//string de caracteres de la variable texto (inicialmente vacia)

void Manejo_Interrupciones(int pin) {
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b09a      	sub	sp, #104	; 0x68
 8001084:	af04      	add	r7, sp, #16
 8001086:	61f8      	str	r0, [r7, #28]
	//currentMillis = HAL_GetTick();
	Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 8001088:	4b97      	ldr	r3, [pc, #604]	; (80012e8 <Manejo_Interrupciones+0x268>)
 800108a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800108e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
 8001094:	4a95      	ldr	r2, [pc, #596]	; (80012ec <Manejo_Interrupciones+0x26c>)
 8001096:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800109a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800109e:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd;
	lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 80010a2:	4638      	mov	r0, r7
 80010a4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80010a8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80010ac:	2300      	movs	r3, #0
 80010ae:	9303      	str	r3, [sp, #12]
 80010b0:	2308      	movs	r3, #8
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	4b8e      	ldr	r3, [pc, #568]	; (80012f0 <Manejo_Interrupciones+0x270>)
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	4b8c      	ldr	r3, [pc, #560]	; (80012f0 <Manejo_Interrupciones+0x270>)
 80010be:	f001 fa17 	bl	80024f0 <Lcd_create>
 80010c2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80010c6:	463d      	mov	r5, r7
 80010c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010d0:	e884 0003 	stmia.w	r4, {r0, r1}

/*=======================================================================
* ===========================Texto======================================
* ======================================================================*/

	if(estado_impresora == TEXTO){
 80010d4:	4b87      	ldr	r3, [pc, #540]	; (80012f4 <Manejo_Interrupciones+0x274>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f040 8374 	bne.w	80017c6 <Manejo_Interrupciones+0x746>
//---Columna 1---
		Lcd_clear(&lcd);
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 faaa 	bl	800263c <Lcd_clear>
		Lcd_cursor(&lcd, 0,0);
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fa89 	bl	8002608 <Lcd_cursor>
		Lcd_string(&lcd, "Escriba el texto");
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	497f      	ldr	r1, [pc, #508]	; (80012f8 <Manejo_Interrupciones+0x278>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 fa63 	bl	80025c8 <Lcd_string>

		HAL_GPIO_WritePin(GPIOA, Columna1_Pin, 1);	//Habilito primera columna de teclado (1,4,7,*)
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001108:	4879      	ldr	r0, [pc, #484]	; (80012f0 <Manejo_Interrupciones+0x270>)
 800110a:	f002 fb84 	bl	8003816 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Columna2_Pin, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001114:	4876      	ldr	r0, [pc, #472]	; (80012f0 <Manejo_Interrupciones+0x270>)
 8001116:	f002 fb7e 	bl	8003816 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Columna3_Pin, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001120:	4873      	ldr	r0, [pc, #460]	; (80012f0 <Manejo_Interrupciones+0x270>)
 8001122:	f002 fb78 	bl	8003816 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Columna4_Pin, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800112c:	4870      	ldr	r0, [pc, #448]	; (80012f0 <Manejo_Interrupciones+0x270>)
 800112e:	f002 fb72 	bl	8003816 <HAL_GPIO_WritePin>

		if(pin == 1 && HAL_GPIO_ReadPin(GPIOB, Fila1_EXTI_Pin)){	//Al apretar el 1, el texto no se modifica
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d131      	bne.n	800119c <Manejo_Interrupciones+0x11c>
 8001138:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800113c:	486f      	ldr	r0, [pc, #444]	; (80012fc <Manejo_Interrupciones+0x27c>)
 800113e:	f002 fb53 	bl	80037e8 <HAL_GPIO_ReadPin>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d029      	beq.n	800119c <Manejo_Interrupciones+0x11c>

			texto[i] = Texto(1);
 8001148:	4b6d      	ldr	r3, [pc, #436]	; (8001300 <Manejo_Interrupciones+0x280>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461c      	mov	r4, r3
 800114e:	2001      	movs	r0, #1
 8001150:	f000 ffe0 	bl	8002114 <Texto>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <Manejo_Interrupciones+0x284>)
 800115a:	551a      	strb	r2, [r3, r4]
			Lcd_clear(&lcd);
 800115c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001160:	4618      	mov	r0, r3
 8001162:	f001 fa6b 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,0);
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f001 fa4a 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "Escriba el texto");
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	495f      	ldr	r1, [pc, #380]	; (80012f8 <Manejo_Interrupciones+0x278>)
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fa24 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	2200      	movs	r2, #0
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fa3d 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, texto);
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	495c      	ldr	r1, [pc, #368]	; (8001304 <Manejo_Interrupciones+0x284>)
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fa17 	bl	80025c8 <Lcd_string>
 800119a:	e0de      	b.n	800135a <Manejo_Interrupciones+0x2da>

		}
		else if(pin == 2 && HAL_GPIO_ReadPin(GPIOB, Fila2_EXTI_Pin)){
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d131      	bne.n	8001206 <Manejo_Interrupciones+0x186>
 80011a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a6:	4855      	ldr	r0, [pc, #340]	; (80012fc <Manejo_Interrupciones+0x27c>)
 80011a8:	f002 fb1e 	bl	80037e8 <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d029      	beq.n	8001206 <Manejo_Interrupciones+0x186>

			texto[i] = Texto(4);
 80011b2:	4b53      	ldr	r3, [pc, #332]	; (8001300 <Manejo_Interrupciones+0x280>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461c      	mov	r4, r3
 80011b8:	2004      	movs	r0, #4
 80011ba:	f000 ffab 	bl	8002114 <Texto>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b50      	ldr	r3, [pc, #320]	; (8001304 <Manejo_Interrupciones+0x284>)
 80011c4:	551a      	strb	r2, [r3, r4]
			Lcd_clear(&lcd);
 80011c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fa36 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,0);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 fa15 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "Escriba el texto");
 80011de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e2:	4945      	ldr	r1, [pc, #276]	; (80012f8 <Manejo_Interrupciones+0x278>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 f9ef 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	2200      	movs	r2, #0
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 fa08 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, texto);
 80011f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fc:	4941      	ldr	r1, [pc, #260]	; (8001304 <Manejo_Interrupciones+0x284>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 f9e2 	bl	80025c8 <Lcd_string>
 8001204:	e0a9      	b.n	800135a <Manejo_Interrupciones+0x2da>

		}
		else if(pin == 3 && HAL_GPIO_ReadPin(GPIOB, Fila3_EXTI_Pin)){
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	2b03      	cmp	r3, #3
 800120a:	d131      	bne.n	8001270 <Manejo_Interrupciones+0x1f0>
 800120c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001210:	483a      	ldr	r0, [pc, #232]	; (80012fc <Manejo_Interrupciones+0x27c>)
 8001212:	f002 fae9 	bl	80037e8 <HAL_GPIO_ReadPin>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d029      	beq.n	8001270 <Manejo_Interrupciones+0x1f0>

			texto[i] = Texto(7);
 800121c:	4b38      	ldr	r3, [pc, #224]	; (8001300 <Manejo_Interrupciones+0x280>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461c      	mov	r4, r3
 8001222:	2007      	movs	r0, #7
 8001224:	f000 ff76 	bl	8002114 <Texto>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	4b35      	ldr	r3, [pc, #212]	; (8001304 <Manejo_Interrupciones+0x284>)
 800122e:	551a      	strb	r2, [r3, r4]
			Lcd_clear(&lcd);
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fa01 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,0);
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f001 f9e0 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "Escriba el texto");
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	492a      	ldr	r1, [pc, #168]	; (80012f8 <Manejo_Interrupciones+0x278>)
 800124e:	4618      	mov	r0, r3
 8001250:	f001 f9ba 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 8001254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001258:	2200      	movs	r2, #0
 800125a:	2101      	movs	r1, #1
 800125c:	4618      	mov	r0, r3
 800125e:	f001 f9d3 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, texto);
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	4927      	ldr	r1, [pc, #156]	; (8001304 <Manejo_Interrupciones+0x284>)
 8001268:	4618      	mov	r0, r3
 800126a:	f001 f9ad 	bl	80025c8 <Lcd_string>
 800126e:	e074      	b.n	800135a <Manejo_Interrupciones+0x2da>
		}
		else if(pin == 4 && HAL_GPIO_ReadPin(GPIOB, Fila4_EXTI_Pin)){	//'*' borra letra
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2b04      	cmp	r3, #4
 8001274:	d171      	bne.n	800135a <Manejo_Interrupciones+0x2da>
 8001276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127a:	4820      	ldr	r0, [pc, #128]	; (80012fc <Manejo_Interrupciones+0x27c>)
 800127c:	f002 fab4 	bl	80037e8 <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d069      	beq.n	800135a <Manejo_Interrupciones+0x2da>

			texto[i] = ' ';
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <Manejo_Interrupciones+0x280>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <Manejo_Interrupciones+0x284>)
 800128e:	2120      	movs	r1, #32
 8001290:	5499      	strb	r1, [r3, r2]
			Lcd_clear(&lcd);
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	4618      	mov	r0, r3
 8001298:	f001 f9d0 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,5);
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	2205      	movs	r2, #5
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 f9af 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "Letra");
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	4916      	ldr	r1, [pc, #88]	; (8001308 <Manejo_Interrupciones+0x288>)
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 f989 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,4);
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	2204      	movs	r2, #4
 80012bc:	2101      	movs	r1, #1
 80012be:	4618      	mov	r0, r3
 80012c0:	f001 f9a2 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "borrada");
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	4910      	ldr	r1, [pc, #64]	; (800130c <Manejo_Interrupciones+0x28c>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 f97c 	bl	80025c8 <Lcd_string>
			HAL_Delay(1000);
 80012d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d4:	f001 ffd2 	bl	800327c <HAL_Delay>

			if (i == 0){
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <Manejo_Interrupciones+0x280>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d117      	bne.n	8001310 <Manejo_Interrupciones+0x290>
				i = 0;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <Manejo_Interrupciones+0x280>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
 80012e6:	e019      	b.n	800131c <Manejo_Interrupciones+0x29c>
 80012e8:	08005954 	.word	0x08005954
 80012ec:	08005964 	.word	0x08005964
 80012f0:	40010800 	.word	0x40010800
 80012f4:	2000014c 	.word	0x2000014c
 80012f8:	080058c4 	.word	0x080058c4
 80012fc:	40010c00 	.word	0x40010c00
 8001300:	20000098 	.word	0x20000098
 8001304:	20000008 	.word	0x20000008
 8001308:	080058d8 	.word	0x080058d8
 800130c:	080058e0 	.word	0x080058e0
			}
			else{
				i--;
 8001310:	4bca      	ldr	r3, [pc, #808]	; (800163c <Manejo_Interrupciones+0x5bc>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	3b01      	subs	r3, #1
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4bc8      	ldr	r3, [pc, #800]	; (800163c <Manejo_Interrupciones+0x5bc>)
 800131a:	701a      	strb	r2, [r3, #0]
			}
			Lcd_clear(&lcd);
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	4618      	mov	r0, r3
 8001322:	f001 f98b 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,0);
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f001 f96a 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "Escriba el texto");
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	49c1      	ldr	r1, [pc, #772]	; (8001640 <Manejo_Interrupciones+0x5c0>)
 800133a:	4618      	mov	r0, r3
 800133c:	f001 f944 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	2200      	movs	r2, #0
 8001346:	2101      	movs	r1, #1
 8001348:	4618      	mov	r0, r3
 800134a:	f001 f95d 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, texto);
 800134e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001352:	49bc      	ldr	r1, [pc, #752]	; (8001644 <Manejo_Interrupciones+0x5c4>)
 8001354:	4618      	mov	r0, r3
 8001356:	f001 f937 	bl	80025c8 <Lcd_string>
		}

//---Columna 2----

		HAL_GPIO_WritePin(GPIOA, Columna1_Pin, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001360:	48b9      	ldr	r0, [pc, #740]	; (8001648 <Manejo_Interrupciones+0x5c8>)
 8001362:	f002 fa58 	bl	8003816 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Columna2_Pin, 1);	//Habilito segunda columna de teclado (2,5,8,0)
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136c:	48b6      	ldr	r0, [pc, #728]	; (8001648 <Manejo_Interrupciones+0x5c8>)
 800136e:	f002 fa52 	bl	8003816 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Columna3_Pin, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001378:	48b3      	ldr	r0, [pc, #716]	; (8001648 <Manejo_Interrupciones+0x5c8>)
 800137a:	f002 fa4c 	bl	8003816 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Columna4_Pin, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001384:	48b0      	ldr	r0, [pc, #704]	; (8001648 <Manejo_Interrupciones+0x5c8>)
 8001386:	f002 fa46 	bl	8003816 <HAL_GPIO_WritePin>

		if(pin == 1 && HAL_GPIO_ReadPin(GPIOB, Fila1_EXTI_Pin)){
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d131      	bne.n	80013f4 <Manejo_Interrupciones+0x374>
 8001390:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001394:	48ad      	ldr	r0, [pc, #692]	; (800164c <Manejo_Interrupciones+0x5cc>)
 8001396:	f002 fa27 	bl	80037e8 <HAL_GPIO_ReadPin>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d029      	beq.n	80013f4 <Manejo_Interrupciones+0x374>

			texto[i] = Texto(2);
 80013a0:	4ba6      	ldr	r3, [pc, #664]	; (800163c <Manejo_Interrupciones+0x5bc>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461c      	mov	r4, r3
 80013a6:	2002      	movs	r0, #2
 80013a8:	f000 feb4 	bl	8002114 <Texto>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4ba4      	ldr	r3, [pc, #656]	; (8001644 <Manejo_Interrupciones+0x5c4>)
 80013b2:	551a      	strb	r2, [r3, r4]
			Lcd_clear(&lcd);
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 f93f 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,0);
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 f91e 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "Escriba el texto");
 80013cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d0:	499b      	ldr	r1, [pc, #620]	; (8001640 <Manejo_Interrupciones+0x5c0>)
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 f8f8 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	2200      	movs	r2, #0
 80013de:	2101      	movs	r1, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 f911 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, texto);
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4996      	ldr	r1, [pc, #600]	; (8001644 <Manejo_Interrupciones+0x5c4>)
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 f8eb 	bl	80025c8 <Lcd_string>
 80013f2:	e09d      	b.n	8001530 <Manejo_Interrupciones+0x4b0>
		}
		else if(pin == 2 && HAL_GPIO_ReadPin(GPIOB, Fila2_EXTI_Pin)){
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d131      	bne.n	800145e <Manejo_Interrupciones+0x3de>
 80013fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013fe:	4893      	ldr	r0, [pc, #588]	; (800164c <Manejo_Interrupciones+0x5cc>)
 8001400:	f002 f9f2 	bl	80037e8 <HAL_GPIO_ReadPin>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d029      	beq.n	800145e <Manejo_Interrupciones+0x3de>

			texto[i] = Texto(5);
 800140a:	4b8c      	ldr	r3, [pc, #560]	; (800163c <Manejo_Interrupciones+0x5bc>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	461c      	mov	r4, r3
 8001410:	2005      	movs	r0, #5
 8001412:	f000 fe7f 	bl	8002114 <Texto>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	4b8a      	ldr	r3, [pc, #552]	; (8001644 <Manejo_Interrupciones+0x5c4>)
 800141c:	551a      	strb	r2, [r3, r4]
			Lcd_clear(&lcd);
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	4618      	mov	r0, r3
 8001424:	f001 f90a 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,0);
 8001428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f001 f8e9 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "Escriba el texto");
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	4981      	ldr	r1, [pc, #516]	; (8001640 <Manejo_Interrupciones+0x5c0>)
 800143c:	4618      	mov	r0, r3
 800143e:	f001 f8c3 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	2200      	movs	r2, #0
 8001448:	2101      	movs	r1, #1
 800144a:	4618      	mov	r0, r3
 800144c:	f001 f8dc 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, texto);
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	497b      	ldr	r1, [pc, #492]	; (8001644 <Manejo_Interrupciones+0x5c4>)
 8001456:	4618      	mov	r0, r3
 8001458:	f001 f8b6 	bl	80025c8 <Lcd_string>
 800145c:	e068      	b.n	8001530 <Manejo_Interrupciones+0x4b0>
		}
		else if(pin == 3 && HAL_GPIO_ReadPin(GPIOB, Fila3_EXTI_Pin)){
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	2b03      	cmp	r3, #3
 8001462:	d131      	bne.n	80014c8 <Manejo_Interrupciones+0x448>
 8001464:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001468:	4878      	ldr	r0, [pc, #480]	; (800164c <Manejo_Interrupciones+0x5cc>)
 800146a:	f002 f9bd 	bl	80037e8 <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d029      	beq.n	80014c8 <Manejo_Interrupciones+0x448>

			texto[i] = Texto(8);
 8001474:	4b71      	ldr	r3, [pc, #452]	; (800163c <Manejo_Interrupciones+0x5bc>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461c      	mov	r4, r3
 800147a:	2008      	movs	r0, #8
 800147c:	f000 fe4a 	bl	8002114 <Texto>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	4b6f      	ldr	r3, [pc, #444]	; (8001644 <Manejo_Interrupciones+0x5c4>)
 8001486:	551a      	strb	r2, [r3, r4]
			Lcd_clear(&lcd);
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	4618      	mov	r0, r3
 800148e:	f001 f8d5 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,0);
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f001 f8b4 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "Escriba el texto");
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4966      	ldr	r1, [pc, #408]	; (8001640 <Manejo_Interrupciones+0x5c0>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 f88e 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	2200      	movs	r2, #0
 80014b2:	2101      	movs	r1, #1
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 f8a7 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, texto);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4961      	ldr	r1, [pc, #388]	; (8001644 <Manejo_Interrupciones+0x5c4>)
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 f881 	bl	80025c8 <Lcd_string>
 80014c6:	e033      	b.n	8001530 <Manejo_Interrupciones+0x4b0>
		}
		else if(pin == 4 && HAL_GPIO_ReadPin(GPIOB, Fila4_EXTI_Pin)){	//Espacio
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d130      	bne.n	8001530 <Manejo_Interrupciones+0x4b0>
 80014ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d2:	485e      	ldr	r0, [pc, #376]	; (800164c <Manejo_Interrupciones+0x5cc>)
 80014d4:	f002 f988 	bl	80037e8 <HAL_GPIO_ReadPin>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d028      	beq.n	8001530 <Manejo_Interrupciones+0x4b0>

			texto[i] = Texto(0);
 80014de:	4b57      	ldr	r3, [pc, #348]	; (800163c <Manejo_Interrupciones+0x5bc>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461c      	mov	r4, r3
 80014e4:	2000      	movs	r0, #0
 80014e6:	f000 fe15 	bl	8002114 <Texto>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b55      	ldr	r3, [pc, #340]	; (8001644 <Manejo_Interrupciones+0x5c4>)
 80014f0:	551a      	strb	r2, [r3, r4]
			Lcd_clear(&lcd);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4618      	mov	r0, r3
 80014f8:	f001 f8a0 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,0);
 80014fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f001 f87f 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "Escriba el texto");
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	494c      	ldr	r1, [pc, #304]	; (8001640 <Manejo_Interrupciones+0x5c0>)
 8001510:	4618      	mov	r0, r3
 8001512:	f001 f859 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	2200      	movs	r2, #0
 800151c:	2101      	movs	r1, #1
 800151e:	4618      	mov	r0, r3
 8001520:	f001 f872 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, texto);
 8001524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001528:	4946      	ldr	r1, [pc, #280]	; (8001644 <Manejo_Interrupciones+0x5c4>)
 800152a:	4618      	mov	r0, r3
 800152c:	f001 f84c 	bl	80025c8 <Lcd_string>
		}

//---Columna 3----

		HAL_GPIO_WritePin(GPIOA, Columna1_Pin, 0);
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001536:	4844      	ldr	r0, [pc, #272]	; (8001648 <Manejo_Interrupciones+0x5c8>)
 8001538:	f002 f96d 	bl	8003816 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Columna2_Pin, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001542:	4841      	ldr	r0, [pc, #260]	; (8001648 <Manejo_Interrupciones+0x5c8>)
 8001544:	f002 f967 	bl	8003816 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Columna3_Pin, 1);	//Habilito tercera columna de teclado (3,6,9,#)
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	483e      	ldr	r0, [pc, #248]	; (8001648 <Manejo_Interrupciones+0x5c8>)
 8001550:	f002 f961 	bl	8003816 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Columna4_Pin, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800155a:	483b      	ldr	r0, [pc, #236]	; (8001648 <Manejo_Interrupciones+0x5c8>)
 800155c:	f002 f95b 	bl	8003816 <HAL_GPIO_WritePin>

		if(pin == 1 && HAL_GPIO_ReadPin(GPIOB, Fila1_EXTI_Pin)){
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d131      	bne.n	80015ca <Manejo_Interrupciones+0x54a>
 8001566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800156a:	4838      	ldr	r0, [pc, #224]	; (800164c <Manejo_Interrupciones+0x5cc>)
 800156c:	f002 f93c 	bl	80037e8 <HAL_GPIO_ReadPin>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d029      	beq.n	80015ca <Manejo_Interrupciones+0x54a>

			texto[i] = Texto(3);
 8001576:	4b31      	ldr	r3, [pc, #196]	; (800163c <Manejo_Interrupciones+0x5bc>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461c      	mov	r4, r3
 800157c:	2003      	movs	r0, #3
 800157e:	f000 fdc9 	bl	8002114 <Texto>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <Manejo_Interrupciones+0x5c4>)
 8001588:	551a      	strb	r2, [r3, r4]
			Lcd_clear(&lcd);
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	4618      	mov	r0, r3
 8001590:	f001 f854 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,0);
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f001 f833 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "Escriba el texto");
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	4926      	ldr	r1, [pc, #152]	; (8001640 <Manejo_Interrupciones+0x5c0>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 f80d 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 80015ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b2:	2200      	movs	r2, #0
 80015b4:	2101      	movs	r1, #1
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 f826 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, texto);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4920      	ldr	r1, [pc, #128]	; (8001644 <Manejo_Interrupciones+0x5c4>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 f800 	bl	80025c8 <Lcd_string>
 80015c8:	e0d4      	b.n	8001774 <Manejo_Interrupciones+0x6f4>
		}
		else if(pin == 2 && HAL_GPIO_ReadPin(GPIOB, Fila2_EXTI_Pin)){
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d13f      	bne.n	8001650 <Manejo_Interrupciones+0x5d0>
 80015d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015d4:	481d      	ldr	r0, [pc, #116]	; (800164c <Manejo_Interrupciones+0x5cc>)
 80015d6:	f002 f907 	bl	80037e8 <HAL_GPIO_ReadPin>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d037      	beq.n	8001650 <Manejo_Interrupciones+0x5d0>

			texto[i] = Texto(6);
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <Manejo_Interrupciones+0x5bc>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461c      	mov	r4, r3
 80015e6:	2006      	movs	r0, #6
 80015e8:	f000 fd94 	bl	8002114 <Texto>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <Manejo_Interrupciones+0x5c4>)
 80015f2:	551a      	strb	r2, [r3, r4]
			Lcd_clear(&lcd);
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 f81f 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,0);
 80015fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f000 fffe 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "Escriba el texto");
 800160c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001610:	490b      	ldr	r1, [pc, #44]	; (8001640 <Manejo_Interrupciones+0x5c0>)
 8001612:	4618      	mov	r0, r3
 8001614:	f000 ffd8 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	2200      	movs	r2, #0
 800161e:	2101      	movs	r1, #1
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fff1 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, texto);
 8001626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162a:	4906      	ldr	r1, [pc, #24]	; (8001644 <Manejo_Interrupciones+0x5c4>)
 800162c:	4618      	mov	r0, r3
 800162e:	f000 ffcb 	bl	80025c8 <Lcd_string>
			HAL_Delay(1000);
 8001632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001636:	f001 fe21 	bl	800327c <HAL_Delay>
 800163a:	e09b      	b.n	8001774 <Manejo_Interrupciones+0x6f4>
 800163c:	20000098 	.word	0x20000098
 8001640:	080058c4 	.word	0x080058c4
 8001644:	20000008 	.word	0x20000008
 8001648:	40010800 	.word	0x40010800
 800164c:	40010c00 	.word	0x40010c00
		}
		else if(pin == 3 && HAL_GPIO_ReadPin(GPIOB, Fila3_EXTI_Pin)){
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d131      	bne.n	80016ba <Manejo_Interrupciones+0x63a>
 8001656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800165a:	48b5      	ldr	r0, [pc, #724]	; (8001930 <Manejo_Interrupciones+0x8b0>)
 800165c:	f002 f8c4 	bl	80037e8 <HAL_GPIO_ReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d029      	beq.n	80016ba <Manejo_Interrupciones+0x63a>

			texto[i] = Texto(9);
 8001666:	4bb3      	ldr	r3, [pc, #716]	; (8001934 <Manejo_Interrupciones+0x8b4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461c      	mov	r4, r3
 800166c:	2009      	movs	r0, #9
 800166e:	f000 fd51 	bl	8002114 <Texto>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	4bb0      	ldr	r3, [pc, #704]	; (8001938 <Manejo_Interrupciones+0x8b8>)
 8001678:	551a      	strb	r2, [r3, r4]
			Lcd_clear(&lcd);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4618      	mov	r0, r3
 8001680:	f000 ffdc 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,0);
 8001684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f000 ffbb 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "Escriba el texto");
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	49a9      	ldr	r1, [pc, #676]	; (800193c <Manejo_Interrupciones+0x8bc>)
 8001698:	4618      	mov	r0, r3
 800169a:	f000 ff95 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 800169e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a2:	2200      	movs	r2, #0
 80016a4:	2101      	movs	r1, #1
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 ffae 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, texto);
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	49a1      	ldr	r1, [pc, #644]	; (8001938 <Manejo_Interrupciones+0x8b8>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 ff88 	bl	80025c8 <Lcd_string>
 80016b8:	e05c      	b.n	8001774 <Manejo_Interrupciones+0x6f4>
		}
		else if(pin == 4 && HAL_GPIO_ReadPin(GPIOB, Fila4_EXTI_Pin)){	//Selecciona letra
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d159      	bne.n	8001774 <Manejo_Interrupciones+0x6f4>
 80016c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c4:	489a      	ldr	r0, [pc, #616]	; (8001930 <Manejo_Interrupciones+0x8b0>)
 80016c6:	f002 f88f 	bl	80037e8 <HAL_GPIO_ReadPin>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d051      	beq.n	8001774 <Manejo_Interrupciones+0x6f4>

			texto[i] = Texto(11);
 80016d0:	4b98      	ldr	r3, [pc, #608]	; (8001934 <Manejo_Interrupciones+0x8b4>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461c      	mov	r4, r3
 80016d6:	200b      	movs	r0, #11
 80016d8:	f000 fd1c 	bl	8002114 <Texto>
 80016dc:	4603      	mov	r3, r0
 80016de:	461a      	mov	r2, r3
 80016e0:	4b95      	ldr	r3, [pc, #596]	; (8001938 <Manejo_Interrupciones+0x8b8>)
 80016e2:	551a      	strb	r2, [r3, r4]
			Lcd_clear(&lcd);
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 ffa7 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,1);
 80016ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f2:	2201      	movs	r2, #1
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 ff86 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "     Letra");
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	498f      	ldr	r1, [pc, #572]	; (8001940 <Manejo_Interrupciones+0x8c0>)
 8001702:	4618      	mov	r0, r3
 8001704:	f000 ff60 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,1);
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	2201      	movs	r2, #1
 800170e:	2101      	movs	r1, #1
 8001710:	4618      	mov	r0, r3
 8001712:	f000 ff79 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "  seleccionada");
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	498a      	ldr	r1, [pc, #552]	; (8001944 <Manejo_Interrupciones+0x8c4>)
 800171c:	4618      	mov	r0, r3
 800171e:	f000 ff53 	bl	80025c8 <Lcd_string>
			HAL_Delay(500);
 8001722:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001726:	f001 fda9 	bl	800327c <HAL_Delay>

			Lcd_clear(&lcd);
 800172a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172e:	4618      	mov	r0, r3
 8001730:	f000 ff84 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,0);
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f000 ff63 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "Escriba el texto");
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	497d      	ldr	r1, [pc, #500]	; (800193c <Manejo_Interrupciones+0x8bc>)
 8001748:	4618      	mov	r0, r3
 800174a:	f000 ff3d 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 800174e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001752:	2200      	movs	r2, #0
 8001754:	2101      	movs	r1, #1
 8001756:	4618      	mov	r0, r3
 8001758:	f000 ff56 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, texto);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4975      	ldr	r1, [pc, #468]	; (8001938 <Manejo_Interrupciones+0x8b8>)
 8001762:	4618      	mov	r0, r3
 8001764:	f000 ff30 	bl	80025c8 <Lcd_string>
			i++;
 8001768:	4b72      	ldr	r3, [pc, #456]	; (8001934 <Manejo_Interrupciones+0x8b4>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	b2da      	uxtb	r2, r3
 8001770:	4b70      	ldr	r3, [pc, #448]	; (8001934 <Manejo_Interrupciones+0x8b4>)
 8001772:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(GPIOA, Columna1_Pin, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800177a:	4873      	ldr	r0, [pc, #460]	; (8001948 <Manejo_Interrupciones+0x8c8>)
 800177c:	f002 f84b 	bl	8003816 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Columna2_Pin, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001786:	4870      	ldr	r0, [pc, #448]	; (8001948 <Manejo_Interrupciones+0x8c8>)
 8001788:	f002 f845 	bl	8003816 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Columna3_Pin, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001792:	486d      	ldr	r0, [pc, #436]	; (8001948 <Manejo_Interrupciones+0x8c8>)
 8001794:	f002 f83f 	bl	8003816 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Columna4_Pin, 1);	//Habilito primera columna de teclado (A,B,C,D)
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800179e:	486a      	ldr	r0, [pc, #424]	; (8001948 <Manejo_Interrupciones+0x8c8>)
 80017a0:	f002 f839 	bl	8003816 <HAL_GPIO_WritePin>

		if(pin == 4 && HAL_GPIO_ReadPin(GPIOB, Fila4_EXTI_Pin)){	//Solo leo D ya que es para volver al menu, las otra teclas no sirven por ahora
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	f040 80bd 	bne.w	8001926 <Manejo_Interrupciones+0x8a6>
 80017ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b0:	485f      	ldr	r0, [pc, #380]	; (8001930 <Manejo_Interrupciones+0x8b0>)
 80017b2:	f002 f819 	bl	80037e8 <HAL_GPIO_ReadPin>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80b4 	beq.w	8001926 <Manejo_Interrupciones+0x8a6>
			estado_impresora = MENU;
 80017be:	4b63      	ldr	r3, [pc, #396]	; (800194c <Manejo_Interrupciones+0x8cc>)
 80017c0:	2203      	movs	r2, #3
 80017c2:	701a      	strb	r2, [r3, #0]
			    Lcd_string(&lcd, "finalizado");
			    HAL_Delay(2000);
			    estado_impresora = MENU;
		    }

}
 80017c4:	e0af      	b.n	8001926 <Manejo_Interrupciones+0x8a6>
		    else if(estado_impresora == IMPRIMIR){
 80017c6:	4b61      	ldr	r3, [pc, #388]	; (800194c <Manejo_Interrupciones+0x8cc>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d16a      	bne.n	80018a4 <Manejo_Interrupciones+0x824>
		    	for(int i = 0; i < sizeof(texto); i++){	//Corroboro si escribi algo
 80017ce:	2300      	movs	r3, #0
 80017d0:	657b      	str	r3, [r7, #84]	; 0x54
 80017d2:	e00e      	b.n	80017f2 <Manejo_Interrupciones+0x772>
		    		if (texto[i] == ' '){
 80017d4:	4a58      	ldr	r2, [pc, #352]	; (8001938 <Manejo_Interrupciones+0x8b8>)
 80017d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d8:	4413      	add	r3, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b20      	cmp	r3, #32
 80017de:	d105      	bne.n	80017ec <Manejo_Interrupciones+0x76c>
		    			cont_espacios++;
 80017e0:	4b5b      	ldr	r3, [pc, #364]	; (8001950 <Manejo_Interrupciones+0x8d0>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <Manejo_Interrupciones+0x8d0>)
 80017ea:	701a      	strb	r2, [r3, #0]
		    	for(int i = 0; i < sizeof(texto); i++){	//Corroboro si escribi algo
 80017ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ee:	3301      	adds	r3, #1
 80017f0:	657b      	str	r3, [r7, #84]	; 0x54
 80017f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f4:	2b0e      	cmp	r3, #14
 80017f6:	d9ed      	bls.n	80017d4 <Manejo_Interrupciones+0x754>
		    	if (cont_espacios == sizeof(texto)-1){
 80017f8:	4b55      	ldr	r3, [pc, #340]	; (8001950 <Manejo_Interrupciones+0x8d0>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b0e      	cmp	r3, #14
 80017fe:	d11c      	bne.n	800183a <Manejo_Interrupciones+0x7ba>
				    Lcd_clear(&lcd);
 8001800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001804:	4618      	mov	r0, r3
 8001806:	f000 ff19 	bl	800263c <Lcd_clear>
				    Lcd_cursor(&lcd, 0,1);
 800180a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180e:	2201      	movs	r2, #1
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fef8 	bl	8002608 <Lcd_cursor>
				    Lcd_string(&lcd, "Escriba algo");
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	494d      	ldr	r1, [pc, #308]	; (8001954 <Manejo_Interrupciones+0x8d4>)
 800181e:	4618      	mov	r0, r3
 8001820:	f000 fed2 	bl	80025c8 <Lcd_string>
				    HAL_Delay(1000);
 8001824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001828:	f001 fd28 	bl	800327c <HAL_Delay>
				    cont_espacios = 0;
 800182c:	4b48      	ldr	r3, [pc, #288]	; (8001950 <Manejo_Interrupciones+0x8d0>)
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
				    estado_impresora = MENU;
 8001832:	4b46      	ldr	r3, [pc, #280]	; (800194c <Manejo_Interrupciones+0x8cc>)
 8001834:	2203      	movs	r2, #3
 8001836:	701a      	strb	r2, [r3, #0]
}
 8001838:	e075      	b.n	8001926 <Manejo_Interrupciones+0x8a6>
				    Lcd_clear(&lcd);
 800183a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fefc 	bl	800263c <Lcd_clear>
				    Lcd_cursor(&lcd, 0,1);
 8001844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001848:	2201      	movs	r2, #1
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fedb 	bl	8002608 <Lcd_cursor>
				    Lcd_string(&lcd, "Imprimiendo...");
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4940      	ldr	r1, [pc, #256]	; (8001958 <Manejo_Interrupciones+0x8d8>)
 8001858:	4618      	mov	r0, r3
 800185a:	f000 feb5 	bl	80025c8 <Lcd_string>
		    		Armado_Matriz(texto, filas, columnas);
 800185e:	4b3f      	ldr	r3, [pc, #252]	; (800195c <Manejo_Interrupciones+0x8dc>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	4b3e      	ldr	r3, [pc, #248]	; (8001960 <Manejo_Interrupciones+0x8e0>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	4833      	ldr	r0, [pc, #204]	; (8001938 <Manejo_Interrupciones+0x8b8>)
 800186c:	f000 f882 	bl	8001974 <Armado_Matriz>
				    Lcd_clear(&lcd);
 8001870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001874:	4618      	mov	r0, r3
 8001876:	f000 fee1 	bl	800263c <Lcd_clear>
				    Lcd_cursor(&lcd, 0,1);
 800187a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187e:	2201      	movs	r2, #1
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fec0 	bl	8002608 <Lcd_cursor>
				    Lcd_string(&lcd, "Retire la hoja");
 8001888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188c:	4935      	ldr	r1, [pc, #212]	; (8001964 <Manejo_Interrupciones+0x8e4>)
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fe9a 	bl	80025c8 <Lcd_string>
				    HAL_Delay(5000);
 8001894:	f241 3088 	movw	r0, #5000	; 0x1388
 8001898:	f001 fcf0 	bl	800327c <HAL_Delay>
				    estado_impresora = MENU;
 800189c:	4b2b      	ldr	r3, [pc, #172]	; (800194c <Manejo_Interrupciones+0x8cc>)
 800189e:	2203      	movs	r2, #3
 80018a0:	701a      	strb	r2, [r3, #0]
}
 80018a2:	e040      	b.n	8001926 <Manejo_Interrupciones+0x8a6>
		    else if (estado_impresora == HOME){
 80018a4:	4b29      	ldr	r3, [pc, #164]	; (800194c <Manejo_Interrupciones+0x8cc>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d13c      	bne.n	8001926 <Manejo_Interrupciones+0x8a6>
		    	estado_impresora = HOME;
 80018ac:	4b27      	ldr	r3, [pc, #156]	; (800194c <Manejo_Interrupciones+0x8cc>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
			    Lcd_clear(&lcd);
 80018b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 fec0 	bl	800263c <Lcd_clear>
			    Lcd_cursor(&lcd, 0,1);
 80018bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c0:	2201      	movs	r2, #1
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 fe9f 	bl	8002608 <Lcd_cursor>
			    Lcd_string(&lcd, "Homing...");
 80018ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ce:	4926      	ldr	r1, [pc, #152]	; (8001968 <Manejo_Interrupciones+0x8e8>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 fe79 	bl	80025c8 <Lcd_string>
		    	Homing();
 80018d6:	f7ff faf1 	bl	8000ebc <Homing>
			    Lcd_clear(&lcd);
 80018da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 feac 	bl	800263c <Lcd_clear>
			    Lcd_cursor(&lcd, 0,1);
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	2201      	movs	r2, #1
 80018ea:	2100      	movs	r1, #0
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 fe8b 	bl	8002608 <Lcd_cursor>
			    Lcd_string(&lcd, "Home");
 80018f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f6:	491d      	ldr	r1, [pc, #116]	; (800196c <Manejo_Interrupciones+0x8ec>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fe65 	bl	80025c8 <Lcd_string>
			    Lcd_cursor(&lcd, 1,1);
 80018fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001902:	2201      	movs	r2, #1
 8001904:	2101      	movs	r1, #1
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fe7e 	bl	8002608 <Lcd_cursor>
			    Lcd_string(&lcd, "finalizado");
 800190c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001910:	4917      	ldr	r1, [pc, #92]	; (8001970 <Manejo_Interrupciones+0x8f0>)
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fe58 	bl	80025c8 <Lcd_string>
			    HAL_Delay(2000);
 8001918:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800191c:	f001 fcae 	bl	800327c <HAL_Delay>
			    estado_impresora = MENU;
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <Manejo_Interrupciones+0x8cc>)
 8001922:	2203      	movs	r2, #3
 8001924:	701a      	strb	r2, [r3, #0]
}
 8001926:	bf00      	nop
 8001928:	3758      	adds	r7, #88	; 0x58
 800192a:	46bd      	mov	sp, r7
 800192c:	bdb0      	pop	{r4, r5, r7, pc}
 800192e:	bf00      	nop
 8001930:	40010c00 	.word	0x40010c00
 8001934:	20000098 	.word	0x20000098
 8001938:	20000008 	.word	0x20000008
 800193c:	080058c4 	.word	0x080058c4
 8001940:	080058e8 	.word	0x080058e8
 8001944:	080058f4 	.word	0x080058f4
 8001948:	40010800 	.word	0x40010800
 800194c:	2000014c 	.word	0x2000014c
 8001950:	20000099 	.word	0x20000099
 8001954:	08005904 	.word	0x08005904
 8001958:	08005914 	.word	0x08005914
 800195c:	20000004 	.word	0x20000004
 8001960:	20000005 	.word	0x20000005
 8001964:	08005924 	.word	0x08005924
 8001968:	08005934 	.word	0x08005934
 800196c:	08005940 	.word	0x08005940
 8001970:	08005948 	.word	0x08005948

08001974 <Armado_Matriz>:
uint8_t contador_fila = 0;
uint8_t contador_columna = 0;
uint8_t contador_elementos = 0;


void Armado_Matriz(char texto[],int filasMatriz, int columnasMatriz) {	// Se arma matriz donde se ingresan 1 si se debe hacer punto y 0 donde no hace nada
 8001974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001978:	b095      	sub	sp, #84	; 0x54
 800197a:	af00      	add	r7, sp, #0
 800197c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800197e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001980:	627a      	str	r2, [r7, #36]	; 0x24
 8001982:	466b      	mov	r3, sp
 8001984:	623b      	str	r3, [r7, #32]

	// Creo la matriz de ceros
	uint8_t matriz[filasMatriz][columnasMatriz];
 8001986:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800198a:	1e4b      	subs	r3, r1, #1
 800198c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800198e:	460a      	mov	r2, r1
 8001990:	2300      	movs	r3, #0
 8001992:	4692      	mov	sl, r2
 8001994:	469b      	mov	fp, r3
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019aa:	460e      	mov	r6, r1
 80019ac:	1e43      	subs	r3, r0, #1
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80019b0:	460a      	mov	r2, r1
 80019b2:	2300      	movs	r3, #0
 80019b4:	613a      	str	r2, [r7, #16]
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	4602      	mov	r2, r0
 80019ba:	2300      	movs	r3, #0
 80019bc:	61ba      	str	r2, [r7, #24]
 80019be:	61fb      	str	r3, [r7, #28]
 80019c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019c4:	465b      	mov	r3, fp
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	fb02 f203 	mul.w	r2, r2, r3
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	46d4      	mov	ip, sl
 80019d0:	fb0c f303 	mul.w	r3, ip, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	4652      	mov	r2, sl
 80019d8:	f8d7 c018 	ldr.w	ip, [r7, #24]
 80019dc:	fba2 890c 	umull	r8, r9, r2, ip
 80019e0:	444b      	add	r3, r9
 80019e2:	4699      	mov	r9, r3
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019f8:	460a      	mov	r2, r1
 80019fa:	2300      	movs	r3, #0
 80019fc:	60ba      	str	r2, [r7, #8]
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	4602      	mov	r2, r0
 8001a02:	2300      	movs	r3, #0
 8001a04:	603a      	str	r2, [r7, #0]
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001a12:	4652      	mov	r2, sl
 8001a14:	fb02 f203 	mul.w	r2, r2, r3
 8001a18:	465b      	mov	r3, fp
 8001a1a:	46c4      	mov	ip, r8
 8001a1c:	fb0c f303 	mul.w	r3, ip, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	4642      	mov	r2, r8
 8001a24:	46d4      	mov	ip, sl
 8001a26:	fba2 450c 	umull	r4, r5, r2, ip
 8001a2a:	442b      	add	r3, r5
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	00eb      	lsls	r3, r5, #3
 8001a38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a3c:	00e2      	lsls	r2, r4, #3
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4602      	mov	r2, r0
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	3307      	adds	r3, #7
 8001a48:	08db      	lsrs	r3, r3, #3
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	ebad 0d03 	sub.w	sp, sp, r3
 8001a50:	466b      	mov	r3, sp
 8001a52:	3300      	adds	r3, #0
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34

	//Completo con 1 y 0 la matriz segun el texto escrito
    for (int i = 0; i < filasMatriz; i += filasSubmatriz) {
 8001a56:	2300      	movs	r3, #0
 8001a58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a5a:	e045      	b.n	8001ae8 <Armado_Matriz+0x174>
        for (int j = 0; j < columnasMatriz; j += columnasSubmatriz) {
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a60:	e039      	b.n	8001ad6 <Armado_Matriz+0x162>
        	m++;	//Cambio de submatriz (letra)
 8001a62:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <Armado_Matriz+0x19c>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	3301      	adds	r3, #1
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <Armado_Matriz+0x19c>)
 8001a6c:	701a      	strb	r2, [r3, #0]
            for (int k = 0; k < filasSubmatriz; k++) {
 8001a6e:	2300      	movs	r3, #0
 8001a70:	647b      	str	r3, [r7, #68]	; 0x44
 8001a72:	e026      	b.n	8001ac2 <Armado_Matriz+0x14e>
                for (int l = 0; l < columnasSubmatriz; l++) {
 8001a74:	2300      	movs	r3, #0
 8001a76:	643b      	str	r3, [r7, #64]	; 0x40
 8001a78:	e01b      	b.n	8001ab2 <Armado_Matriz+0x13e>
                    matriz[i + k][j + l] = Base_de_Datos(texto[m-1],k,l);
 8001a7a:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <Armado_Matriz+0x19c>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fb66 	bl	800015c <Base_de_Datos>
 8001a90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a94:	4413      	add	r3, r2
 8001a96:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001a98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a9a:	440a      	add	r2, r1
 8001a9c:	b2c0      	uxtb	r0, r0
 8001a9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001aa0:	fb06 f303 	mul.w	r3, r6, r3
 8001aa4:	440a      	add	r2, r1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	701a      	strb	r2, [r3, #0]
                for (int l = 0; l < columnasSubmatriz; l++) {
 8001aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aae:	3301      	adds	r3, #1
 8001ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	dbde      	blt.n	8001a7a <Armado_Matriz+0x106>
            for (int k = 0; k < filasSubmatriz; k++) {
 8001abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001abe:	3301      	adds	r3, #1
 8001ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	dbd3      	blt.n	8001a74 <Armado_Matriz+0x100>
        for (int j = 0; j < columnasMatriz; j += columnasSubmatriz) {
 8001acc:	2302      	movs	r3, #2
 8001ace:	461a      	mov	r2, r3
 8001ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ad2:	4413      	add	r3, r2
 8001ad4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dbc1      	blt.n	8001a62 <Armado_Matriz+0xee>
    for (int i = 0; i < filasMatriz; i += filasSubmatriz) {
 8001ade:	2303      	movs	r3, #3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae4:	4413      	add	r3, r2
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dbb5      	blt.n	8001a5c <Armado_Matriz+0xe8>
                }
            }
        }
    }
    m = 0; //reinicio la vaariable m
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <Armado_Matriz+0x19c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
    Movimiento_Matriz(filasMatriz,columnasMatriz,matriz);
 8001af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001af8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001afc:	f000 f80a 	bl	8001b14 <Movimiento_Matriz>
 8001b00:	f8d7 d020 	ldr.w	sp, [r7, #32]
}
 8001b04:	bf00      	nop
 8001b06:	3754      	adds	r7, #84	; 0x54
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000009a 	.word	0x2000009a

08001b14 <Movimiento_Matriz>:

void Movimiento_Matriz(int filasMatriz, int columnasMatriz,uint8_t matriz[filasMatriz][columnasMatriz]) {
 8001b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b16:	b0a3      	sub	sp, #140	; 0x8c
 8001b18:	af04      	add	r7, sp, #16
 8001b1a:	6278      	str	r0, [r7, #36]	; 0x24
 8001b1c:	6239      	str	r1, [r7, #32]
 8001b1e:	61fa      	str	r2, [r7, #28]
 8001b20:	6a3e      	ldr	r6, [r7, #32]
 8001b22:	1e73      	subs	r3, r6, #1
 8001b24:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b26:	4632      	mov	r2, r6
 8001b28:	2300      	movs	r3, #0
 8001b2a:	4614      	mov	r4, r2
 8001b2c:	461d      	mov	r5, r3
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	00eb      	lsls	r3, r5, #3
 8001b38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b3c:	00e2      	lsls	r2, r4, #3

	estado_impresora = HOME;	//Realizo Homing antes de comenzar la impresion
 8001b3e:	4b91      	ldr	r3, [pc, #580]	; (8001d84 <Movimiento_Matriz+0x270>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
	Homing();
 8001b44:	f7ff f9ba 	bl	8000ebc <Homing>
	Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };
 8001b48:	4b8f      	ldr	r3, [pc, #572]	; (8001d88 <Movimiento_Matriz+0x274>)
 8001b4a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};
 8001b54:	4a8d      	ldr	r2, [pc, #564]	; (8001d8c <Movimiento_Matriz+0x278>)
 8001b56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b5e:	e883 0003 	stmia.w	r3, {r0, r1}
		Lcd_HandleTypeDef lcd;
		lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);
 8001b62:	4638      	mov	r0, r7
 8001b64:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001b68:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9303      	str	r3, [sp, #12]
 8001b70:	2308      	movs	r3, #8
 8001b72:	9302      	str	r3, [sp, #8]
 8001b74:	4b86      	ldr	r3, [pc, #536]	; (8001d90 <Movimiento_Matriz+0x27c>)
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	2302      	movs	r3, #2
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4b84      	ldr	r3, [pc, #528]	; (8001d90 <Movimiento_Matriz+0x27c>)
 8001b7e:	f000 fcb7 	bl	80024f0 <Lcd_create>
 8001b82:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001b86:	463d      	mov	r5, r7
 8001b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b90:	e884 0003 	stmia.w	r4, {r0, r1}
	//Pequeño movimiento para separarse de los finales de carrera ('OFFSET')
	/*HAL_GPIO_WritePin(GPIOB, dir_motorX_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, dir_motorY_Pin, GPIO_PIN_RESET);
	Movimiento_Motores(CAMBIO_FILA);
	Movimiento_Motores(CAMBIO_COLUMNA);*/
	HAL_GPIO_WritePin(GPIOB, dir_motorX_Pin, GPIO_PIN_SET);
 8001b94:	2201      	movs	r2, #1
 8001b96:	2110      	movs	r1, #16
 8001b98:	487e      	ldr	r0, [pc, #504]	; (8001d94 <Movimiento_Matriz+0x280>)
 8001b9a:	f001 fe3c 	bl	8003816 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, dir_motorY_Pin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2108      	movs	r1, #8
 8001ba2:	487c      	ldr	r0, [pc, #496]	; (8001d94 <Movimiento_Matriz+0x280>)
 8001ba4:	f001 fe37 	bl	8003816 <HAL_GPIO_WritePin>
	estado_impresora = IMPRIMIR;
 8001ba8:	4b76      	ldr	r3, [pc, #472]	; (8001d84 <Movimiento_Matriz+0x270>)
 8001baa:	2202      	movs	r2, #2
 8001bac:	701a      	strb	r2, [r3, #0]

	//=======IMPRESION=======

		for (int i = 0; i < filasMatriz; i++) {
 8001bae:	2300      	movs	r3, #0
 8001bb0:	677b      	str	r3, [r7, #116]	; 0x74
 8001bb2:	e1c1      	b.n	8001f38 <Movimiento_Matriz+0x424>
			if (i > 0){
 8001bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	dd13      	ble.n	8001be2 <Movimiento_Matriz+0xce>
				if (contador_fila == 3){
 8001bba:	4b77      	ldr	r3, [pc, #476]	; (8001d98 <Movimiento_Matriz+0x284>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d106      	bne.n	8001bd0 <Movimiento_Matriz+0xbc>
					Movimiento_Motores(CAMBIO_RENGLON);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f000 f9e0 	bl	8001f88 <Movimiento_Motores>
					contador_fila = 0;
 8001bc8:	4b73      	ldr	r3, [pc, #460]	; (8001d98 <Movimiento_Matriz+0x284>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
 8001bce:	e008      	b.n	8001be2 <Movimiento_Matriz+0xce>
				}
				else{
					Movimiento_Motores(CAMBIO_FILA);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f000 f9d9 	bl	8001f88 <Movimiento_Motores>
					contador_fila++;
 8001bd6:	4b70      	ldr	r3, [pc, #448]	; (8001d98 <Movimiento_Matriz+0x284>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b6e      	ldr	r3, [pc, #440]	; (8001d98 <Movimiento_Matriz+0x284>)
 8001be0:	701a      	strb	r2, [r3, #0]
				}
			}

			if ((i == 0) || (i%2 == 0)){
 8001be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <Movimiento_Matriz+0xe0>
 8001be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f040 80c3 	bne.w	8001d7a <Movimiento_Matriz+0x266>
				for (int j = 0; j < columnasMatriz; j++){	//Movimiento de izquierda a derecha
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	673b      	str	r3, [r7, #112]	; 0x70
 8001bf8:	e0b9      	b.n	8001d6e <Movimiento_Matriz+0x25a>
					Lcd_clear(&lcd);
 8001bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 fd1c 	bl	800263c <Lcd_clear>
					Lcd_cursor(&lcd, 0,0);
 8001c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 fcfb 	bl	8002608 <Lcd_cursor>
					Lcd_string(&lcd, "ELEMENTO [I,J]");
 8001c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c16:	4961      	ldr	r1, [pc, #388]	; (8001d9c <Movimiento_Matriz+0x288>)
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 fcd5 	bl	80025c8 <Lcd_string>
					Lcd_cursor(&lcd, 1,0);
 8001c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c22:	2200      	movs	r2, #0
 8001c24:	2101      	movs	r1, #1
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fcee 	bl	8002608 <Lcd_cursor>
					Lcd_string(&lcd, "[");
 8001c2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c30:	495b      	ldr	r1, [pc, #364]	; (8001da0 <Movimiento_Matriz+0x28c>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fcc8 	bl	80025c8 <Lcd_string>
					Lcd_cursor(&lcd, 1,1);
 8001c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2101      	movs	r1, #1
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 fce1 	bl	8002608 <Lcd_cursor>
					Lcd_int(&lcd, i);
 8001c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fca3 	bl	8002598 <Lcd_int>
					Lcd_cursor(&lcd, 1,2);
 8001c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c56:	2202      	movs	r2, #2
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fcd4 	bl	8002608 <Lcd_cursor>
					Lcd_string(&lcd, ",");
 8001c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c64:	494f      	ldr	r1, [pc, #316]	; (8001da4 <Movimiento_Matriz+0x290>)
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 fcae 	bl	80025c8 <Lcd_string>
					Lcd_cursor(&lcd, 1,3);
 8001c6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c70:	2203      	movs	r2, #3
 8001c72:	2101      	movs	r1, #1
 8001c74:	4618      	mov	r0, r3
 8001c76:	f000 fcc7 	bl	8002608 <Lcd_cursor>
					Lcd_int(&lcd, j);
 8001c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c7e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 fc89 	bl	8002598 <Lcd_int>
					Lcd_cursor(&lcd, 1,4);
 8001c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 fcba 	bl	8002608 <Lcd_cursor>
					Lcd_string(&lcd, "]");
 8001c94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c98:	4943      	ldr	r1, [pc, #268]	; (8001da8 <Movimiento_Matriz+0x294>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fc94 	bl	80025c8 <Lcd_string>
					//===Movimiento===
					if ((j%2 == 0) && j!=0){
 8001ca0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <Movimiento_Matriz+0x1a4>
 8001caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <Movimiento_Matriz+0x1a4>
						Movimiento_Motores(CAMBIO_LETRA);
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f000 f969 	bl	8001f88 <Movimiento_Motores>
 8001cb6:	e00a      	b.n	8001cce <Movimiento_Matriz+0x1ba>
					}
					else if ((j%2 != 0) && j!=0){
 8001cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <Movimiento_Matriz+0x1ba>
 8001cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <Movimiento_Matriz+0x1ba>
						Movimiento_Motores(CAMBIO_COLUMNA);
 8001cc8:	2002      	movs	r0, #2
 8001cca:	f000 f95d 	bl	8001f88 <Movimiento_Motores>
					}
					//===Analizo Matriz===
					if (matriz[i][j] == 1){
 8001cce:	4632      	mov	r2, r6
 8001cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cd2:	fb02 f303 	mul.w	r3, r2, r3
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	441a      	add	r2, r3
 8001cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cdc:	4413      	add	r3, r2
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d141      	bne.n	8001d68 <Movimiento_Matriz+0x254>
						Movimiento_Servo();
 8001ce4:	f000 f9d0 	bl	8002088 <Movimiento_Servo>
						matriz[i][j] = 0;
 8001ce8:	4632      	mov	r2, r6
 8001cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	441a      	add	r2, r3
 8001cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
					    for (int fila = 0; fila < filasMatriz; fila++) {	//Corroboro si falta hacer mas punzados, de lo contrario finalizo impresion
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d00:	e01d      	b.n	8001d3e <Movimiento_Matriz+0x22a>
					        for (int columna = 0; columna < columnasMatriz; columna++) {
 8001d02:	2300      	movs	r3, #0
 8001d04:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d06:	e013      	b.n	8001d30 <Movimiento_Matriz+0x21c>
					            if (matriz[fila][columna] == 1) {
 8001d08:	4632      	mov	r2, r6
 8001d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0c:	fb02 f303 	mul.w	r3, r2, r3
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	441a      	add	r2, r3
 8001d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d105      	bne.n	8001d2a <Movimiento_Matriz+0x216>
					                contador_elementos++; // Se encontró al menos un elemento igual a 1
 8001d1e:	4b23      	ldr	r3, [pc, #140]	; (8001dac <Movimiento_Matriz+0x298>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b21      	ldr	r3, [pc, #132]	; (8001dac <Movimiento_Matriz+0x298>)
 8001d28:	701a      	strb	r2, [r3, #0]
					        for (int columna = 0; columna < columnasMatriz; columna++) {
 8001d2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dbe7      	blt.n	8001d08 <Movimiento_Matriz+0x1f4>
					    for (int fila = 0; fila < filasMatriz; fila++) {	//Corroboro si falta hacer mas punzados, de lo contrario finalizo impresion
 8001d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	429a      	cmp	r2, r3
 8001d44:	dbdd      	blt.n	8001d02 <Movimiento_Matriz+0x1ee>
					            }
					        }
					    }
					    if (contador_elementos == 0){
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <Movimiento_Matriz+0x298>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d109      	bne.n	8001d62 <Movimiento_Matriz+0x24e>
					    	i = filasMatriz - 1;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	3b01      	subs	r3, #1
 8001d52:	677b      	str	r3, [r7, #116]	; 0x74
					    	j = columnasMatriz - 1;
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	673b      	str	r3, [r7, #112]	; 0x70
					    	estado_impresora = HOME;
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <Movimiento_Matriz+0x270>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e002      	b.n	8001d68 <Movimiento_Matriz+0x254>
					    }
					    else{
					    	contador_elementos = 0;
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <Movimiento_Matriz+0x298>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < columnasMatriz; j++){	//Movimiento de izquierda a derecha
 8001d68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	673b      	str	r3, [r7, #112]	; 0x70
 8001d6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	f6ff af41 	blt.w	8001bfa <Movimiento_Matriz+0xe6>
 8001d78:	e0db      	b.n	8001f32 <Movimiento_Matriz+0x41e>
					}
				}

			}
			else{
				for (int k = (columnasMatriz-1); k >= 0; k--){
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	667b      	str	r3, [r7, #100]	; 0x64
 8001d80:	e0d3      	b.n	8001f2a <Movimiento_Matriz+0x416>
 8001d82:	bf00      	nop
 8001d84:	2000014c 	.word	0x2000014c
 8001d88:	08005988 	.word	0x08005988
 8001d8c:	08005998 	.word	0x08005998
 8001d90:	40010800 	.word	0x40010800
 8001d94:	40010c00 	.word	0x40010c00
 8001d98:	2000009b 	.word	0x2000009b
 8001d9c:	0800596c 	.word	0x0800596c
 8001da0:	0800597c 	.word	0x0800597c
 8001da4:	08005980 	.word	0x08005980
 8001da8:	08005984 	.word	0x08005984
 8001dac:	2000009d 	.word	0x2000009d
					Lcd_clear(&lcd);
 8001db0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fc41 	bl	800263c <Lcd_clear>
					Lcd_cursor(&lcd, 0,0);
 8001dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fc20 	bl	8002608 <Lcd_cursor>
					Lcd_string(&lcd, "ELEMENTO [I,J]");
 8001dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dcc:	4966      	ldr	r1, [pc, #408]	; (8001f68 <Movimiento_Matriz+0x454>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fbfa 	bl	80025c8 <Lcd_string>
					Lcd_cursor(&lcd, 1,0);
 8001dd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2101      	movs	r1, #1
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 fc13 	bl	8002608 <Lcd_cursor>
					Lcd_string(&lcd, "[");
 8001de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001de6:	4961      	ldr	r1, [pc, #388]	; (8001f6c <Movimiento_Matriz+0x458>)
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 fbed 	bl	80025c8 <Lcd_string>
					Lcd_cursor(&lcd, 1,1);
 8001dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df2:	2201      	movs	r2, #1
 8001df4:	2101      	movs	r1, #1
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fc06 	bl	8002608 <Lcd_cursor>
					Lcd_int(&lcd, i);
 8001dfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e00:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fbc8 	bl	8002598 <Lcd_int>
					Lcd_cursor(&lcd, 1,2);
 8001e08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	2101      	movs	r1, #1
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 fbf9 	bl	8002608 <Lcd_cursor>
					Lcd_string(&lcd, ",");
 8001e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e1a:	4955      	ldr	r1, [pc, #340]	; (8001f70 <Movimiento_Matriz+0x45c>)
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fbd3 	bl	80025c8 <Lcd_string>
					Lcd_cursor(&lcd, 1,3);
 8001e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e26:	2203      	movs	r2, #3
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fbec 	bl	8002608 <Lcd_cursor>
					Lcd_int(&lcd, k);
 8001e30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e34:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fbae 	bl	8002598 <Lcd_int>
					Lcd_cursor(&lcd, 1,4);
 8001e3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e40:	2204      	movs	r2, #4
 8001e42:	2101      	movs	r1, #1
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 fbdf 	bl	8002608 <Lcd_cursor>
					Lcd_string(&lcd, "]");
 8001e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e4e:	4949      	ldr	r1, [pc, #292]	; (8001f74 <Movimiento_Matriz+0x460>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fbb9 	bl	80025c8 <Lcd_string>
					if ( (k%2 == 0) && k != (columnasMatriz-1)){
 8001e56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d108      	bne.n	8001e72 <Movimiento_Matriz+0x35e>
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d003      	beq.n	8001e72 <Movimiento_Matriz+0x35e>
						Movimiento_Motores(CAMBIO_COLUMNA);
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	f000 f88c 	bl	8001f88 <Movimiento_Motores>
 8001e70:	e00c      	b.n	8001e8c <Movimiento_Matriz+0x378>
					}
					else if ((k%2 != 0) && k != (columnasMatriz-1)){
 8001e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <Movimiento_Matriz+0x378>
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d002      	beq.n	8001e8c <Movimiento_Matriz+0x378>
						Movimiento_Motores(CAMBIO_LETRA);
 8001e86:	2003      	movs	r0, #3
 8001e88:	f000 f87e 	bl	8001f88 <Movimiento_Motores>
					}
					if (matriz[i][k] == 1){
 8001e8c:	4632      	mov	r2, r6
 8001e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e90:	fb02 f303 	mul.w	r3, r2, r3
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	441a      	add	r2, r3
 8001e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e9a:	4413      	add	r3, r2
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d140      	bne.n	8001f24 <Movimiento_Matriz+0x410>
						Movimiento_Servo();
 8001ea2:	f000 f8f1 	bl	8002088 <Movimiento_Servo>
						matriz[i][k] = 0;
 8001ea6:	4632      	mov	r2, r6
 8001ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eaa:	fb02 f303 	mul.w	r3, r2, r3
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	441a      	add	r2, r3
 8001eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eb4:	4413      	add	r3, r2
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
					    for (int fila = 0; fila < filasMatriz; fila++) {
 8001eba:	2300      	movs	r3, #0
 8001ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8001ebe:	e01d      	b.n	8001efc <Movimiento_Matriz+0x3e8>
					        for (int columna = 0; columna < columnasMatriz; columna++) {
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ec4:	e013      	b.n	8001eee <Movimiento_Matriz+0x3da>
					            if (matriz[fila][columna] == 1) {
 8001ec6:	4632      	mov	r2, r6
 8001ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	441a      	add	r2, r3
 8001ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed4:	4413      	add	r3, r2
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <Movimiento_Matriz+0x3d4>
					                contador_elementos++; // Se encontró al menos un elemento igual a 1
 8001edc:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <Movimiento_Matriz+0x464>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <Movimiento_Matriz+0x464>)
 8001ee6:	701a      	strb	r2, [r3, #0]
					        for (int columna = 0; columna < columnasMatriz; columna++) {
 8001ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eea:	3301      	adds	r3, #1
 8001eec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dbe7      	blt.n	8001ec6 <Movimiento_Matriz+0x3b2>
					    for (int fila = 0; fila < filasMatriz; fila++) {
 8001ef6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ef8:	3301      	adds	r3, #1
 8001efa:	663b      	str	r3, [r7, #96]	; 0x60
 8001efc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	429a      	cmp	r2, r3
 8001f02:	dbdd      	blt.n	8001ec0 <Movimiento_Matriz+0x3ac>
					            }
					        }
					    }
					    if (contador_elementos == 0){
 8001f04:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <Movimiento_Matriz+0x464>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d108      	bne.n	8001f1e <Movimiento_Matriz+0x40a>
					    	i = filasMatriz - 1;
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	677b      	str	r3, [r7, #116]	; 0x74
					    	k = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	667b      	str	r3, [r7, #100]	; 0x64
					    	estado_impresora = HOME;
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <Movimiento_Matriz+0x468>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	e002      	b.n	8001f24 <Movimiento_Matriz+0x410>
					    }
					    else{
					    	contador_elementos = 0;
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <Movimiento_Matriz+0x464>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
				for (int k = (columnasMatriz-1); k >= 0; k--){
 8001f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f26:	3b01      	subs	r3, #1
 8001f28:	667b      	str	r3, [r7, #100]	; 0x64
 8001f2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f6bf af3f 	bge.w	8001db0 <Movimiento_Matriz+0x29c>
		for (int i = 0; i < filasMatriz; i++) {
 8001f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f34:	3301      	adds	r3, #1
 8001f36:	677b      	str	r3, [r7, #116]	; 0x74
 8001f38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	f6ff ae39 	blt.w	8001bb4 <Movimiento_Matriz+0xa0>
				}
			}

	}

	contador_fila = 0;
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <Movimiento_Matriz+0x46c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
	contador_columna = 0;
 8001f48:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <Movimiento_Matriz+0x470>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
	contador_elementos = 0;
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <Movimiento_Matriz+0x464>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
	Homing();	//Realizo Homing() despues de terminar la impresion para retirar mas comodo la hoja
 8001f54:	f7fe ffb2 	bl	8000ebc <Homing>
	estado_impresora = IMPRIMIR;
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <Movimiento_Matriz+0x468>)
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	701a      	strb	r2, [r3, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	377c      	adds	r7, #124	; 0x7c
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	0800596c 	.word	0x0800596c
 8001f6c:	0800597c 	.word	0x0800597c
 8001f70:	08005980 	.word	0x08005980
 8001f74:	08005984 	.word	0x08005984
 8001f78:	2000009d 	.word	0x2000009d
 8001f7c:	2000014c 	.word	0x2000014c
 8001f80:	2000009b 	.word	0x2000009b
 8001f84:	2000009c 	.word	0x2000009c

08001f88 <Movimiento_Motores>:
const uint8_t a = 2.5;
const uint8_t b = 2.5;
const uint8_t c = 6.5;
const uint8_t d = 10.5;

void Movimiento_Motores(int accion){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	switch(accion){
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d86e      	bhi.n	8002074 <Movimiento_Motores+0xec>
 8001f96:	a201      	add	r2, pc, #4	; (adr r2, 8001f9c <Movimiento_Motores+0x14>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08001fad 	.word	0x08001fad
 8001fa0:	08001fdb 	.word	0x08001fdb
 8001fa4:	08002011 	.word	0x08002011
 8001fa8:	0800203f 	.word	0x0800203f
		case CAMBIO_RENGLON:	//Cambio de renglon
				for (int i = 0; i < pxmmY*d; i++){
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	e00b      	b.n	8001fca <Movimiento_Motores+0x42>
					HAL_GPIO_TogglePin(GPIOA, motorY_Pin);
 8001fb2:	2120      	movs	r1, #32
 8001fb4:	4831      	ldr	r0, [pc, #196]	; (800207c <Movimiento_Motores+0xf4>)
 8001fb6:	f001 fc46 	bl	8003846 <HAL_GPIO_TogglePin>
					HAL_Delay(velocidad);
 8001fba:	4b31      	ldr	r3, [pc, #196]	; (8002080 <Movimiento_Motores+0xf8>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 f95c 	bl	800327c <HAL_Delay>
				for (int i = 0; i < pxmmY*d; i++){
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	2396      	movs	r3, #150	; 0x96
 8001fcc:	220a      	movs	r2, #10
 8001fce:	fb02 f303 	mul.w	r3, r2, r3
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	dbec      	blt.n	8001fb2 <Movimiento_Motores+0x2a>
				}
				break;	//break esta comentado porque generaba problemas
 8001fd8:	e04c      	b.n	8002074 <Movimiento_Motores+0xec>

		case CAMBIO_FILA:	//Cambio de fila

				for (int i = 0; i < pxmmY*b; i++){
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	e00b      	b.n	8001ff8 <Movimiento_Motores+0x70>
					HAL_GPIO_TogglePin(GPIOA, motorY_Pin);
 8001fe0:	2120      	movs	r1, #32
 8001fe2:	4826      	ldr	r0, [pc, #152]	; (800207c <Movimiento_Motores+0xf4>)
 8001fe4:	f001 fc2f 	bl	8003846 <HAL_GPIO_TogglePin>
					HAL_Delay(velocidad);
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <Movimiento_Motores+0xf8>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f001 f945 	bl	800327c <HAL_Delay>
				for (int i = 0; i < pxmmY*b; i++){
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	2396      	movs	r3, #150	; 0x96
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	fb02 f303 	mul.w	r3, r2, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	429a      	cmp	r2, r3
 8002004:	dbec      	blt.n	8001fe0 <Movimiento_Motores+0x58>
				}
				HAL_GPIO_TogglePin(GPIOB, dir_motorX_Pin); //Cambio de sentido el motor X
 8002006:	2110      	movs	r1, #16
 8002008:	481e      	ldr	r0, [pc, #120]	; (8002084 <Movimiento_Motores+0xfc>)
 800200a:	f001 fc1c 	bl	8003846 <HAL_GPIO_TogglePin>
				break;
 800200e:	e031      	b.n	8002074 <Movimiento_Motores+0xec>

		case CAMBIO_COLUMNA: //Cambio de columna
				for (int i = 0; i < pxmmX*a; i++){
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	e00b      	b.n	800202e <Movimiento_Motores+0xa6>
					HAL_GPIO_TogglePin(GPIOA, motorX_Pin);
 8002016:	2110      	movs	r1, #16
 8002018:	4818      	ldr	r0, [pc, #96]	; (800207c <Movimiento_Motores+0xf4>)
 800201a:	f001 fc14 	bl	8003846 <HAL_GPIO_TogglePin>
					HAL_Delay(velocidad);
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <Movimiento_Motores+0xf8>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f001 f92a 	bl	800327c <HAL_Delay>
				for (int i = 0; i < pxmmX*a; i++){
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3301      	adds	r3, #1
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	2396      	movs	r3, #150	; 0x96
 8002030:	2202      	movs	r2, #2
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	429a      	cmp	r2, r3
 800203a:	dbec      	blt.n	8002016 <Movimiento_Motores+0x8e>
				}
				break;
 800203c:	e01a      	b.n	8002074 <Movimiento_Motores+0xec>

		case CAMBIO_LETRA://Cambio de letra
				for (int i = 0; i < pxmmX*(c-a); i++){
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	e00b      	b.n	800205c <Movimiento_Motores+0xd4>
					HAL_GPIO_TogglePin(GPIOA, motorX_Pin);
 8002044:	2110      	movs	r1, #16
 8002046:	480d      	ldr	r0, [pc, #52]	; (800207c <Movimiento_Motores+0xf4>)
 8002048:	f001 fbfd 	bl	8003846 <HAL_GPIO_TogglePin>
					HAL_Delay(velocidad);
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <Movimiento_Motores+0xf8>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f001 f913 	bl	800327c <HAL_Delay>
				for (int i = 0; i < pxmmX*(c-a); i++){
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3301      	adds	r3, #1
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	2396      	movs	r3, #150	; 0x96
 800205e:	461a      	mov	r2, r3
 8002060:	2306      	movs	r3, #6
 8002062:	4619      	mov	r1, r3
 8002064:	2302      	movs	r3, #2
 8002066:	1acb      	subs	r3, r1, r3
 8002068:	fb02 f303 	mul.w	r3, r2, r3
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	429a      	cmp	r2, r3
 8002070:	dbe8      	blt.n	8002044 <Movimiento_Motores+0xbc>
				}
				break;
 8002072:	bf00      	nop
	}
}
 8002074:	bf00      	nop
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40010800 	.word	0x40010800
 8002080:	20000017 	.word	0x20000017
 8002084:	40010c00 	.word	0x40010c00

08002088 <Movimiento_Servo>:
uint16_t pos_inicial = 550;	//Valor inicial (0º)
uint16_t pos_actual;
uint16_t t_reposo = 10;


void Movimiento_Servo(){
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0

	pos_actual = pos_inicial;
 800208c:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <Movimiento_Servo+0x78>)
 800208e:	881a      	ldrh	r2, [r3, #0]
 8002090:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <Movimiento_Servo+0x7c>)
 8002092:	801a      	strh	r2, [r3, #0]

	while(pos_actual <= pos_final){
 8002094:	e00f      	b.n	80020b6 <Movimiento_Servo+0x2e>
		HAL_Delay(vel_servo);
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <Movimiento_Servo+0x80>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f001 f8ee 	bl	800327c <HAL_Delay>
		TIM2->CCR3 = pos_actual;
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <Movimiento_Servo+0x7c>)
 80020a2:	881a      	ldrh	r2, [r3, #0]
 80020a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020a8:	63da      	str	r2, [r3, #60]	; 0x3c
		pos_actual += 5;	//Incremento
 80020aa:	4b16      	ldr	r3, [pc, #88]	; (8002104 <Movimiento_Servo+0x7c>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	3305      	adds	r3, #5
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	4b14      	ldr	r3, [pc, #80]	; (8002104 <Movimiento_Servo+0x7c>)
 80020b4:	801a      	strh	r2, [r3, #0]
	while(pos_actual <= pos_final){
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <Movimiento_Servo+0x7c>)
 80020b8:	881a      	ldrh	r2, [r3, #0]
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <Movimiento_Servo+0x84>)
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d9e9      	bls.n	8002096 <Movimiento_Servo+0xe>
	}

	HAL_Delay(t_reposo);
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <Movimiento_Servo+0x88>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f001 f8d8 	bl	800327c <HAL_Delay>

	while (pos_actual >= pos_inicial){
 80020cc:	e00f      	b.n	80020ee <Movimiento_Servo+0x66>
		HAL_Delay(vel_servo);
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <Movimiento_Servo+0x80>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f001 f8d2 	bl	800327c <HAL_Delay>
		TIM2->CCR3 = pos_actual;
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <Movimiento_Servo+0x7c>)
 80020da:	881a      	ldrh	r2, [r3, #0]
 80020dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e0:	63da      	str	r2, [r3, #60]	; 0x3c
		pos_actual -= 5;	//Decremento
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <Movimiento_Servo+0x7c>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	3b05      	subs	r3, #5
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <Movimiento_Servo+0x7c>)
 80020ec:	801a      	strh	r2, [r3, #0]
	while (pos_actual >= pos_inicial){
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <Movimiento_Servo+0x7c>)
 80020f0:	881a      	ldrh	r2, [r3, #0]
 80020f2:	4b03      	ldr	r3, [pc, #12]	; (8002100 <Movimiento_Servo+0x78>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d2e9      	bcs.n	80020ce <Movimiento_Servo+0x46>
	}
}
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	2000001c 	.word	0x2000001c
 8002104:	2000009e 	.word	0x2000009e
 8002108:	2000001a 	.word	0x2000001a
 800210c:	20000018 	.word	0x20000018
 8002110:	2000001e 	.word	0x2000001e

08002114 <Texto>:


uint8_t cont[10] = {0};
char caracter;

char Texto(int numero) {
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	switch(numero){
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b0b      	cmp	r3, #11
 8002120:	f200 81dc 	bhi.w	80024dc <Texto+0x3c8>
 8002124:	a201      	add	r2, pc, #4	; (adr r2, 800212c <Texto+0x18>)
 8002126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212a:	bf00      	nop
 800212c:	0800215d 	.word	0x0800215d
 8002130:	080024dd 	.word	0x080024dd
 8002134:	08002173 	.word	0x08002173
 8002138:	080021cf 	.word	0x080021cf
 800213c:	0800222b 	.word	0x0800222b
 8002140:	08002287 	.word	0x08002287
 8002144:	080022e3 	.word	0x080022e3
 8002148:	0800233f 	.word	0x0800233f
 800214c:	080023c5 	.word	0x080023c5
 8002150:	0800241f 	.word	0x0800241f
 8002154:	080024dd 	.word	0x080024dd
 8002158:	08002499 	.word	0x08002499
		case(0):
				if (cont[0] == 0){	//el cero solo se usa para el espacio
 800215c:	4b90      	ldr	r3, [pc, #576]	; (80023a0 <Texto+0x28c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 81aa 	bne.w	80024ba <Texto+0x3a6>
					caracter = ' ';
 8002166:	4b8f      	ldr	r3, [pc, #572]	; (80023a4 <Texto+0x290>)
 8002168:	2220      	movs	r2, #32
 800216a:	701a      	strb	r2, [r3, #0]
					return caracter;
 800216c:	4b8d      	ldr	r3, [pc, #564]	; (80023a4 <Texto+0x290>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	e1b5      	b.n	80024de <Texto+0x3ca>
				break;

		case(1):
				break;	//No realiza ninguna accion, pero se dejo para posibles mejoras (agregado de caracteres por ejemplo)
		case(2):
				if (cont[2] == 0){
 8002172:	4b8b      	ldr	r3, [pc, #556]	; (80023a0 <Texto+0x28c>)
 8002174:	789b      	ldrb	r3, [r3, #2]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10b      	bne.n	8002192 <Texto+0x7e>
					caracter = 'a';
 800217a:	4b8a      	ldr	r3, [pc, #552]	; (80023a4 <Texto+0x290>)
 800217c:	2261      	movs	r2, #97	; 0x61
 800217e:	701a      	strb	r2, [r3, #0]
					cont[2]++;
 8002180:	4b87      	ldr	r3, [pc, #540]	; (80023a0 <Texto+0x28c>)
 8002182:	789b      	ldrb	r3, [r3, #2]
 8002184:	3301      	adds	r3, #1
 8002186:	b2da      	uxtb	r2, r3
 8002188:	4b85      	ldr	r3, [pc, #532]	; (80023a0 <Texto+0x28c>)
 800218a:	709a      	strb	r2, [r3, #2]
					return caracter;
 800218c:	4b85      	ldr	r3, [pc, #532]	; (80023a4 <Texto+0x290>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	e1a5      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[2] == 1){
 8002192:	4b83      	ldr	r3, [pc, #524]	; (80023a0 <Texto+0x28c>)
 8002194:	789b      	ldrb	r3, [r3, #2]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d10b      	bne.n	80021b2 <Texto+0x9e>
					caracter = 'b';
 800219a:	4b82      	ldr	r3, [pc, #520]	; (80023a4 <Texto+0x290>)
 800219c:	2262      	movs	r2, #98	; 0x62
 800219e:	701a      	strb	r2, [r3, #0]
					cont[2]++;
 80021a0:	4b7f      	ldr	r3, [pc, #508]	; (80023a0 <Texto+0x28c>)
 80021a2:	789b      	ldrb	r3, [r3, #2]
 80021a4:	3301      	adds	r3, #1
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	4b7d      	ldr	r3, [pc, #500]	; (80023a0 <Texto+0x28c>)
 80021aa:	709a      	strb	r2, [r3, #2]
					return caracter;
 80021ac:	4b7d      	ldr	r3, [pc, #500]	; (80023a4 <Texto+0x290>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	e195      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[2] == 2){
 80021b2:	4b7b      	ldr	r3, [pc, #492]	; (80023a0 <Texto+0x28c>)
 80021b4:	789b      	ldrb	r3, [r3, #2]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	f040 8181 	bne.w	80024be <Texto+0x3aa>
					caracter = 'c';
 80021bc:	4b79      	ldr	r3, [pc, #484]	; (80023a4 <Texto+0x290>)
 80021be:	2263      	movs	r2, #99	; 0x63
 80021c0:	701a      	strb	r2, [r3, #0]
					cont[2] = 0;
 80021c2:	4b77      	ldr	r3, [pc, #476]	; (80023a0 <Texto+0x28c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	709a      	strb	r2, [r3, #2]
					return caracter;
 80021c8:	4b76      	ldr	r3, [pc, #472]	; (80023a4 <Texto+0x290>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	e187      	b.n	80024de <Texto+0x3ca>
				}
				break;
		case(3):
				if (cont[3] == 0){
 80021ce:	4b74      	ldr	r3, [pc, #464]	; (80023a0 <Texto+0x28c>)
 80021d0:	78db      	ldrb	r3, [r3, #3]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10b      	bne.n	80021ee <Texto+0xda>
					caracter = 'd';
 80021d6:	4b73      	ldr	r3, [pc, #460]	; (80023a4 <Texto+0x290>)
 80021d8:	2264      	movs	r2, #100	; 0x64
 80021da:	701a      	strb	r2, [r3, #0]
					cont[3]++;
 80021dc:	4b70      	ldr	r3, [pc, #448]	; (80023a0 <Texto+0x28c>)
 80021de:	78db      	ldrb	r3, [r3, #3]
 80021e0:	3301      	adds	r3, #1
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b6e      	ldr	r3, [pc, #440]	; (80023a0 <Texto+0x28c>)
 80021e6:	70da      	strb	r2, [r3, #3]
					return caracter;
 80021e8:	4b6e      	ldr	r3, [pc, #440]	; (80023a4 <Texto+0x290>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	e177      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[3] == 1){
 80021ee:	4b6c      	ldr	r3, [pc, #432]	; (80023a0 <Texto+0x28c>)
 80021f0:	78db      	ldrb	r3, [r3, #3]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d10b      	bne.n	800220e <Texto+0xfa>
					caracter = 'e';
 80021f6:	4b6b      	ldr	r3, [pc, #428]	; (80023a4 <Texto+0x290>)
 80021f8:	2265      	movs	r2, #101	; 0x65
 80021fa:	701a      	strb	r2, [r3, #0]
					cont[3]++;
 80021fc:	4b68      	ldr	r3, [pc, #416]	; (80023a0 <Texto+0x28c>)
 80021fe:	78db      	ldrb	r3, [r3, #3]
 8002200:	3301      	adds	r3, #1
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b66      	ldr	r3, [pc, #408]	; (80023a0 <Texto+0x28c>)
 8002206:	70da      	strb	r2, [r3, #3]
					return caracter;
 8002208:	4b66      	ldr	r3, [pc, #408]	; (80023a4 <Texto+0x290>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	e167      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[3] == 2){
 800220e:	4b64      	ldr	r3, [pc, #400]	; (80023a0 <Texto+0x28c>)
 8002210:	78db      	ldrb	r3, [r3, #3]
 8002212:	2b02      	cmp	r3, #2
 8002214:	f040 8155 	bne.w	80024c2 <Texto+0x3ae>
					caracter = 'f';
 8002218:	4b62      	ldr	r3, [pc, #392]	; (80023a4 <Texto+0x290>)
 800221a:	2266      	movs	r2, #102	; 0x66
 800221c:	701a      	strb	r2, [r3, #0]
					cont[3] = 0;
 800221e:	4b60      	ldr	r3, [pc, #384]	; (80023a0 <Texto+0x28c>)
 8002220:	2200      	movs	r2, #0
 8002222:	70da      	strb	r2, [r3, #3]
					return caracter;
 8002224:	4b5f      	ldr	r3, [pc, #380]	; (80023a4 <Texto+0x290>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	e159      	b.n	80024de <Texto+0x3ca>
				}
				break;
		case(4):
				if (cont[4] == 0){
 800222a:	4b5d      	ldr	r3, [pc, #372]	; (80023a0 <Texto+0x28c>)
 800222c:	791b      	ldrb	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10b      	bne.n	800224a <Texto+0x136>
					caracter = 'g';
 8002232:	4b5c      	ldr	r3, [pc, #368]	; (80023a4 <Texto+0x290>)
 8002234:	2267      	movs	r2, #103	; 0x67
 8002236:	701a      	strb	r2, [r3, #0]
					cont[4]++;
 8002238:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <Texto+0x28c>)
 800223a:	791b      	ldrb	r3, [r3, #4]
 800223c:	3301      	adds	r3, #1
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b57      	ldr	r3, [pc, #348]	; (80023a0 <Texto+0x28c>)
 8002242:	711a      	strb	r2, [r3, #4]
					return caracter;
 8002244:	4b57      	ldr	r3, [pc, #348]	; (80023a4 <Texto+0x290>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	e149      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[4] == 1){
 800224a:	4b55      	ldr	r3, [pc, #340]	; (80023a0 <Texto+0x28c>)
 800224c:	791b      	ldrb	r3, [r3, #4]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d10b      	bne.n	800226a <Texto+0x156>
					caracter = 'h';
 8002252:	4b54      	ldr	r3, [pc, #336]	; (80023a4 <Texto+0x290>)
 8002254:	2268      	movs	r2, #104	; 0x68
 8002256:	701a      	strb	r2, [r3, #0]
					cont[4]++;
 8002258:	4b51      	ldr	r3, [pc, #324]	; (80023a0 <Texto+0x28c>)
 800225a:	791b      	ldrb	r3, [r3, #4]
 800225c:	3301      	adds	r3, #1
 800225e:	b2da      	uxtb	r2, r3
 8002260:	4b4f      	ldr	r3, [pc, #316]	; (80023a0 <Texto+0x28c>)
 8002262:	711a      	strb	r2, [r3, #4]
					return caracter;
 8002264:	4b4f      	ldr	r3, [pc, #316]	; (80023a4 <Texto+0x290>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	e139      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[4] == 2){
 800226a:	4b4d      	ldr	r3, [pc, #308]	; (80023a0 <Texto+0x28c>)
 800226c:	791b      	ldrb	r3, [r3, #4]
 800226e:	2b02      	cmp	r3, #2
 8002270:	f040 8129 	bne.w	80024c6 <Texto+0x3b2>
					caracter = 'i';
 8002274:	4b4b      	ldr	r3, [pc, #300]	; (80023a4 <Texto+0x290>)
 8002276:	2269      	movs	r2, #105	; 0x69
 8002278:	701a      	strb	r2, [r3, #0]
					cont[4] = 0;
 800227a:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <Texto+0x28c>)
 800227c:	2200      	movs	r2, #0
 800227e:	711a      	strb	r2, [r3, #4]
					return caracter;
 8002280:	4b48      	ldr	r3, [pc, #288]	; (80023a4 <Texto+0x290>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	e12b      	b.n	80024de <Texto+0x3ca>

				}
				break;
		case(5):
				if (cont[5] == 0){
 8002286:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <Texto+0x28c>)
 8002288:	795b      	ldrb	r3, [r3, #5]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10b      	bne.n	80022a6 <Texto+0x192>
					caracter = 'j';
 800228e:	4b45      	ldr	r3, [pc, #276]	; (80023a4 <Texto+0x290>)
 8002290:	226a      	movs	r2, #106	; 0x6a
 8002292:	701a      	strb	r2, [r3, #0]
					cont[5]++;
 8002294:	4b42      	ldr	r3, [pc, #264]	; (80023a0 <Texto+0x28c>)
 8002296:	795b      	ldrb	r3, [r3, #5]
 8002298:	3301      	adds	r3, #1
 800229a:	b2da      	uxtb	r2, r3
 800229c:	4b40      	ldr	r3, [pc, #256]	; (80023a0 <Texto+0x28c>)
 800229e:	715a      	strb	r2, [r3, #5]
					return caracter;
 80022a0:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <Texto+0x290>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	e11b      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[5] == 1){
 80022a6:	4b3e      	ldr	r3, [pc, #248]	; (80023a0 <Texto+0x28c>)
 80022a8:	795b      	ldrb	r3, [r3, #5]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10b      	bne.n	80022c6 <Texto+0x1b2>
					caracter = 'k';
 80022ae:	4b3d      	ldr	r3, [pc, #244]	; (80023a4 <Texto+0x290>)
 80022b0:	226b      	movs	r2, #107	; 0x6b
 80022b2:	701a      	strb	r2, [r3, #0]
					cont[5]++;
 80022b4:	4b3a      	ldr	r3, [pc, #232]	; (80023a0 <Texto+0x28c>)
 80022b6:	795b      	ldrb	r3, [r3, #5]
 80022b8:	3301      	adds	r3, #1
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <Texto+0x28c>)
 80022be:	715a      	strb	r2, [r3, #5]
					return caracter;
 80022c0:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <Texto+0x290>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	e10b      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[5] == 2){
 80022c6:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <Texto+0x28c>)
 80022c8:	795b      	ldrb	r3, [r3, #5]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	f040 80fd 	bne.w	80024ca <Texto+0x3b6>
					caracter = 'l';
 80022d0:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <Texto+0x290>)
 80022d2:	226c      	movs	r2, #108	; 0x6c
 80022d4:	701a      	strb	r2, [r3, #0]
					cont[5] = 0;
 80022d6:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <Texto+0x28c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	715a      	strb	r2, [r3, #5]
					return caracter;
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <Texto+0x290>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	e0fd      	b.n	80024de <Texto+0x3ca>
				}
				break;
		case(6):
				if (cont[6] == 0){
 80022e2:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <Texto+0x28c>)
 80022e4:	799b      	ldrb	r3, [r3, #6]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10b      	bne.n	8002302 <Texto+0x1ee>
					caracter = 'm';
 80022ea:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <Texto+0x290>)
 80022ec:	226d      	movs	r2, #109	; 0x6d
 80022ee:	701a      	strb	r2, [r3, #0]
					cont[6]++;
 80022f0:	4b2b      	ldr	r3, [pc, #172]	; (80023a0 <Texto+0x28c>)
 80022f2:	799b      	ldrb	r3, [r3, #6]
 80022f4:	3301      	adds	r3, #1
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <Texto+0x28c>)
 80022fa:	719a      	strb	r2, [r3, #6]
					return caracter;
 80022fc:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <Texto+0x290>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	e0ed      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[6] == 1){
 8002302:	4b27      	ldr	r3, [pc, #156]	; (80023a0 <Texto+0x28c>)
 8002304:	799b      	ldrb	r3, [r3, #6]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d10b      	bne.n	8002322 <Texto+0x20e>
					caracter = 'n';
 800230a:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <Texto+0x290>)
 800230c:	226e      	movs	r2, #110	; 0x6e
 800230e:	701a      	strb	r2, [r3, #0]
					cont[6]++;
 8002310:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <Texto+0x28c>)
 8002312:	799b      	ldrb	r3, [r3, #6]
 8002314:	3301      	adds	r3, #1
 8002316:	b2da      	uxtb	r2, r3
 8002318:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <Texto+0x28c>)
 800231a:	719a      	strb	r2, [r3, #6]
					return caracter;
 800231c:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <Texto+0x290>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	e0dd      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[6] == 2){
 8002322:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <Texto+0x28c>)
 8002324:	799b      	ldrb	r3, [r3, #6]
 8002326:	2b02      	cmp	r3, #2
 8002328:	f040 80d1 	bne.w	80024ce <Texto+0x3ba>
					caracter = 'o';
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <Texto+0x290>)
 800232e:	226f      	movs	r2, #111	; 0x6f
 8002330:	701a      	strb	r2, [r3, #0]
					cont[6] = 0;
 8002332:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <Texto+0x28c>)
 8002334:	2200      	movs	r2, #0
 8002336:	719a      	strb	r2, [r3, #6]
					return caracter;
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <Texto+0x290>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	e0cf      	b.n	80024de <Texto+0x3ca>
				}
				break;
		case(7):
				if (cont[7] == 0){
 800233e:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <Texto+0x28c>)
 8002340:	79db      	ldrb	r3, [r3, #7]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10b      	bne.n	800235e <Texto+0x24a>
					caracter = 'p';
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <Texto+0x290>)
 8002348:	2270      	movs	r2, #112	; 0x70
 800234a:	701a      	strb	r2, [r3, #0]
					cont[7]++;
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <Texto+0x28c>)
 800234e:	79db      	ldrb	r3, [r3, #7]
 8002350:	3301      	adds	r3, #1
 8002352:	b2da      	uxtb	r2, r3
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <Texto+0x28c>)
 8002356:	71da      	strb	r2, [r3, #7]
					return caracter;
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <Texto+0x290>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	e0bf      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[7] == 1){
 800235e:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <Texto+0x28c>)
 8002360:	79db      	ldrb	r3, [r3, #7]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d10b      	bne.n	800237e <Texto+0x26a>
					caracter = 'q';
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <Texto+0x290>)
 8002368:	2271      	movs	r2, #113	; 0x71
 800236a:	701a      	strb	r2, [r3, #0]
					cont[7]++;
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <Texto+0x28c>)
 800236e:	79db      	ldrb	r3, [r3, #7]
 8002370:	3301      	adds	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <Texto+0x28c>)
 8002376:	71da      	strb	r2, [r3, #7]
					return caracter;
 8002378:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <Texto+0x290>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	e0af      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[7] == 2){
 800237e:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <Texto+0x28c>)
 8002380:	79db      	ldrb	r3, [r3, #7]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d110      	bne.n	80023a8 <Texto+0x294>
					caracter = 'r';
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <Texto+0x290>)
 8002388:	2272      	movs	r2, #114	; 0x72
 800238a:	701a      	strb	r2, [r3, #0]
					cont[7]++;
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <Texto+0x28c>)
 800238e:	79db      	ldrb	r3, [r3, #7]
 8002390:	3301      	adds	r3, #1
 8002392:	b2da      	uxtb	r2, r3
 8002394:	4b02      	ldr	r3, [pc, #8]	; (80023a0 <Texto+0x28c>)
 8002396:	71da      	strb	r2, [r3, #7]
					return caracter;
 8002398:	4b02      	ldr	r3, [pc, #8]	; (80023a4 <Texto+0x290>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	e09f      	b.n	80024de <Texto+0x3ca>
 800239e:	bf00      	nop
 80023a0:	200000a0 	.word	0x200000a0
 80023a4:	200000aa 	.word	0x200000aa
				}
				else if(cont[7] == 3){
 80023a8:	4b4f      	ldr	r3, [pc, #316]	; (80024e8 <Texto+0x3d4>)
 80023aa:	79db      	ldrb	r3, [r3, #7]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	f040 8090 	bne.w	80024d2 <Texto+0x3be>
					caracter = 's';
 80023b2:	4b4e      	ldr	r3, [pc, #312]	; (80024ec <Texto+0x3d8>)
 80023b4:	2273      	movs	r2, #115	; 0x73
 80023b6:	701a      	strb	r2, [r3, #0]
					cont[7] = 0;
 80023b8:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <Texto+0x3d4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	71da      	strb	r2, [r3, #7]
					return caracter;
 80023be:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <Texto+0x3d8>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	e08c      	b.n	80024de <Texto+0x3ca>
				}

				break;
		case(8):
				if (cont[8] == 0){
 80023c4:	4b48      	ldr	r3, [pc, #288]	; (80024e8 <Texto+0x3d4>)
 80023c6:	7a1b      	ldrb	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <Texto+0x2d0>
					caracter = 't';
 80023cc:	4b47      	ldr	r3, [pc, #284]	; (80024ec <Texto+0x3d8>)
 80023ce:	2274      	movs	r2, #116	; 0x74
 80023d0:	701a      	strb	r2, [r3, #0]
					cont[8]++;
 80023d2:	4b45      	ldr	r3, [pc, #276]	; (80024e8 <Texto+0x3d4>)
 80023d4:	7a1b      	ldrb	r3, [r3, #8]
 80023d6:	3301      	adds	r3, #1
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <Texto+0x3d4>)
 80023dc:	721a      	strb	r2, [r3, #8]
					return caracter;
 80023de:	4b43      	ldr	r3, [pc, #268]	; (80024ec <Texto+0x3d8>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	e07c      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[8] == 1){
 80023e4:	4b40      	ldr	r3, [pc, #256]	; (80024e8 <Texto+0x3d4>)
 80023e6:	7a1b      	ldrb	r3, [r3, #8]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d10b      	bne.n	8002404 <Texto+0x2f0>
					caracter = 'u';
 80023ec:	4b3f      	ldr	r3, [pc, #252]	; (80024ec <Texto+0x3d8>)
 80023ee:	2275      	movs	r2, #117	; 0x75
 80023f0:	701a      	strb	r2, [r3, #0]
					cont[8]++;
 80023f2:	4b3d      	ldr	r3, [pc, #244]	; (80024e8 <Texto+0x3d4>)
 80023f4:	7a1b      	ldrb	r3, [r3, #8]
 80023f6:	3301      	adds	r3, #1
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4b3b      	ldr	r3, [pc, #236]	; (80024e8 <Texto+0x3d4>)
 80023fc:	721a      	strb	r2, [r3, #8]
					return caracter;
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <Texto+0x3d8>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	e06c      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[8] == 2){
 8002404:	4b38      	ldr	r3, [pc, #224]	; (80024e8 <Texto+0x3d4>)
 8002406:	7a1b      	ldrb	r3, [r3, #8]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d164      	bne.n	80024d6 <Texto+0x3c2>
					caracter = 'v';
 800240c:	4b37      	ldr	r3, [pc, #220]	; (80024ec <Texto+0x3d8>)
 800240e:	2276      	movs	r2, #118	; 0x76
 8002410:	701a      	strb	r2, [r3, #0]
					cont[8] = 0;
 8002412:	4b35      	ldr	r3, [pc, #212]	; (80024e8 <Texto+0x3d4>)
 8002414:	2200      	movs	r2, #0
 8002416:	721a      	strb	r2, [r3, #8]
					return caracter;
 8002418:	4b34      	ldr	r3, [pc, #208]	; (80024ec <Texto+0x3d8>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	e05f      	b.n	80024de <Texto+0x3ca>
				}
				break;
		case(9):
				if (cont[9] == 0){
 800241e:	4b32      	ldr	r3, [pc, #200]	; (80024e8 <Texto+0x3d4>)
 8002420:	7a5b      	ldrb	r3, [r3, #9]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10b      	bne.n	800243e <Texto+0x32a>
					caracter = 'w';
 8002426:	4b31      	ldr	r3, [pc, #196]	; (80024ec <Texto+0x3d8>)
 8002428:	2277      	movs	r2, #119	; 0x77
 800242a:	701a      	strb	r2, [r3, #0]
					cont[9]++;
 800242c:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <Texto+0x3d4>)
 800242e:	7a5b      	ldrb	r3, [r3, #9]
 8002430:	3301      	adds	r3, #1
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <Texto+0x3d4>)
 8002436:	725a      	strb	r2, [r3, #9]
					return caracter;
 8002438:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <Texto+0x3d8>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	e04f      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[9] == 1){
 800243e:	4b2a      	ldr	r3, [pc, #168]	; (80024e8 <Texto+0x3d4>)
 8002440:	7a5b      	ldrb	r3, [r3, #9]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d10b      	bne.n	800245e <Texto+0x34a>
					caracter = 'x';
 8002446:	4b29      	ldr	r3, [pc, #164]	; (80024ec <Texto+0x3d8>)
 8002448:	2278      	movs	r2, #120	; 0x78
 800244a:	701a      	strb	r2, [r3, #0]
					cont[9]++;
 800244c:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <Texto+0x3d4>)
 800244e:	7a5b      	ldrb	r3, [r3, #9]
 8002450:	3301      	adds	r3, #1
 8002452:	b2da      	uxtb	r2, r3
 8002454:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <Texto+0x3d4>)
 8002456:	725a      	strb	r2, [r3, #9]
					return caracter;
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <Texto+0x3d8>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	e03f      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[9] == 2){
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <Texto+0x3d4>)
 8002460:	7a5b      	ldrb	r3, [r3, #9]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d10b      	bne.n	800247e <Texto+0x36a>
					caracter = 'y';
 8002466:	4b21      	ldr	r3, [pc, #132]	; (80024ec <Texto+0x3d8>)
 8002468:	2279      	movs	r2, #121	; 0x79
 800246a:	701a      	strb	r2, [r3, #0]
					cont[9]++;
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <Texto+0x3d4>)
 800246e:	7a5b      	ldrb	r3, [r3, #9]
 8002470:	3301      	adds	r3, #1
 8002472:	b2da      	uxtb	r2, r3
 8002474:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <Texto+0x3d4>)
 8002476:	725a      	strb	r2, [r3, #9]
					return caracter;
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <Texto+0x3d8>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	e02f      	b.n	80024de <Texto+0x3ca>
				}
				else if(cont[9] == 3){
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <Texto+0x3d4>)
 8002480:	7a5b      	ldrb	r3, [r3, #9]
 8002482:	2b03      	cmp	r3, #3
 8002484:	d129      	bne.n	80024da <Texto+0x3c6>
					caracter = 'z';
 8002486:	4b19      	ldr	r3, [pc, #100]	; (80024ec <Texto+0x3d8>)
 8002488:	227a      	movs	r2, #122	; 0x7a
 800248a:	701a      	strb	r2, [r3, #0]
					cont[9] = 0;
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <Texto+0x3d4>)
 800248e:	2200      	movs	r2, #0
 8002490:	725a      	strb	r2, [r3, #9]
					return caracter;
 8002492:	4b16      	ldr	r3, [pc, #88]	; (80024ec <Texto+0x3d8>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	e022      	b.n	80024de <Texto+0x3ca>
				}
				break;
		case(11):
				for (int k = 0; k <= 9;k++){	//Reinicio de contadores
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e007      	b.n	80024ae <Texto+0x39a>
					cont[k] = 0;
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <Texto+0x3d4>)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
				for (int k = 0; k <= 9;k++){	//Reinicio de contadores
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3301      	adds	r3, #1
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b09      	cmp	r3, #9
 80024b2:	ddf4      	ble.n	800249e <Texto+0x38a>
				}
				return caracter;	//Devuelve caracter actual
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <Texto+0x3d8>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	e011      	b.n	80024de <Texto+0x3ca>
				break;
 80024ba:	bf00      	nop
 80024bc:	e00e      	b.n	80024dc <Texto+0x3c8>
				break;
 80024be:	bf00      	nop
 80024c0:	e00c      	b.n	80024dc <Texto+0x3c8>
				break;
 80024c2:	bf00      	nop
 80024c4:	e00a      	b.n	80024dc <Texto+0x3c8>
				break;
 80024c6:	bf00      	nop
 80024c8:	e008      	b.n	80024dc <Texto+0x3c8>
				break;
 80024ca:	bf00      	nop
 80024cc:	e006      	b.n	80024dc <Texto+0x3c8>
				break;
 80024ce:	bf00      	nop
 80024d0:	e004      	b.n	80024dc <Texto+0x3c8>
				break;
 80024d2:	bf00      	nop
 80024d4:	e002      	b.n	80024dc <Texto+0x3c8>
				break;
 80024d6:	bf00      	nop
 80024d8:	e000      	b.n	80024dc <Texto+0x3c8>
				break;
 80024da:	bf00      	nop
	}
	return ' ';
 80024dc:	2320      	movs	r3, #32
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	200000a0 	.word	0x200000a0
 80024ec:	200000aa 	.word	0x200000aa

080024f0 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80024fe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002502:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8002506:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800250a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800250c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800250e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8002510:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002512:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8002520:	f107 0310 	add.w	r3, r7, #16
 8002524:	4618      	mov	r0, r3
 8002526:	f000 f80e 	bl	8002546 <Lcd_init>

	return lcd;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	461d      	mov	r5, r3
 800252e:	f107 0410 	add.w	r4, r7, #16
 8002532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002536:	e894 0003 	ldmia.w	r4, {r0, r1}
 800253a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	3728      	adds	r7, #40	; 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bdb0      	pop	{r4, r5, r7, pc}

08002546 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7d9b      	ldrb	r3, [r3, #22]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10c      	bne.n	8002570 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8002556:	2133      	movs	r1, #51	; 0x33
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f87b 	bl	8002654 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 800255e:	2132      	movs	r1, #50	; 0x32
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f877 	bl	8002654 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8002566:	2128      	movs	r1, #40	; 0x28
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f873 	bl	8002654 <lcd_write_command>
 800256e:	e003      	b.n	8002578 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8002570:	2138      	movs	r1, #56	; 0x38
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f86e 	bl	8002654 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8002578:	2101      	movs	r1, #1
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f86a 	bl	8002654 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8002580:	210c      	movs	r1, #12
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f866 	bl	8002654 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8002588:	2106      	movs	r1, #6
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f862 	bl	8002654 <lcd_write_command>
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <Lcd_int>:
{
    lcd_write_data(lcd, caracter);
}

void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80025a2:	f107 030c 	add.w	r3, r7, #12
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	4906      	ldr	r1, [pc, #24]	; (80025c4 <Lcd_int+0x2c>)
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 fcc0 	bl	8004f30 <siprintf>

	Lcd_string(lcd, buffer);
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	4619      	mov	r1, r3
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f806 	bl	80025c8 <Lcd_string>
}
 80025bc:	bf00      	nop
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	080059a0 	.word	0x080059a0

080025c8 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	73fb      	strb	r3, [r7, #15]
 80025d6:	e00a      	b.n	80025ee <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	4413      	add	r3, r2
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f864 	bl	80026b0 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	3301      	adds	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
 80025ee:	7bfc      	ldrb	r4, [r7, #15]
 80025f0:	6838      	ldr	r0, [r7, #0]
 80025f2:	f7fd fdab 	bl	800014c <strlen>
 80025f6:	4603      	mov	r3, r0
 80025f8:	429c      	cmp	r4, r3
 80025fa:	d3ed      	bcc.n	80025d8 <Lcd_string+0x10>
	}
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bd90      	pop	{r4, r7, pc}
	...

08002608 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
 8002614:	4613      	mov	r3, r2
 8002616:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	4a07      	ldr	r2, [pc, #28]	; (8002638 <Lcd_cursor+0x30>)
 800261c:	5cd2      	ldrb	r2, [r2, r3]
 800261e:	78bb      	ldrb	r3, [r7, #2]
 8002620:	4413      	add	r3, r2
 8002622:	b2db      	uxtb	r3, r3
 8002624:	3b80      	subs	r3, #128	; 0x80
 8002626:	b2db      	uxtb	r3, r3
 8002628:	4619      	mov	r1, r3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f812 	bl	8002654 <lcd_write_command>
	#endif
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	080059f0 	.word	0x080059f0

0800263c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8002644:	2101      	movs	r1, #1
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f804 	bl	8002654 <lcd_write_command>
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6898      	ldr	r0, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	899b      	ldrh	r3, [r3, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	4619      	mov	r1, r3
 800266c:	f001 f8d3 	bl	8003816 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7d9b      	ldrb	r3, [r3, #22]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d111      	bne.n	800269c <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2204      	movs	r2, #4
 8002680:	4619      	mov	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f842 	bl	800270c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2204      	movs	r2, #4
 8002692:	4619      	mov	r1, r3
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f839 	bl	800270c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800269a:	e005      	b.n	80026a8 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	2208      	movs	r2, #8
 80026a0:	4619      	mov	r1, r3
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f832 	bl	800270c <lcd_write>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6898      	ldr	r0, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	899b      	ldrh	r3, [r3, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	4619      	mov	r1, r3
 80026c8:	f001 f8a5 	bl	8003816 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	7d9b      	ldrb	r3, [r3, #22]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d111      	bne.n	80026f8 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2204      	movs	r2, #4
 80026dc:	4619      	mov	r1, r3
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f814 	bl	800270c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2204      	movs	r2, #4
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f80b 	bl	800270c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80026f6:	e005      	b.n	8002704 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	2208      	movs	r2, #8
 80026fc:	4619      	mov	r1, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f804 	bl	800270c <lcd_write>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	70fb      	strb	r3, [r7, #3]
 8002718:	4613      	mov	r3, r2
 800271a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e019      	b.n	8002756 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	8819      	ldrh	r1, [r3, #0]
 800273a:	78fa      	ldrb	r2, [r7, #3]
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	fa42 f303 	asr.w	r3, r2, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	f001 f863 	bl	8003816 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	3301      	adds	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	78bb      	ldrb	r3, [r7, #2]
 800275a:	429a      	cmp	r2, r3
 800275c:	d3e1      	bcc.n	8002722 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6918      	ldr	r0, [r3, #16]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8a9b      	ldrh	r3, [r3, #20]
 8002766:	2201      	movs	r2, #1
 8002768:	4619      	mov	r1, r3
 800276a:	f001 f854 	bl	8003816 <HAL_GPIO_WritePin>
	DELAY(1);
 800276e:	2001      	movs	r0, #1
 8002770:	f000 fd84 	bl	800327c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6918      	ldr	r0, [r3, #16]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	8a9b      	ldrh	r3, [r3, #20]
 800277c:	2200      	movs	r2, #0
 800277e:	4619      	mov	r1, r3
 8002780:	f001 f849 	bl	8003816 <HAL_GPIO_WritePin>
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800278c:	b5b0      	push	{r4, r5, r7, lr}
 800278e:	b096      	sub	sp, #88	; 0x58
 8002790:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002792:	f000 fd11 	bl	80031b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002796:	f000 f8e9 	bl	800296c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800279a:	f000 f9f1 	bl	8002b80 <MX_GPIO_Init>
  MX_TIM2_Init();
 800279e:	f000 f92b 	bl	80029f8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80027a2:	f000 f99f 	bl	8002ae4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);		//Inicia generacion de señal PWM
 80027a6:	2108      	movs	r1, #8
 80027a8:	4865      	ldr	r0, [pc, #404]	; (8002940 <main+0x1b4>)
 80027aa:	f001 fd55 	bl	8004258 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);	// Inicia el temporizador de base asociado con el temporizador TIM4
 80027ae:	4865      	ldr	r0, [pc, #404]	; (8002944 <main+0x1b8>)
 80027b0:	f001 fca8 	bl	8004104 <HAL_TIM_Base_Start_IT>


  TIM2->CCR3 = 550;	//Establece el valor de comparacion en 550
 80027b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027b8:	f240 2226 	movw	r2, #550	; 0x226
 80027bc:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_GPIO_WritePin(GPIOB, dir_motorX_Pin, GPIO_PIN_SET);
 80027be:	2201      	movs	r2, #1
 80027c0:	2110      	movs	r1, #16
 80027c2:	4861      	ldr	r0, [pc, #388]	; (8002948 <main+0x1bc>)
 80027c4:	f001 f827 	bl	8003816 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, dir_motorY_Pin, GPIO_PIN_SET);
 80027c8:	2201      	movs	r2, #1
 80027ca:	2108      	movs	r1, #8
 80027cc:	485e      	ldr	r0, [pc, #376]	; (8002948 <main+0x1bc>)
 80027ce:	f001 f822 	bl	8003816 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOB, dir_motorX_Pin, GPIO_PIN_RESET);
  //HAL_GPIO_WritePin(GPIOB, dir_motorY_Pin, GPIO_PIN_SET);

  Lcd_PortType ports[] = { GPIOB, GPIOB, GPIOB, GPIOB };	//Declaramos los puertos GPIO a los que están conectados los pines de la pantalla LCD en el orden correspondiente: RS, RW, E, D4.
 80027d2:	4b5e      	ldr	r3, [pc, #376]	; (800294c <main+0x1c0>)
 80027d4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80027d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType pins[] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_10, GPIO_PIN_11};	//Declaramos los pines GPIO específicos a los que están conectados los pines de la pantalla LCD en el mismo orden que los puertos.
 80027de:	4a5c      	ldr	r2, [pc, #368]	; (8002950 <main+0x1c4>)
 80027e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027e8:	e883 0003 	stmia.w	r3, {r0, r1}
  Lcd_HandleTypeDef lcd;	//Declaramos una variable para almacenar la configuración y el estado de la pantalla LCD.
  lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_1, GPIOA, GPIO_PIN_3, LCD_4_BIT_MODE);	//Inicializamos la variable lcd llamando a la función Lcd_create con los parámetros necesarios para configurar la pantalla LCD.
 80027ec:	4638      	mov	r0, r7
 80027ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80027f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80027f6:	2300      	movs	r3, #0
 80027f8:	9303      	str	r3, [sp, #12]
 80027fa:	2308      	movs	r3, #8
 80027fc:	9302      	str	r3, [sp, #8]
 80027fe:	4b55      	ldr	r3, [pc, #340]	; (8002954 <main+0x1c8>)
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	2302      	movs	r3, #2
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	4b53      	ldr	r3, [pc, #332]	; (8002954 <main+0x1c8>)
 8002808:	f7ff fe72 	bl	80024f0 <Lcd_create>
 800280c:	f107 0418 	add.w	r4, r7, #24
 8002810:	463d      	mov	r5, r7
 8002812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002816:	e895 0003 	ldmia.w	r5, {r0, r1}
 800281a:	e884 0003 	stmia.w	r4, {r0, r1}

  while(1){
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  delay(1000);
  }*/
  Lcd_init(&lcd);
 800281e:	f107 0318 	add.w	r3, r7, #24
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fe8f 	bl	8002546 <Lcd_init>
  Lcd_clear(&lcd);
 8002828:	f107 0318 	add.w	r3, r7, #24
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff05 	bl	800263c <Lcd_clear>
  Lcd_cursor(&lcd, 0,1);
 8002832:	f107 0318 	add.w	r3, r7, #24
 8002836:	2201      	movs	r2, #1
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fee4 	bl	8002608 <Lcd_cursor>
  Lcd_string(&lcd, " Elija opcion");
 8002840:	f107 0318 	add.w	r3, r7, #24
 8002844:	4944      	ldr	r1, [pc, #272]	; (8002958 <main+0x1cc>)
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff febe 	bl	80025c8 <Lcd_string>
  HAL_Delay(3000);
 800284c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002850:	f000 fd14 	bl	800327c <HAL_Delay>
  estado_impresora = MENU;
 8002854:	4b41      	ldr	r3, [pc, #260]	; (800295c <main+0x1d0>)
 8002856:	2203      	movs	r2, #3
 8002858:	701a      	strb	r2, [r3, #0]

  //variable_AUX = 0;	//Sacar esta linea una vez que funcione el codigo completo

  while (1)
  {
	  if(estado_impresora == TEXTO || estado_impresora == IMPRIMIR || estado_impresora == HOME){
 800285a:	4b40      	ldr	r3, [pc, #256]	; (800295c <main+0x1d0>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <main+0xe6>
 8002862:	4b3e      	ldr	r3, [pc, #248]	; (800295c <main+0x1d0>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d003      	beq.n	8002872 <main+0xe6>
 800286a:	4b3c      	ldr	r3, [pc, #240]	; (800295c <main+0x1d0>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d125      	bne.n	80028be <main+0x132>

			Manejo_Interrupciones(interrupcion);
 8002872:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <main+0x1d4>)
 8002874:	f993 3000 	ldrsb.w	r3, [r3]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe fc01 	bl	8001080 <Manejo_Interrupciones>
			HAL_GPIO_WritePin(GPIOA, Columna1_Pin, 1);	//Asigno valores a pines del teclado matricial para que funcionen las interrupciones
 800287e:	2201      	movs	r2, #1
 8002880:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002884:	4833      	ldr	r0, [pc, #204]	; (8002954 <main+0x1c8>)
 8002886:	f000 ffc6 	bl	8003816 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, Columna2_Pin, 1);
 800288a:	2201      	movs	r2, #1
 800288c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002890:	4830      	ldr	r0, [pc, #192]	; (8002954 <main+0x1c8>)
 8002892:	f000 ffc0 	bl	8003816 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, Columna3_Pin, 1);
 8002896:	2201      	movs	r2, #1
 8002898:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800289c:	482d      	ldr	r0, [pc, #180]	; (8002954 <main+0x1c8>)
 800289e:	f000 ffba 	bl	8003816 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, Columna4_Pin, 1);
 80028a2:	2201      	movs	r2, #1
 80028a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028a8:	482a      	ldr	r0, [pc, #168]	; (8002954 <main+0x1c8>)
 80028aa:	f000 ffb4 	bl	8003816 <HAL_GPIO_WritePin>
			if (estado_impresora == MENU){
 80028ae:	4b2b      	ldr	r3, [pc, #172]	; (800295c <main+0x1d0>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d043      	beq.n	800293e <main+0x1b2>
			}
			else{
				estado_impresora = ESPERAR;
 80028b6:	4b29      	ldr	r3, [pc, #164]	; (800295c <main+0x1d0>)
 80028b8:	2204      	movs	r2, #4
 80028ba:	701a      	strb	r2, [r3, #0]
			if (estado_impresora == MENU){
 80028bc:	e03f      	b.n	800293e <main+0x1b2>
			}
	  }
	  else if(estado_impresora == MENU){
 80028be:	4b27      	ldr	r3, [pc, #156]	; (800295c <main+0x1d0>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d1c9      	bne.n	800285a <main+0xce>
			Lcd_clear(&lcd);
 80028c6:	f107 0318 	add.w	r3, r7, #24
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff feb6 	bl	800263c <Lcd_clear>
			Lcd_cursor(&lcd, 0,0);
 80028d0:	f107 0318 	add.w	r3, r7, #24
 80028d4:	2200      	movs	r2, #0
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fe95 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "A)Text   B)Home");
 80028de:	f107 0318 	add.w	r3, r7, #24
 80028e2:	4920      	ldr	r1, [pc, #128]	; (8002964 <main+0x1d8>)
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fe6f 	bl	80025c8 <Lcd_string>
			Lcd_cursor(&lcd, 1,0);
 80028ea:	f107 0318 	add.w	r3, r7, #24
 80028ee:	2200      	movs	r2, #0
 80028f0:	2101      	movs	r1, #1
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fe88 	bl	8002608 <Lcd_cursor>
			Lcd_string(&lcd, "C)Print  D)Back");
 80028f8:	f107 0318 	add.w	r3, r7, #24
 80028fc:	491a      	ldr	r1, [pc, #104]	; (8002968 <main+0x1dc>)
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fe62 	bl	80025c8 <Lcd_string>
			HAL_GPIO_WritePin(GPIOA, Columna1_Pin, 0);	//Asigno valores a pines del teclado matricial para que funcionen las interrupciones
 8002904:	2200      	movs	r2, #0
 8002906:	f44f 7180 	mov.w	r1, #256	; 0x100
 800290a:	4812      	ldr	r0, [pc, #72]	; (8002954 <main+0x1c8>)
 800290c:	f000 ff83 	bl	8003816 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, Columna2_Pin, 0);
 8002910:	2200      	movs	r2, #0
 8002912:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002916:	480f      	ldr	r0, [pc, #60]	; (8002954 <main+0x1c8>)
 8002918:	f000 ff7d 	bl	8003816 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, Columna3_Pin, 0);
 800291c:	2200      	movs	r2, #0
 800291e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002922:	480c      	ldr	r0, [pc, #48]	; (8002954 <main+0x1c8>)
 8002924:	f000 ff77 	bl	8003816 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, Columna4_Pin, 1);	//Solamente habilita las teclas A, B, C y D
 8002928:	2201      	movs	r2, #1
 800292a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800292e:	4809      	ldr	r0, [pc, #36]	; (8002954 <main+0x1c8>)
 8002930:	f000 ff71 	bl	8003816 <HAL_GPIO_WritePin>
			while(estado_impresora == MENU){
 8002934:	bf00      	nop
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <main+0x1d0>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d0fb      	beq.n	8002936 <main+0x1aa>
	  if(estado_impresora == TEXTO || estado_impresora == IMPRIMIR || estado_impresora == HOME){
 800293e:	e78c      	b.n	800285a <main+0xce>
 8002940:	200000ac 	.word	0x200000ac
 8002944:	200000f4 	.word	0x200000f4
 8002948:	40010c00 	.word	0x40010c00
 800294c:	080059d4 	.word	0x080059d4
 8002950:	080059e4 	.word	0x080059e4
 8002954:	40010800 	.word	0x40010800
 8002958:	080059a4 	.word	0x080059a4
 800295c:	2000014c 	.word	0x2000014c
 8002960:	2000013c 	.word	0x2000013c
 8002964:	080059b4 	.word	0x080059b4
 8002968:	080059c4 	.word	0x080059c4

0800296c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b090      	sub	sp, #64	; 0x40
 8002970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002972:	f107 0318 	add.w	r3, r7, #24
 8002976:	2228      	movs	r2, #40	; 0x28
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f002 faf8 	bl	8004f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	60da      	str	r2, [r3, #12]
 800298c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800298e:	2301      	movs	r3, #1
 8002990:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002996:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800299c:	2301      	movs	r3, #1
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029a0:	2302      	movs	r3, #2
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80029aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029b0:	f107 0318 	add.w	r3, r7, #24
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 ff77 	bl	80038a8 <HAL_RCC_OscConfig>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80029c0:	f000 faa8 	bl	8002f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029c4:	230f      	movs	r3, #15
 80029c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029c8:	2302      	movs	r3, #2
 80029ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	2102      	movs	r1, #2
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 f9e4 	bl	8003dac <HAL_RCC_ClockConfig>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80029ea:	f000 fa93 	bl	8002f14 <Error_Handler>
  }
}
 80029ee:	bf00      	nop
 80029f0:	3740      	adds	r7, #64	; 0x40
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08e      	sub	sp, #56	; 0x38
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a0c:	f107 0320 	add.w	r3, r7, #32
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
 8002a24:	615a      	str	r2, [r3, #20]
 8002a26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a28:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <MX_TIM2_Init+0xe8>)
 8002a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8002a30:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <MX_TIM2_Init+0xe8>)
 8002a32:	2240      	movs	r2, #64	; 0x40
 8002a34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a36:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <MX_TIM2_Init+0xe8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 22500;
 8002a3c:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <MX_TIM2_Init+0xe8>)
 8002a3e:	f245 72e4 	movw	r2, #22500	; 0x57e4
 8002a42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a44:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <MX_TIM2_Init+0xe8>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4a:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <MX_TIM2_Init+0xe8>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a50:	4823      	ldr	r0, [pc, #140]	; (8002ae0 <MX_TIM2_Init+0xe8>)
 8002a52:	f001 fb07 	bl	8004064 <HAL_TIM_Base_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a5c:	f000 fa5a 	bl	8002f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	481c      	ldr	r0, [pc, #112]	; (8002ae0 <MX_TIM2_Init+0xe8>)
 8002a6e:	f001 fe5f 	bl	8004730 <HAL_TIM_ConfigClockSource>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002a78:	f000 fa4c 	bl	8002f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a7c:	4818      	ldr	r0, [pc, #96]	; (8002ae0 <MX_TIM2_Init+0xe8>)
 8002a7e:	f001 fb93 	bl	80041a8 <HAL_TIM_PWM_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002a88:	f000 fa44 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a94:	f107 0320 	add.w	r3, r7, #32
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4811      	ldr	r0, [pc, #68]	; (8002ae0 <MX_TIM2_Init+0xe8>)
 8002a9c:	f002 f9d8 	bl	8004e50 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002aa6:	f000 fa35 	bl	8002f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aaa:	2360      	movs	r3, #96	; 0x60
 8002aac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	2208      	movs	r2, #8
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4807      	ldr	r0, [pc, #28]	; (8002ae0 <MX_TIM2_Init+0xe8>)
 8002ac2:	f001 fd73 	bl	80045ac <HAL_TIM_PWM_ConfigChannel>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002acc:	f000 fa22 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ad0:	4803      	ldr	r0, [pc, #12]	; (8002ae0 <MX_TIM2_Init+0xe8>)
 8002ad2:	f000 fa8f 	bl	8002ff4 <HAL_TIM_MspPostInit>

}
 8002ad6:	bf00      	nop
 8002ad8:	3738      	adds	r7, #56	; 0x38
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200000ac 	.word	0x200000ac

08002ae4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aea:	f107 0308 	add.w	r3, r7, #8
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af8:	463b      	mov	r3, r7
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b00:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <MX_TIM4_Init+0x94>)
 8002b02:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <MX_TIM4_Init+0x98>)
 8002b04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 8002b06:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <MX_TIM4_Init+0x94>)
 8002b08:	220a      	movs	r2, #10
 8002b0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <MX_TIM4_Init+0x94>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 8002b12:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <MX_TIM4_Init+0x94>)
 8002b14:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002b18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <MX_TIM4_Init+0x94>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b20:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <MX_TIM4_Init+0x94>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b26:	4814      	ldr	r0, [pc, #80]	; (8002b78 <MX_TIM4_Init+0x94>)
 8002b28:	f001 fa9c 	bl	8004064 <HAL_TIM_Base_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002b32:	f000 f9ef 	bl	8002f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b3c:	f107 0308 	add.w	r3, r7, #8
 8002b40:	4619      	mov	r1, r3
 8002b42:	480d      	ldr	r0, [pc, #52]	; (8002b78 <MX_TIM4_Init+0x94>)
 8002b44:	f001 fdf4 	bl	8004730 <HAL_TIM_ConfigClockSource>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002b4e:	f000 f9e1 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b5a:	463b      	mov	r3, r7
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4806      	ldr	r0, [pc, #24]	; (8002b78 <MX_TIM4_Init+0x94>)
 8002b60:	f002 f976 	bl	8004e50 <HAL_TIMEx_MasterConfigSynchronization>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002b6a:	f000 f9d3 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b6e:	bf00      	nop
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200000f4 	.word	0x200000f4
 8002b7c:	40000800 	.word	0x40000800

08002b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b86:	f107 0310 	add.w	r3, r7, #16
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	609a      	str	r2, [r3, #8]
 8002b92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b94:	4b4d      	ldr	r3, [pc, #308]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	4a4c      	ldr	r2, [pc, #304]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002b9a:	f043 0310 	orr.w	r3, r3, #16
 8002b9e:	6193      	str	r3, [r2, #24]
 8002ba0:	4b4a      	ldr	r3, [pc, #296]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bac:	4b47      	ldr	r3, [pc, #284]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	4a46      	ldr	r2, [pc, #280]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bb2:	f043 0320 	orr.w	r3, r3, #32
 8002bb6:	6193      	str	r3, [r2, #24]
 8002bb8:	4b44      	ldr	r3, [pc, #272]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc4:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	4a40      	ldr	r2, [pc, #256]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bca:	f043 0304 	orr.w	r3, r3, #4
 8002bce:	6193      	str	r3, [r2, #24]
 8002bd0:	4b3e      	ldr	r3, [pc, #248]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	607b      	str	r3, [r7, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bdc:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	4a3a      	ldr	r2, [pc, #232]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002be2:	f043 0308 	orr.w	r3, r3, #8
 8002be6:	6193      	str	r3, [r2, #24]
 8002be8:	4b38      	ldr	r3, [pc, #224]	; (8002ccc <MX_GPIO_Init+0x14c>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bfa:	4835      	ldr	r0, [pc, #212]	; (8002cd0 <MX_GPIO_Init+0x150>)
 8002bfc:	f000 fe0b 	bl	8003816 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|motorX_Pin|motorY_Pin
 8002c00:	2200      	movs	r2, #0
 8002c02:	f640 713a 	movw	r1, #3898	; 0xf3a
 8002c06:	4833      	ldr	r0, [pc, #204]	; (8002cd4 <MX_GPIO_Init+0x154>)
 8002c08:	f000 fe05 	bl	8003816 <HAL_GPIO_WritePin>
                          |Columna1_Pin|Columna2_Pin|Columna3_Pin|Columna4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f640 411b 	movw	r1, #3099	; 0xc1b
 8002c12:	4831      	ldr	r0, [pc, #196]	; (8002cd8 <MX_GPIO_Init+0x158>)
 8002c14:	f000 fdff 	bl	8003816 <HAL_GPIO_WritePin>
                          |dir_motorY_Pin|dir_motorX_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2302      	movs	r3, #2
 8002c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2a:	f107 0310 	add.w	r3, r7, #16
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4827      	ldr	r0, [pc, #156]	; (8002cd0 <MX_GPIO_Init+0x150>)
 8002c32:	f000 fc55 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 motorX_Pin motorY_Pin
                           Columna1_Pin Columna2_Pin Columna3_Pin Columna4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|motorX_Pin|motorY_Pin
 8002c36:	f640 733a 	movw	r3, #3898	; 0xf3a
 8002c3a:	613b      	str	r3, [r7, #16]
                          |Columna1_Pin|Columna2_Pin|Columna3_Pin|Columna4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2302      	movs	r3, #2
 8002c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c48:	f107 0310 	add.w	r3, r7, #16
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4821      	ldr	r0, [pc, #132]	; (8002cd4 <MX_GPIO_Init+0x154>)
 8002c50:	f000 fc46 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FinalCarreraX_Pin FinalCarreraY_Pin */
  GPIO_InitStruct.Pin = FinalCarreraX_Pin|FinalCarreraY_Pin;
 8002c54:	23c0      	movs	r3, #192	; 0xc0
 8002c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c58:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <MX_GPIO_Init+0x15c>)
 8002c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c60:	f107 0310 	add.w	r3, r7, #16
 8002c64:	4619      	mov	r1, r3
 8002c66:	481b      	ldr	r0, [pc, #108]	; (8002cd4 <MX_GPIO_Init+0x154>)
 8002c68:	f000 fc3a 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           dir_motorY_Pin dir_motorX_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8002c6c:	f640 431b 	movw	r3, #3099	; 0xc1b
 8002c70:	613b      	str	r3, [r7, #16]
                          |dir_motorY_Pin|dir_motorX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c72:	2301      	movs	r3, #1
 8002c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7e:	f107 0310 	add.w	r3, r7, #16
 8002c82:	4619      	mov	r1, r3
 8002c84:	4814      	ldr	r0, [pc, #80]	; (8002cd8 <MX_GPIO_Init+0x158>)
 8002c86:	f000 fc2b 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Fila1_EXTI_Pin Fila2_EXTI_Pin Fila3_EXTI_Pin Fila4_EXTI_Pin */
  GPIO_InitStruct.Pin = Fila1_EXTI_Pin|Fila2_EXTI_Pin|Fila3_EXTI_Pin|Fila4_EXTI_Pin;
 8002c8a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c90:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <MX_GPIO_Init+0x15c>)
 8002c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c94:	2302      	movs	r3, #2
 8002c96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c98:	f107 0310 	add.w	r3, r7, #16
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480e      	ldr	r0, [pc, #56]	; (8002cd8 <MX_GPIO_Init+0x158>)
 8002ca0:	f000 fc1e 	bl	80034e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2017      	movs	r0, #23
 8002caa:	f000 fbe2 	bl	8003472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cae:	2017      	movs	r0, #23
 8002cb0:	f000 fbfb 	bl	80034aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2105      	movs	r1, #5
 8002cb8:	2028      	movs	r0, #40	; 0x28
 8002cba:	f000 fbda 	bl	8003472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cbe:	2028      	movs	r0, #40	; 0x28
 8002cc0:	f000 fbf3 	bl	80034aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cc4:	bf00      	nop
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40011000 	.word	0x40011000
 8002cd4:	40010800 	.word	0x40010800
 8002cd8:	40010c00 	.word	0x40010c00
 8002cdc:	10110000 	.word	0x10110000

08002ce0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	80fb      	strh	r3, [r7, #6]

	  miliseg_actual = HAL_GetTick();
 8002cea:	f000 fabd 	bl	8003268 <HAL_GetTick>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4a74      	ldr	r2, [pc, #464]	; (8002ec4 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002cf2:	6013      	str	r3, [r2, #0]
	  if ((miliseg_actual - miliseg_prev > 100)) {
 8002cf4:	4b73      	ldr	r3, [pc, #460]	; (8002ec4 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b73      	ldr	r3, [pc, #460]	; (8002ec8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	f240 80db 	bls.w	8002eba <HAL_GPIO_EXTI_Callback+0x1da>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);	//Indicador visual para saber cuando entro a la interrupcion (led incorporado en bluepill)
 8002d04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d08:	4870      	ldr	r0, [pc, #448]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002d0a:	f000 fd9c 	bl	8003846 <HAL_GPIO_TogglePin>

		if(estado_impresora == ESPERAR || estado_impresora == TEXTO){
 8002d0e:	4b70      	ldr	r3, [pc, #448]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_EXTI_Callback+0x3e>
 8002d16:	4b6e      	ldr	r3, [pc, #440]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d14a      	bne.n	8002db4 <HAL_GPIO_EXTI_Callback+0xd4>
			if(GPIO_Pin == Fila1_EXTI_Pin && HAL_GPIO_ReadPin(GPIOB, Fila1_EXTI_Pin)){	//Tuve que eliminar lo que quedo comentado porque la lectura no la hacia correc
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d24:	d10e      	bne.n	8002d44 <HAL_GPIO_EXTI_Callback+0x64>
 8002d26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d2a:	486a      	ldr	r0, [pc, #424]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002d2c:	f000 fd5c 	bl	80037e8 <HAL_GPIO_ReadPin>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d006      	beq.n	8002d44 <HAL_GPIO_EXTI_Callback+0x64>
				interrupcion = 1;
 8002d36:	4b68      	ldr	r3, [pc, #416]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]
				estado_impresora = TEXTO;
 8002d3c:	4b64      	ldr	r3, [pc, #400]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
 8002d42:	e024      	b.n	8002d8e <HAL_GPIO_EXTI_Callback+0xae>
			}
			else if(GPIO_Pin == Fila2_EXTI_Pin && HAL_GPIO_ReadPin(GPIOB, Fila2_EXTI_Pin)){
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4a:	d10e      	bne.n	8002d6a <HAL_GPIO_EXTI_Callback+0x8a>
 8002d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d50:	4860      	ldr	r0, [pc, #384]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002d52:	f000 fd49 	bl	80037e8 <HAL_GPIO_ReadPin>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d006      	beq.n	8002d6a <HAL_GPIO_EXTI_Callback+0x8a>
				interrupcion = 2;
 8002d5c:	4b5e      	ldr	r3, [pc, #376]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002d5e:	2202      	movs	r2, #2
 8002d60:	701a      	strb	r2, [r3, #0]
				estado_impresora = TEXTO;
 8002d62:	4b5b      	ldr	r3, [pc, #364]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
 8002d68:	e011      	b.n	8002d8e <HAL_GPIO_EXTI_Callback+0xae>
			}
			else if(GPIO_Pin == Fila3_EXTI_Pin && HAL_GPIO_ReadPin(GPIOB, Fila3_EXTI_Pin)){
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d70:	d10d      	bne.n	8002d8e <HAL_GPIO_EXTI_Callback+0xae>
 8002d72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d76:	4857      	ldr	r0, [pc, #348]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002d78:	f000 fd36 	bl	80037e8 <HAL_GPIO_ReadPin>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_GPIO_EXTI_Callback+0xae>
				interrupcion = 3;
 8002d82:	4b55      	ldr	r3, [pc, #340]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002d84:	2203      	movs	r2, #3
 8002d86:	701a      	strb	r2, [r3, #0]
				estado_impresora = TEXTO;
 8002d88:	4b51      	ldr	r3, [pc, #324]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
			}
			if(GPIO_Pin == Fila4_EXTI_Pin && HAL_GPIO_ReadPin(GPIOB, Fila4_EXTI_Pin)){
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d94:	d151      	bne.n	8002e3a <HAL_GPIO_EXTI_Callback+0x15a>
 8002d96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d9a:	484e      	ldr	r0, [pc, #312]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002d9c:	f000 fd24 	bl	80037e8 <HAL_GPIO_ReadPin>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d049      	beq.n	8002e3a <HAL_GPIO_EXTI_Callback+0x15a>
					interrupcion = 4;
 8002da6:	4b4c      	ldr	r3, [pc, #304]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8002da8:	2204      	movs	r2, #4
 8002daa:	701a      	strb	r2, [r3, #0]
					estado_impresora = TEXTO;
 8002dac:	4b48      	ldr	r3, [pc, #288]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	701a      	strb	r2, [r3, #0]
			if(GPIO_Pin == Fila4_EXTI_Pin && HAL_GPIO_ReadPin(GPIOB, Fila4_EXTI_Pin)){
 8002db2:	e042      	b.n	8002e3a <HAL_GPIO_EXTI_Callback+0x15a>
					//estado_impresora = ATRAS;
			}
		}
		else if(estado_impresora == MENU){
 8002db4:	4b46      	ldr	r3, [pc, #280]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d13f      	bne.n	8002e3c <HAL_GPIO_EXTI_Callback+0x15c>
			if(GPIO_Pin == Fila1_EXTI_Pin && HAL_GPIO_ReadPin(GPIOB, Fila1_EXTI_Pin)){	//Tuve que eliminar lo que quedo comentado porque la lectura no la hacia correc
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc2:	d10b      	bne.n	8002ddc <HAL_GPIO_EXTI_Callback+0xfc>
 8002dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dc8:	4842      	ldr	r0, [pc, #264]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002dca:	f000 fd0d 	bl	80037e8 <HAL_GPIO_ReadPin>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_EXTI_Callback+0xfc>
				estado_impresora = TEXTO;
 8002dd4:	4b3e      	ldr	r3, [pc, #248]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	e01e      	b.n	8002e1a <HAL_GPIO_EXTI_Callback+0x13a>
			}
			else if(GPIO_Pin == Fila2_EXTI_Pin && HAL_GPIO_ReadPin(GPIOB, Fila2_EXTI_Pin)){
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de2:	d10b      	bne.n	8002dfc <HAL_GPIO_EXTI_Callback+0x11c>
 8002de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002de8:	483a      	ldr	r0, [pc, #232]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002dea:	f000 fcfd 	bl	80037e8 <HAL_GPIO_ReadPin>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_EXTI_Callback+0x11c>
				estado_impresora = HOME;
 8002df4:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e00e      	b.n	8002e1a <HAL_GPIO_EXTI_Callback+0x13a>
			}
			else if(GPIO_Pin == Fila3_EXTI_Pin && HAL_GPIO_ReadPin(GPIOB, Fila3_EXTI_Pin)){
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e02:	d10a      	bne.n	8002e1a <HAL_GPIO_EXTI_Callback+0x13a>
 8002e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e08:	4832      	ldr	r0, [pc, #200]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002e0a:	f000 fced 	bl	80037e8 <HAL_GPIO_ReadPin>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_GPIO_EXTI_Callback+0x13a>
				estado_impresora = IMPRIMIR;
 8002e14:	4b2e      	ldr	r3, [pc, #184]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002e16:	2202      	movs	r2, #2
 8002e18:	701a      	strb	r2, [r3, #0]
			}
			if(GPIO_Pin == Fila4_EXTI_Pin && HAL_GPIO_ReadPin(GPIOB, Fila4_EXTI_Pin)){
 8002e1a:	88fb      	ldrh	r3, [r7, #6]
 8002e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e20:	d10c      	bne.n	8002e3c <HAL_GPIO_EXTI_Callback+0x15c>
 8002e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e26:	482b      	ldr	r0, [pc, #172]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8002e28:	f000 fcde 	bl	80037e8 <HAL_GPIO_ReadPin>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d004      	beq.n	8002e3c <HAL_GPIO_EXTI_Callback+0x15c>
				estado_impresora = MENU;
 8002e32:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002e34:	2203      	movs	r2, #3
 8002e36:	701a      	strb	r2, [r3, #0]
 8002e38:	e000      	b.n	8002e3c <HAL_GPIO_EXTI_Callback+0x15c>
			if(GPIO_Pin == Fila4_EXTI_Pin && HAL_GPIO_ReadPin(GPIOB, Fila4_EXTI_Pin)){
 8002e3a:	bf00      	nop
			}
		}
		if(GPIO_Pin == FinalCarreraX_Pin && HAL_GPIO_ReadPin(GPIOA, FinalCarreraX_Pin)){
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	2b40      	cmp	r3, #64	; 0x40
 8002e40:	d11b      	bne.n	8002e7a <HAL_GPIO_EXTI_Callback+0x19a>
 8002e42:	2140      	movs	r1, #64	; 0x40
 8002e44:	4825      	ldr	r0, [pc, #148]	; (8002edc <HAL_GPIO_EXTI_Callback+0x1fc>)
 8002e46:	f000 fccf 	bl	80037e8 <HAL_GPIO_ReadPin>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d014      	beq.n	8002e7a <HAL_GPIO_EXTI_Callback+0x19a>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);	//Indicador cuando el FC ha sido pulsado
 8002e50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e54:	481d      	ldr	r0, [pc, #116]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002e56:	f000 fcf6 	bl	8003846 <HAL_GPIO_TogglePin>
			if (estado_impresora == IMPRIMIR){
 8002e5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d100      	bne.n	8002e64 <HAL_GPIO_EXTI_Callback+0x184>
				  while(1){}	//Se debe reiniciar la impresora
 8002e62:	e7fe      	b.n	8002e62 <HAL_GPIO_EXTI_Callback+0x182>
			}
			else if(estado_impresora == HOME){
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d125      	bne.n	8002eb8 <HAL_GPIO_EXTI_Callback+0x1d8>
					homingX++;	//Varia variable para realizar las diferentes acciones en Homing()
 8002e6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <HAL_GPIO_EXTI_Callback+0x200>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	3301      	adds	r3, #1
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <HAL_GPIO_EXTI_Callback+0x200>)
 8002e76:	701a      	strb	r2, [r3, #0]
			if (estado_impresora == IMPRIMIR){
 8002e78:	e01e      	b.n	8002eb8 <HAL_GPIO_EXTI_Callback+0x1d8>
			}
		}
		else if(GPIO_Pin == FinalCarreraY_Pin && HAL_GPIO_ReadPin(GPIOA, FinalCarreraY_Pin)){
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	2b80      	cmp	r3, #128	; 0x80
 8002e7e:	d11c      	bne.n	8002eba <HAL_GPIO_EXTI_Callback+0x1da>
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	4816      	ldr	r0, [pc, #88]	; (8002edc <HAL_GPIO_EXTI_Callback+0x1fc>)
 8002e84:	f000 fcb0 	bl	80037e8 <HAL_GPIO_ReadPin>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d015      	beq.n	8002eba <HAL_GPIO_EXTI_Callback+0x1da>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002e8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e92:	480e      	ldr	r0, [pc, #56]	; (8002ecc <HAL_GPIO_EXTI_Callback+0x1ec>)
 8002e94:	f000 fcd7 	bl	8003846 <HAL_GPIO_TogglePin>
			if (estado_impresora == IMPRIMIR){
 8002e98:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d100      	bne.n	8002ea2 <HAL_GPIO_EXTI_Callback+0x1c2>
				  while(1){}	//Se debe reiniciar la impresora
 8002ea0:	e7fe      	b.n	8002ea0 <HAL_GPIO_EXTI_Callback+0x1c0>

			}
			else if(estado_impresora == HOME){
 8002ea2:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d107      	bne.n	8002eba <HAL_GPIO_EXTI_Callback+0x1da>
					homingY++;
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0x204>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0x204>)
 8002eb4:	701a      	strb	r2, [r3, #0]
			}
		}
	  }
  }
 8002eb6:	e000      	b.n	8002eba <HAL_GPIO_EXTI_Callback+0x1da>
			if (estado_impresora == IMPRIMIR){
 8002eb8:	bf00      	nop
  }
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000144 	.word	0x20000144
 8002ec8:	20000140 	.word	0x20000140
 8002ecc:	40011000 	.word	0x40011000
 8002ed0:	2000014c 	.word	0x2000014c
 8002ed4:	40010c00 	.word	0x40010c00
 8002ed8:	2000013c 	.word	0x2000013c
 8002edc:	40010800 	.word	0x40010800
 8002ee0:	2000014d 	.word	0x2000014d
 8002ee4:	2000014e 	.word	0x2000014e

08002ee8 <HAL_TIM_PeriodElapsedCallback>:
	  //miliseg_prev = miliseg_actual;



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
    if (htim == &htim4) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a06      	ldr	r2, [pc, #24]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d104      	bne.n	8002f02 <HAL_TIM_PeriodElapsedCallback+0x1a>
        contador_ms++; // Incrementa el contador de milisegundos
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002f00:	6013      	str	r3, [r2, #0]
    }
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	200000f4 	.word	0x200000f4
 8002f10:	20000148 	.word	0x20000148

08002f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f18:	b672      	cpsid	i
}
 8002f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f1c:	e7fe      	b.n	8002f1c <Error_Handler+0x8>
	...

08002f20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <HAL_MspInit+0x5c>)
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <HAL_MspInit+0x5c>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	6193      	str	r3, [r2, #24]
 8002f32:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <HAL_MspInit+0x5c>)
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_MspInit+0x5c>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	4a0e      	ldr	r2, [pc, #56]	; (8002f7c <HAL_MspInit+0x5c>)
 8002f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f48:	61d3      	str	r3, [r2, #28]
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_MspInit+0x5c>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_MspInit+0x60>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	4a04      	ldr	r2, [pc, #16]	; (8002f80 <HAL_MspInit+0x60>)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40010000 	.word	0x40010000

08002f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f94:	d10c      	bne.n	8002fb0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f96:	4b15      	ldr	r3, [pc, #84]	; (8002fec <HAL_TIM_Base_MspInit+0x68>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	4a14      	ldr	r2, [pc, #80]	; (8002fec <HAL_TIM_Base_MspInit+0x68>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	61d3      	str	r3, [r2, #28]
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_TIM_Base_MspInit+0x68>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002fae:	e018      	b.n	8002fe2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <HAL_TIM_Base_MspInit+0x6c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d113      	bne.n	8002fe2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <HAL_TIM_Base_MspInit+0x68>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4a0b      	ldr	r2, [pc, #44]	; (8002fec <HAL_TIM_Base_MspInit+0x68>)
 8002fc0:	f043 0304 	orr.w	r3, r3, #4
 8002fc4:	61d3      	str	r3, [r2, #28]
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_TIM_Base_MspInit+0x68>)
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	201e      	movs	r0, #30
 8002fd8:	f000 fa4b 	bl	8003472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002fdc:	201e      	movs	r0, #30
 8002fde:	f000 fa64 	bl	80034aa <HAL_NVIC_EnableIRQ>
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40000800 	.word	0x40000800

08002ff4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 0310 	add.w	r3, r7, #16
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003012:	d117      	bne.n	8003044 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_TIM_MspPostInit+0x58>)
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	4a0c      	ldr	r2, [pc, #48]	; (800304c <HAL_TIM_MspPostInit+0x58>)
 800301a:	f043 0304 	orr.w	r3, r3, #4
 800301e:	6193      	str	r3, [r2, #24]
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <HAL_TIM_MspPostInit+0x58>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 800302c:	2304      	movs	r3, #4
 800302e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003034:	2302      	movs	r3, #2
 8003036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8003038:	f107 0310 	add.w	r3, r7, #16
 800303c:	4619      	mov	r1, r3
 800303e:	4804      	ldr	r0, [pc, #16]	; (8003050 <HAL_TIM_MspPostInit+0x5c>)
 8003040:	f000 fa4e 	bl	80034e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003044:	bf00      	nop
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40021000 	.word	0x40021000
 8003050:	40010800 	.word	0x40010800

08003054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003058:	e7fe      	b.n	8003058 <NMI_Handler+0x4>

0800305a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800305e:	e7fe      	b.n	800305e <HardFault_Handler+0x4>

08003060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003064:	e7fe      	b.n	8003064 <MemManage_Handler+0x4>

08003066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800306a:	e7fe      	b.n	800306a <BusFault_Handler+0x4>

0800306c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003070:	e7fe      	b.n	8003070 <UsageFault_Handler+0x4>

08003072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr

0800308a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800309a:	f000 f8d3 	bl	8003244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FinalCarreraX_Pin);
 80030a6:	2040      	movs	r0, #64	; 0x40
 80030a8:	f000 fbe6 	bl	8003878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(FinalCarreraY_Pin);
 80030ac:	2080      	movs	r0, #128	; 0x80
 80030ae:	f000 fbe3 	bl	8003878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <TIM4_IRQHandler+0x10>)
 80030be:	f001 f96d 	bl	800439c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200000f4 	.word	0x200000f4

080030cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Fila1_EXTI_Pin);
 80030d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80030d4:	f000 fbd0 	bl	8003878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Fila2_EXTI_Pin);
 80030d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030dc:	f000 fbcc 	bl	8003878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Fila3_EXTI_Pin);
 80030e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80030e4:	f000 fbc8 	bl	8003878 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Fila4_EXTI_Pin);
 80030e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80030ec:	f000 fbc4 	bl	8003878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030f0:	bf00      	nop
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030fc:	4a14      	ldr	r2, [pc, #80]	; (8003150 <_sbrk+0x5c>)
 80030fe:	4b15      	ldr	r3, [pc, #84]	; (8003154 <_sbrk+0x60>)
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <_sbrk+0x64>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d102      	bne.n	8003116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <_sbrk+0x64>)
 8003112:	4a12      	ldr	r2, [pc, #72]	; (800315c <_sbrk+0x68>)
 8003114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <_sbrk+0x64>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4413      	add	r3, r2
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	429a      	cmp	r2, r3
 8003122:	d207      	bcs.n	8003134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003124:	f001 ff2c 	bl	8004f80 <__errno>
 8003128:	4603      	mov	r3, r0
 800312a:	220c      	movs	r2, #12
 800312c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800312e:	f04f 33ff 	mov.w	r3, #4294967295
 8003132:	e009      	b.n	8003148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <_sbrk+0x64>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800313a:	4b07      	ldr	r3, [pc, #28]	; (8003158 <_sbrk+0x64>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	4a05      	ldr	r2, [pc, #20]	; (8003158 <_sbrk+0x64>)
 8003144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003146:	68fb      	ldr	r3, [r7, #12]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20005000 	.word	0x20005000
 8003154:	00000400 	.word	0x00000400
 8003158:	20000150 	.word	0x20000150
 800315c:	200002a0 	.word	0x200002a0

08003160 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800316c:	f7ff fff8 	bl	8003160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003170:	480b      	ldr	r0, [pc, #44]	; (80031a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003172:	490c      	ldr	r1, [pc, #48]	; (80031a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003174:	4a0c      	ldr	r2, [pc, #48]	; (80031a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003178:	e002      	b.n	8003180 <LoopCopyDataInit>

0800317a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800317a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800317c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800317e:	3304      	adds	r3, #4

08003180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003184:	d3f9      	bcc.n	800317a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003186:	4a09      	ldr	r2, [pc, #36]	; (80031ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003188:	4c09      	ldr	r4, [pc, #36]	; (80031b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800318a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800318c:	e001      	b.n	8003192 <LoopFillZerobss>

0800318e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800318e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003190:	3204      	adds	r2, #4

08003192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003194:	d3fb      	bcc.n	800318e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003196:	f001 fef9 	bl	8004f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800319a:	f7ff faf7 	bl	800278c <main>
  bx lr
 800319e:	4770      	bx	lr
  ldr r0, =_sdata
 80031a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031a4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80031a8:	08005a54 	.word	0x08005a54
  ldr r2, =_sbss
 80031ac:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80031b0:	200002a0 	.word	0x200002a0

080031b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031b4:	e7fe      	b.n	80031b4 <ADC1_2_IRQHandler>
	...

080031b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <HAL_Init+0x28>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <HAL_Init+0x28>)
 80031c2:	f043 0310 	orr.w	r3, r3, #16
 80031c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031c8:	2003      	movs	r0, #3
 80031ca:	f000 f947 	bl	800345c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ce:	200f      	movs	r0, #15
 80031d0:	f000 f808 	bl	80031e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031d4:	f7ff fea4 	bl	8002f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40022000 	.word	0x40022000

080031e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_InitTick+0x54>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_InitTick+0x58>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	4619      	mov	r1, r3
 80031f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80031fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f95f 	bl	80034c6 <HAL_SYSTICK_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e00e      	b.n	8003230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b0f      	cmp	r3, #15
 8003216:	d80a      	bhi.n	800322e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003218:	2200      	movs	r2, #0
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	f000 f927 	bl	8003472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003224:	4a06      	ldr	r2, [pc, #24]	; (8003240 <HAL_InitTick+0x5c>)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	e000      	b.n	8003230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000020 	.word	0x20000020
 800323c:	20000028 	.word	0x20000028
 8003240:	20000024 	.word	0x20000024

08003244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_IncTick+0x1c>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_IncTick+0x20>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4413      	add	r3, r2
 8003254:	4a03      	ldr	r2, [pc, #12]	; (8003264 <HAL_IncTick+0x20>)
 8003256:	6013      	str	r3, [r2, #0]
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	20000028 	.word	0x20000028
 8003264:	20000154 	.word	0x20000154

08003268 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return uwTick;
 800326c:	4b02      	ldr	r3, [pc, #8]	; (8003278 <HAL_GetTick+0x10>)
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	20000154 	.word	0x20000154

0800327c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff fff0 	bl	8003268 <HAL_GetTick>
 8003288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d005      	beq.n	80032a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <HAL_Delay+0x44>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032a2:	bf00      	nop
 80032a4:	f7ff ffe0 	bl	8003268 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d8f7      	bhi.n	80032a4 <HAL_Delay+0x28>
  {
  }
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000028 	.word	0x20000028

080032c4 <__NVIC_SetPriorityGrouping>:
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e0:	4013      	ands	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032f6:	4a04      	ldr	r2, [pc, #16]	; (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	60d3      	str	r3, [r2, #12]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <__NVIC_GetPriorityGrouping>:
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <__NVIC_GetPriorityGrouping+0x18>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	f003 0307 	and.w	r3, r3, #7
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <__NVIC_EnableIRQ>:
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	2b00      	cmp	r3, #0
 8003338:	db0b      	blt.n	8003352 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	4906      	ldr	r1, [pc, #24]	; (800335c <__NVIC_EnableIRQ+0x34>)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	2001      	movs	r0, #1
 800334a:	fa00 f202 	lsl.w	r2, r0, r2
 800334e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr
 800335c:	e000e100 	.word	0xe000e100

08003360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	6039      	str	r1, [r7, #0]
 800336a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003370:	2b00      	cmp	r3, #0
 8003372:	db0a      	blt.n	800338a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	490c      	ldr	r1, [pc, #48]	; (80033ac <__NVIC_SetPriority+0x4c>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	0112      	lsls	r2, r2, #4
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	440b      	add	r3, r1
 8003384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003388:	e00a      	b.n	80033a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4908      	ldr	r1, [pc, #32]	; (80033b0 <__NVIC_SetPriority+0x50>)
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	3b04      	subs	r3, #4
 8003398:	0112      	lsls	r2, r2, #4
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	440b      	add	r3, r1
 800339e:	761a      	strb	r2, [r3, #24]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	e000e100 	.word	0xe000e100
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	; 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f1c3 0307 	rsb	r3, r3, #7
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	bf28      	it	cs
 80033d2:	2304      	movcs	r3, #4
 80033d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3304      	adds	r3, #4
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d902      	bls.n	80033e4 <NVIC_EncodePriority+0x30>
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	3b03      	subs	r3, #3
 80033e2:	e000      	b.n	80033e6 <NVIC_EncodePriority+0x32>
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43da      	mvns	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	401a      	ands	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	43d9      	mvns	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340c:	4313      	orrs	r3, r2
         );
}
 800340e:	4618      	mov	r0, r3
 8003410:	3724      	adds	r7, #36	; 0x24
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003428:	d301      	bcc.n	800342e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800342a:	2301      	movs	r3, #1
 800342c:	e00f      	b.n	800344e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800342e:	4a0a      	ldr	r2, [pc, #40]	; (8003458 <SysTick_Config+0x40>)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3b01      	subs	r3, #1
 8003434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003436:	210f      	movs	r1, #15
 8003438:	f04f 30ff 	mov.w	r0, #4294967295
 800343c:	f7ff ff90 	bl	8003360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <SysTick_Config+0x40>)
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003446:	4b04      	ldr	r3, [pc, #16]	; (8003458 <SysTick_Config+0x40>)
 8003448:	2207      	movs	r2, #7
 800344a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	e000e010 	.word	0xe000e010

0800345c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ff2d 	bl	80032c4 <__NVIC_SetPriorityGrouping>
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	4603      	mov	r3, r0
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003484:	f7ff ff42 	bl	800330c <__NVIC_GetPriorityGrouping>
 8003488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	6978      	ldr	r0, [r7, #20]
 8003490:	f7ff ff90 	bl	80033b4 <NVIC_EncodePriority>
 8003494:	4602      	mov	r2, r0
 8003496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff5f 	bl	8003360 <__NVIC_SetPriority>
}
 80034a2:	bf00      	nop
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff ff35 	bl	8003328 <__NVIC_EnableIRQ>
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ffa2 	bl	8003418 <SysTick_Config>
 80034d4:	4603      	mov	r3, r0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b08b      	sub	sp, #44	; 0x2c
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034f2:	e169      	b.n	80037c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80034f4:	2201      	movs	r2, #1
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	429a      	cmp	r2, r3
 800350e:	f040 8158 	bne.w	80037c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4a9a      	ldr	r2, [pc, #616]	; (8003780 <HAL_GPIO_Init+0x2a0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d05e      	beq.n	80035da <HAL_GPIO_Init+0xfa>
 800351c:	4a98      	ldr	r2, [pc, #608]	; (8003780 <HAL_GPIO_Init+0x2a0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d875      	bhi.n	800360e <HAL_GPIO_Init+0x12e>
 8003522:	4a98      	ldr	r2, [pc, #608]	; (8003784 <HAL_GPIO_Init+0x2a4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d058      	beq.n	80035da <HAL_GPIO_Init+0xfa>
 8003528:	4a96      	ldr	r2, [pc, #600]	; (8003784 <HAL_GPIO_Init+0x2a4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d86f      	bhi.n	800360e <HAL_GPIO_Init+0x12e>
 800352e:	4a96      	ldr	r2, [pc, #600]	; (8003788 <HAL_GPIO_Init+0x2a8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d052      	beq.n	80035da <HAL_GPIO_Init+0xfa>
 8003534:	4a94      	ldr	r2, [pc, #592]	; (8003788 <HAL_GPIO_Init+0x2a8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d869      	bhi.n	800360e <HAL_GPIO_Init+0x12e>
 800353a:	4a94      	ldr	r2, [pc, #592]	; (800378c <HAL_GPIO_Init+0x2ac>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d04c      	beq.n	80035da <HAL_GPIO_Init+0xfa>
 8003540:	4a92      	ldr	r2, [pc, #584]	; (800378c <HAL_GPIO_Init+0x2ac>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d863      	bhi.n	800360e <HAL_GPIO_Init+0x12e>
 8003546:	4a92      	ldr	r2, [pc, #584]	; (8003790 <HAL_GPIO_Init+0x2b0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d046      	beq.n	80035da <HAL_GPIO_Init+0xfa>
 800354c:	4a90      	ldr	r2, [pc, #576]	; (8003790 <HAL_GPIO_Init+0x2b0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d85d      	bhi.n	800360e <HAL_GPIO_Init+0x12e>
 8003552:	2b12      	cmp	r3, #18
 8003554:	d82a      	bhi.n	80035ac <HAL_GPIO_Init+0xcc>
 8003556:	2b12      	cmp	r3, #18
 8003558:	d859      	bhi.n	800360e <HAL_GPIO_Init+0x12e>
 800355a:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <HAL_GPIO_Init+0x80>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	080035db 	.word	0x080035db
 8003564:	080035b5 	.word	0x080035b5
 8003568:	080035c7 	.word	0x080035c7
 800356c:	08003609 	.word	0x08003609
 8003570:	0800360f 	.word	0x0800360f
 8003574:	0800360f 	.word	0x0800360f
 8003578:	0800360f 	.word	0x0800360f
 800357c:	0800360f 	.word	0x0800360f
 8003580:	0800360f 	.word	0x0800360f
 8003584:	0800360f 	.word	0x0800360f
 8003588:	0800360f 	.word	0x0800360f
 800358c:	0800360f 	.word	0x0800360f
 8003590:	0800360f 	.word	0x0800360f
 8003594:	0800360f 	.word	0x0800360f
 8003598:	0800360f 	.word	0x0800360f
 800359c:	0800360f 	.word	0x0800360f
 80035a0:	0800360f 	.word	0x0800360f
 80035a4:	080035bd 	.word	0x080035bd
 80035a8:	080035d1 	.word	0x080035d1
 80035ac:	4a79      	ldr	r2, [pc, #484]	; (8003794 <HAL_GPIO_Init+0x2b4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035b2:	e02c      	b.n	800360e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	623b      	str	r3, [r7, #32]
          break;
 80035ba:	e029      	b.n	8003610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	3304      	adds	r3, #4
 80035c2:	623b      	str	r3, [r7, #32]
          break;
 80035c4:	e024      	b.n	8003610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	3308      	adds	r3, #8
 80035cc:	623b      	str	r3, [r7, #32]
          break;
 80035ce:	e01f      	b.n	8003610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	330c      	adds	r3, #12
 80035d6:	623b      	str	r3, [r7, #32]
          break;
 80035d8:	e01a      	b.n	8003610 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d102      	bne.n	80035e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035e2:	2304      	movs	r3, #4
 80035e4:	623b      	str	r3, [r7, #32]
          break;
 80035e6:	e013      	b.n	8003610 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d105      	bne.n	80035fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035f0:	2308      	movs	r3, #8
 80035f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	611a      	str	r2, [r3, #16]
          break;
 80035fa:	e009      	b.n	8003610 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035fc:	2308      	movs	r3, #8
 80035fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	615a      	str	r2, [r3, #20]
          break;
 8003606:	e003      	b.n	8003610 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003608:	2300      	movs	r3, #0
 800360a:	623b      	str	r3, [r7, #32]
          break;
 800360c:	e000      	b.n	8003610 <HAL_GPIO_Init+0x130>
          break;
 800360e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2bff      	cmp	r3, #255	; 0xff
 8003614:	d801      	bhi.n	800361a <HAL_GPIO_Init+0x13a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	e001      	b.n	800361e <HAL_GPIO_Init+0x13e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3304      	adds	r3, #4
 800361e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2bff      	cmp	r3, #255	; 0xff
 8003624:	d802      	bhi.n	800362c <HAL_GPIO_Init+0x14c>
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	e002      	b.n	8003632 <HAL_GPIO_Init+0x152>
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	3b08      	subs	r3, #8
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	210f      	movs	r1, #15
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	401a      	ands	r2, r3
 8003644:	6a39      	ldr	r1, [r7, #32]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	fa01 f303 	lsl.w	r3, r1, r3
 800364c:	431a      	orrs	r2, r3
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80b1 	beq.w	80037c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003660:	4b4d      	ldr	r3, [pc, #308]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	4a4c      	ldr	r2, [pc, #304]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6193      	str	r3, [r2, #24]
 800366c:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <HAL_GPIO_Init+0x2b8>)
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003678:	4a48      	ldr	r2, [pc, #288]	; (800379c <HAL_GPIO_Init+0x2bc>)
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	089b      	lsrs	r3, r3, #2
 800367e:	3302      	adds	r3, #2
 8003680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003684:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	220f      	movs	r2, #15
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4013      	ands	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a40      	ldr	r2, [pc, #256]	; (80037a0 <HAL_GPIO_Init+0x2c0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d013      	beq.n	80036cc <HAL_GPIO_Init+0x1ec>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a3f      	ldr	r2, [pc, #252]	; (80037a4 <HAL_GPIO_Init+0x2c4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d00d      	beq.n	80036c8 <HAL_GPIO_Init+0x1e8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a3e      	ldr	r2, [pc, #248]	; (80037a8 <HAL_GPIO_Init+0x2c8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d007      	beq.n	80036c4 <HAL_GPIO_Init+0x1e4>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a3d      	ldr	r2, [pc, #244]	; (80037ac <HAL_GPIO_Init+0x2cc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d101      	bne.n	80036c0 <HAL_GPIO_Init+0x1e0>
 80036bc:	2303      	movs	r3, #3
 80036be:	e006      	b.n	80036ce <HAL_GPIO_Init+0x1ee>
 80036c0:	2304      	movs	r3, #4
 80036c2:	e004      	b.n	80036ce <HAL_GPIO_Init+0x1ee>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e002      	b.n	80036ce <HAL_GPIO_Init+0x1ee>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_GPIO_Init+0x1ee>
 80036cc:	2300      	movs	r3, #0
 80036ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d0:	f002 0203 	and.w	r2, r2, #3
 80036d4:	0092      	lsls	r2, r2, #2
 80036d6:	4093      	lsls	r3, r2
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036de:	492f      	ldr	r1, [pc, #188]	; (800379c <HAL_GPIO_Init+0x2bc>)
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	089b      	lsrs	r3, r3, #2
 80036e4:	3302      	adds	r3, #2
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d006      	beq.n	8003706 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036f8:	4b2d      	ldr	r3, [pc, #180]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	492c      	ldr	r1, [pc, #176]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	4313      	orrs	r3, r2
 8003702:	608b      	str	r3, [r1, #8]
 8003704:	e006      	b.n	8003714 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003706:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	43db      	mvns	r3, r3
 800370e:	4928      	ldr	r1, [pc, #160]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 8003710:	4013      	ands	r3, r2
 8003712:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d006      	beq.n	800372e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003720:	4b23      	ldr	r3, [pc, #140]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	4922      	ldr	r1, [pc, #136]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	60cb      	str	r3, [r1, #12]
 800372c:	e006      	b.n	800373c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	43db      	mvns	r3, r3
 8003736:	491e      	ldr	r1, [pc, #120]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 8003738:	4013      	ands	r3, r2
 800373a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d006      	beq.n	8003756 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003748:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	4918      	ldr	r1, [pc, #96]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]
 8003754:	e006      	b.n	8003764 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003756:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	43db      	mvns	r3, r3
 800375e:	4914      	ldr	r1, [pc, #80]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 8003760:	4013      	ands	r3, r2
 8003762:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d021      	beq.n	80037b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	490e      	ldr	r1, [pc, #56]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	600b      	str	r3, [r1, #0]
 800377c:	e021      	b.n	80037c2 <HAL_GPIO_Init+0x2e2>
 800377e:	bf00      	nop
 8003780:	10320000 	.word	0x10320000
 8003784:	10310000 	.word	0x10310000
 8003788:	10220000 	.word	0x10220000
 800378c:	10210000 	.word	0x10210000
 8003790:	10120000 	.word	0x10120000
 8003794:	10110000 	.word	0x10110000
 8003798:	40021000 	.word	0x40021000
 800379c:	40010000 	.word	0x40010000
 80037a0:	40010800 	.word	0x40010800
 80037a4:	40010c00 	.word	0x40010c00
 80037a8:	40011000 	.word	0x40011000
 80037ac:	40011400 	.word	0x40011400
 80037b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_GPIO_Init+0x304>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	4909      	ldr	r1, [pc, #36]	; (80037e4 <HAL_GPIO_Init+0x304>)
 80037be:	4013      	ands	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	3301      	adds	r3, #1
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	fa22 f303 	lsr.w	r3, r2, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f47f ae8e 	bne.w	80034f4 <HAL_GPIO_Init+0x14>
  }
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	372c      	adds	r7, #44	; 0x2c
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	40010400 	.word	0x40010400

080037e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	887b      	ldrh	r3, [r7, #2]
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
 8003804:	e001      	b.n	800380a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800380a:	7bfb      	ldrb	r3, [r7, #15]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr

08003816 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	460b      	mov	r3, r1
 8003820:	807b      	strh	r3, [r7, #2]
 8003822:	4613      	mov	r3, r2
 8003824:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003826:	787b      	ldrb	r3, [r7, #1]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800382c:	887a      	ldrh	r2, [r7, #2]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003832:	e003      	b.n	800383c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003834:	887b      	ldrh	r3, [r7, #2]
 8003836:	041a      	lsls	r2, r3, #16
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	611a      	str	r2, [r3, #16]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003858:	887a      	ldrh	r2, [r7, #2]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4013      	ands	r3, r2
 800385e:	041a      	lsls	r2, r3, #16
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	43d9      	mvns	r1, r3
 8003864:	887b      	ldrh	r3, [r7, #2]
 8003866:	400b      	ands	r3, r1
 8003868:	431a      	orrs	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	611a      	str	r2, [r3, #16]
}
 800386e:	bf00      	nop
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d006      	beq.n	800389c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800388e:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003894:	88fb      	ldrh	r3, [r7, #6]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fa22 	bl	8002ce0 <HAL_GPIO_EXTI_Callback>
  }
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40010400 	.word	0x40010400

080038a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e272      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8087 	beq.w	80039d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038c8:	4b92      	ldr	r3, [pc, #584]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 030c 	and.w	r3, r3, #12
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d00c      	beq.n	80038ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038d4:	4b8f      	ldr	r3, [pc, #572]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d112      	bne.n	8003906 <HAL_RCC_OscConfig+0x5e>
 80038e0:	4b8c      	ldr	r3, [pc, #560]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ec:	d10b      	bne.n	8003906 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ee:	4b89      	ldr	r3, [pc, #548]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d06c      	beq.n	80039d4 <HAL_RCC_OscConfig+0x12c>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d168      	bne.n	80039d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e24c      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390e:	d106      	bne.n	800391e <HAL_RCC_OscConfig+0x76>
 8003910:	4b80      	ldr	r3, [pc, #512]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a7f      	ldr	r2, [pc, #508]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	e02e      	b.n	800397c <HAL_RCC_OscConfig+0xd4>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0x98>
 8003926:	4b7b      	ldr	r3, [pc, #492]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a7a      	ldr	r2, [pc, #488]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 800392c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4b78      	ldr	r3, [pc, #480]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a77      	ldr	r2, [pc, #476]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e01d      	b.n	800397c <HAL_RCC_OscConfig+0xd4>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0xbc>
 800394a:	4b72      	ldr	r3, [pc, #456]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a71      	ldr	r2, [pc, #452]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b6f      	ldr	r3, [pc, #444]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a6e      	ldr	r2, [pc, #440]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e00b      	b.n	800397c <HAL_RCC_OscConfig+0xd4>
 8003964:	4b6b      	ldr	r3, [pc, #428]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a6a      	ldr	r2, [pc, #424]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 800396a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b68      	ldr	r3, [pc, #416]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a67      	ldr	r2, [pc, #412]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d013      	beq.n	80039ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7ff fc70 	bl	8003268 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800398c:	f7ff fc6c 	bl	8003268 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	; 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e200      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4b5d      	ldr	r3, [pc, #372]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0xe4>
 80039aa:	e014      	b.n	80039d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7ff fc5c 	bl	8003268 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b4:	f7ff fc58 	bl	8003268 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e1ec      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	4b53      	ldr	r3, [pc, #332]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x10c>
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d063      	beq.n	8003aaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039e2:	4b4c      	ldr	r3, [pc, #304]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039ee:	4b49      	ldr	r3, [pc, #292]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d11c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x18c>
 80039fa:	4b46      	ldr	r3, [pc, #280]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d116      	bne.n	8003a34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a06:	4b43      	ldr	r3, [pc, #268]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_RCC_OscConfig+0x176>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e1c0      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1e:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4939      	ldr	r1, [pc, #228]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	e03a      	b.n	8003aaa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3c:	4b36      	ldr	r3, [pc, #216]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a42:	f7ff fc11 	bl	8003268 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4a:	f7ff fc0d 	bl	8003268 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e1a1      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5c:	4b2d      	ldr	r3, [pc, #180]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	4b2a      	ldr	r3, [pc, #168]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4927      	ldr	r1, [pc, #156]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	600b      	str	r3, [r1, #0]
 8003a7c:	e015      	b.n	8003aaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7e:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <HAL_RCC_OscConfig+0x270>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7ff fbf0 	bl	8003268 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7ff fbec 	bl	8003268 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e180      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d03a      	beq.n	8003b2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d019      	beq.n	8003af2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abe:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <HAL_RCC_OscConfig+0x274>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac4:	f7ff fbd0 	bl	8003268 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003acc:	f7ff fbcc 	bl	8003268 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e160      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003aea:	2001      	movs	r0, #1
 8003aec:	f000 fa9c 	bl	8004028 <RCC_Delay>
 8003af0:	e01c      	b.n	8003b2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <HAL_RCC_OscConfig+0x274>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af8:	f7ff fbb6 	bl	8003268 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afe:	e00f      	b.n	8003b20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b00:	f7ff fbb2 	bl	8003268 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d908      	bls.n	8003b20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e146      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	42420000 	.word	0x42420000
 8003b1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b20:	4b92      	ldr	r3, [pc, #584]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e9      	bne.n	8003b00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80a6 	beq.w	8003c86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b3e:	4b8b      	ldr	r3, [pc, #556]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10d      	bne.n	8003b66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4a:	4b88      	ldr	r3, [pc, #544]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4a87      	ldr	r2, [pc, #540]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b54:	61d3      	str	r3, [r2, #28]
 8003b56:	4b85      	ldr	r3, [pc, #532]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b62:	2301      	movs	r3, #1
 8003b64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b66:	4b82      	ldr	r3, [pc, #520]	; (8003d70 <HAL_RCC_OscConfig+0x4c8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d118      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b72:	4b7f      	ldr	r3, [pc, #508]	; (8003d70 <HAL_RCC_OscConfig+0x4c8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a7e      	ldr	r2, [pc, #504]	; (8003d70 <HAL_RCC_OscConfig+0x4c8>)
 8003b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b7e:	f7ff fb73 	bl	8003268 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b86:	f7ff fb6f 	bl	8003268 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b64      	cmp	r3, #100	; 0x64
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e103      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b98:	4b75      	ldr	r3, [pc, #468]	; (8003d70 <HAL_RCC_OscConfig+0x4c8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d106      	bne.n	8003bba <HAL_RCC_OscConfig+0x312>
 8003bac:	4b6f      	ldr	r3, [pc, #444]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	4a6e      	ldr	r2, [pc, #440]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	6213      	str	r3, [r2, #32]
 8003bb8:	e02d      	b.n	8003c16 <HAL_RCC_OscConfig+0x36e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10c      	bne.n	8003bdc <HAL_RCC_OscConfig+0x334>
 8003bc2:	4b6a      	ldr	r3, [pc, #424]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4a69      	ldr	r2, [pc, #420]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6213      	str	r3, [r2, #32]
 8003bce:	4b67      	ldr	r3, [pc, #412]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	4a66      	ldr	r2, [pc, #408]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	f023 0304 	bic.w	r3, r3, #4
 8003bd8:	6213      	str	r3, [r2, #32]
 8003bda:	e01c      	b.n	8003c16 <HAL_RCC_OscConfig+0x36e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b05      	cmp	r3, #5
 8003be2:	d10c      	bne.n	8003bfe <HAL_RCC_OscConfig+0x356>
 8003be4:	4b61      	ldr	r3, [pc, #388]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	4a60      	ldr	r2, [pc, #384]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bea:	f043 0304 	orr.w	r3, r3, #4
 8003bee:	6213      	str	r3, [r2, #32]
 8003bf0:	4b5e      	ldr	r3, [pc, #376]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4a5d      	ldr	r2, [pc, #372]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6213      	str	r3, [r2, #32]
 8003bfc:	e00b      	b.n	8003c16 <HAL_RCC_OscConfig+0x36e>
 8003bfe:	4b5b      	ldr	r3, [pc, #364]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	4a5a      	ldr	r2, [pc, #360]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	6213      	str	r3, [r2, #32]
 8003c0a:	4b58      	ldr	r3, [pc, #352]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	4a57      	ldr	r2, [pc, #348]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c10:	f023 0304 	bic.w	r3, r3, #4
 8003c14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d015      	beq.n	8003c4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1e:	f7ff fb23 	bl	8003268 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c24:	e00a      	b.n	8003c3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c26:	f7ff fb1f 	bl	8003268 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e0b1      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3c:	4b4b      	ldr	r3, [pc, #300]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0ee      	beq.n	8003c26 <HAL_RCC_OscConfig+0x37e>
 8003c48:	e014      	b.n	8003c74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4a:	f7ff fb0d 	bl	8003268 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7ff fb09 	bl	8003268 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e09b      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c68:	4b40      	ldr	r3, [pc, #256]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1ee      	bne.n	8003c52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d105      	bne.n	8003c86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7a:	4b3c      	ldr	r3, [pc, #240]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	4a3b      	ldr	r2, [pc, #236]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8087 	beq.w	8003d9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c90:	4b36      	ldr	r3, [pc, #216]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d061      	beq.n	8003d60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d146      	bne.n	8003d32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca4:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <HAL_RCC_OscConfig+0x4cc>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003caa:	f7ff fadd 	bl	8003268 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb2:	f7ff fad9 	bl	8003268 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e06d      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc4:	4b29      	ldr	r3, [pc, #164]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f0      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd8:	d108      	bne.n	8003cec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cda:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	4921      	ldr	r1, [pc, #132]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cec:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a19      	ldr	r1, [r3, #32]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	491b      	ldr	r1, [pc, #108]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d04:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0a:	f7ff faad 	bl	8003268 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d12:	f7ff faa9 	bl	8003268 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e03d      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d24:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x46a>
 8003d30:	e035      	b.n	8003d9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d32:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <HAL_RCC_OscConfig+0x4cc>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7ff fa96 	bl	8003268 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d40:	f7ff fa92 	bl	8003268 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e026      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_RCC_OscConfig+0x4c4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x498>
 8003d5e:	e01e      	b.n	8003d9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d107      	bne.n	8003d78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e019      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40007000 	.word	0x40007000
 8003d74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_OscConfig+0x500>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d106      	bne.n	8003d9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000

08003dac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0d0      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b6a      	ldr	r3, [pc, #424]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d910      	bls.n	8003df0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b67      	ldr	r3, [pc, #412]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 0207 	bic.w	r2, r3, #7
 8003dd6:	4965      	ldr	r1, [pc, #404]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b63      	ldr	r3, [pc, #396]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0b8      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d020      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e08:	4b59      	ldr	r3, [pc, #356]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4a58      	ldr	r2, [pc, #352]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e20:	4b53      	ldr	r3, [pc, #332]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	4a52      	ldr	r2, [pc, #328]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e2c:	4b50      	ldr	r3, [pc, #320]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	494d      	ldr	r1, [pc, #308]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d040      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d115      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e07f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d107      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e6a:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e073      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	4b3d      	ldr	r3, [pc, #244]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e06b      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e8a:	4b39      	ldr	r3, [pc, #228]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f023 0203 	bic.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4936      	ldr	r1, [pc, #216]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e9c:	f7ff f9e4 	bl	8003268 <HAL_GetTick>
 8003ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	e00a      	b.n	8003eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea4:	f7ff f9e0 	bl	8003268 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e053      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eba:	4b2d      	ldr	r3, [pc, #180]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 020c 	and.w	r2, r3, #12
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d1eb      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d210      	bcs.n	8003efc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 0207 	bic.w	r2, r3, #7
 8003ee2:	4922      	ldr	r1, [pc, #136]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e032      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4916      	ldr	r1, [pc, #88]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	490e      	ldr	r1, [pc, #56]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f3a:	f000 f821 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_RCC_ClockConfig+0x1c4>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	490a      	ldr	r1, [pc, #40]	; (8003f74 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4c:	5ccb      	ldrb	r3, [r1, r3]
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	4a09      	ldr	r2, [pc, #36]	; (8003f78 <HAL_RCC_ClockConfig+0x1cc>)
 8003f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f56:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x1d0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff f942 	bl	80031e4 <HAL_InitTick>

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40022000 	.word	0x40022000
 8003f70:	40021000 	.word	0x40021000
 8003f74:	080059f4 	.word	0x080059f4
 8003f78:	20000020 	.word	0x20000020
 8003f7c:	20000024 	.word	0x20000024

08003f80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	2300      	movs	r3, #0
 8003f94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d002      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x30>
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x36>
 8003fae:	e027      	b.n	8004000 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fb0:	4b19      	ldr	r3, [pc, #100]	; (8004018 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fb2:	613b      	str	r3, [r7, #16]
      break;
 8003fb4:	e027      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	0c9b      	lsrs	r3, r3, #18
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	4a17      	ldr	r2, [pc, #92]	; (800401c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fc0:	5cd3      	ldrb	r3, [r2, r3]
 8003fc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d010      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fce:	4b11      	ldr	r3, [pc, #68]	; (8004014 <HAL_RCC_GetSysClockFreq+0x94>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	0c5b      	lsrs	r3, r3, #17
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	4a11      	ldr	r2, [pc, #68]	; (8004020 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fda:	5cd3      	ldrb	r3, [r2, r3]
 8003fdc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a0d      	ldr	r2, [pc, #52]	; (8004018 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fe2:	fb03 f202 	mul.w	r2, r3, r2
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fec:	617b      	str	r3, [r7, #20]
 8003fee:	e004      	b.n	8003ffa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a0c      	ldr	r2, [pc, #48]	; (8004024 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	613b      	str	r3, [r7, #16]
      break;
 8003ffe:	e002      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCC_GetSysClockFreq+0x98>)
 8004002:	613b      	str	r3, [r7, #16]
      break;
 8004004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004006:	693b      	ldr	r3, [r7, #16]
}
 8004008:	4618      	mov	r0, r3
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40021000 	.word	0x40021000
 8004018:	007a1200 	.word	0x007a1200
 800401c:	08005a04 	.word	0x08005a04
 8004020:	08005a14 	.word	0x08005a14
 8004024:	003d0900 	.word	0x003d0900

08004028 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <RCC_Delay+0x34>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <RCC_Delay+0x38>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0a5b      	lsrs	r3, r3, #9
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004044:	bf00      	nop
  }
  while (Delay --);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1e5a      	subs	r2, r3, #1
 800404a:	60fa      	str	r2, [r7, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f9      	bne.n	8004044 <RCC_Delay+0x1c>
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	20000020 	.word	0x20000020
 8004060:	10624dd3 	.word	0x10624dd3

08004064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e041      	b.n	80040fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fe ff7a 	bl	8002f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3304      	adds	r3, #4
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f000 fc30 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b01      	cmp	r3, #1
 8004116:	d001      	beq.n	800411c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e03a      	b.n	8004192 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a18      	ldr	r2, [pc, #96]	; (800419c <HAL_TIM_Base_Start_IT+0x98>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x58>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004146:	d009      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x58>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a14      	ldr	r2, [pc, #80]	; (80041a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x58>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a13      	ldr	r2, [pc, #76]	; (80041a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d111      	bne.n	8004180 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b06      	cmp	r3, #6
 800416c:	d010      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417e:	e007      	b.n	8004190 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr
 800419c:	40012c00 	.word	0x40012c00
 80041a0:	40000400 	.word	0x40000400
 80041a4:	40000800 	.word	0x40000800

080041a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e041      	b.n	800423e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f839 	bl	8004246 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f000 fb8e 	bl	8004908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr

08004258 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d109      	bne.n	800427c <HAL_TIM_PWM_Start+0x24>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	e022      	b.n	80042c2 <HAL_TIM_PWM_Start+0x6a>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b04      	cmp	r3, #4
 8004280:	d109      	bne.n	8004296 <HAL_TIM_PWM_Start+0x3e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b01      	cmp	r3, #1
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	e015      	b.n	80042c2 <HAL_TIM_PWM_Start+0x6a>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b08      	cmp	r3, #8
 800429a:	d109      	bne.n	80042b0 <HAL_TIM_PWM_Start+0x58>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	e008      	b.n	80042c2 <HAL_TIM_PWM_Start+0x6a>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e05e      	b.n	8004388 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d104      	bne.n	80042da <HAL_TIM_PWM_Start+0x82>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d8:	e013      	b.n	8004302 <HAL_TIM_PWM_Start+0xaa>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d104      	bne.n	80042ea <HAL_TIM_PWM_Start+0x92>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e8:	e00b      	b.n	8004302 <HAL_TIM_PWM_Start+0xaa>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d104      	bne.n	80042fa <HAL_TIM_PWM_Start+0xa2>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042f8:	e003      	b.n	8004302 <HAL_TIM_PWM_Start+0xaa>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2202      	movs	r2, #2
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2201      	movs	r2, #1
 8004308:	6839      	ldr	r1, [r7, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fd7c 	bl	8004e08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1e      	ldr	r2, [pc, #120]	; (8004390 <HAL_TIM_PWM_Start+0x138>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d107      	bne.n	800432a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004328:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a18      	ldr	r2, [pc, #96]	; (8004390 <HAL_TIM_PWM_Start+0x138>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00e      	beq.n	8004352 <HAL_TIM_PWM_Start+0xfa>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433c:	d009      	beq.n	8004352 <HAL_TIM_PWM_Start+0xfa>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a14      	ldr	r2, [pc, #80]	; (8004394 <HAL_TIM_PWM_Start+0x13c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d004      	beq.n	8004352 <HAL_TIM_PWM_Start+0xfa>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a12      	ldr	r2, [pc, #72]	; (8004398 <HAL_TIM_PWM_Start+0x140>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d111      	bne.n	8004376 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2b06      	cmp	r3, #6
 8004362:	d010      	beq.n	8004386 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004374:	e007      	b.n	8004386 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0201 	orr.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40012c00 	.word	0x40012c00
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800

0800439c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d122      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d11b      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0202 	mvn.w	r2, #2
 80043c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fa76 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 80043e4:	e005      	b.n	80043f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fa69 	bl	80048be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fa78 	bl	80048e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b04      	cmp	r3, #4
 8004404:	d122      	bne.n	800444c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b04      	cmp	r3, #4
 8004412:	d11b      	bne.n	800444c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0204 	mvn.w	r2, #4
 800441c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fa4c 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 8004438:	e005      	b.n	8004446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fa3f 	bl	80048be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fa4e 	bl	80048e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b08      	cmp	r3, #8
 8004458:	d122      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b08      	cmp	r3, #8
 8004466:	d11b      	bne.n	80044a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0208 	mvn.w	r2, #8
 8004470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2204      	movs	r2, #4
 8004476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fa22 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fa15 	bl	80048be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fa24 	bl	80048e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b10      	cmp	r3, #16
 80044ac:	d122      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d11b      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0210 	mvn.w	r2, #16
 80044c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2208      	movs	r2, #8
 80044ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f9f8 	bl	80048d0 <HAL_TIM_IC_CaptureCallback>
 80044e0:	e005      	b.n	80044ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f9eb 	bl	80048be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f9fa 	bl	80048e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b01      	cmp	r3, #1
 800450e:	d107      	bne.n	8004520 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0201 	mvn.w	r2, #1
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fe fce4 	bl	8002ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452a:	2b80      	cmp	r3, #128	; 0x80
 800452c:	d10e      	bne.n	800454c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004538:	2b80      	cmp	r3, #128	; 0x80
 800453a:	d107      	bne.n	800454c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fce9 	bl	8004f1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d10e      	bne.n	8004578 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004564:	2b40      	cmp	r3, #64	; 0x40
 8004566:	d107      	bne.n	8004578 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f9be 	bl	80048f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b20      	cmp	r3, #32
 8004584:	d10e      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b20      	cmp	r3, #32
 8004592:	d107      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0220 	mvn.w	r2, #32
 800459c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fcb4 	bl	8004f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e0ae      	b.n	8004728 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b0c      	cmp	r3, #12
 80045d6:	f200 809f 	bhi.w	8004718 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045da:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e0:	08004615 	.word	0x08004615
 80045e4:	08004719 	.word	0x08004719
 80045e8:	08004719 	.word	0x08004719
 80045ec:	08004719 	.word	0x08004719
 80045f0:	08004655 	.word	0x08004655
 80045f4:	08004719 	.word	0x08004719
 80045f8:	08004719 	.word	0x08004719
 80045fc:	08004719 	.word	0x08004719
 8004600:	08004697 	.word	0x08004697
 8004604:	08004719 	.word	0x08004719
 8004608:	08004719 	.word	0x08004719
 800460c:	08004719 	.word	0x08004719
 8004610:	080046d7 	.word	0x080046d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f9d6 	bl	80049cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0208 	orr.w	r2, r2, #8
 800462e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0204 	bic.w	r2, r2, #4
 800463e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6999      	ldr	r1, [r3, #24]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	619a      	str	r2, [r3, #24]
      break;
 8004652:	e064      	b.n	800471e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fa1c 	bl	8004a98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800466e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800467e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6999      	ldr	r1, [r3, #24]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	021a      	lsls	r2, r3, #8
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	619a      	str	r2, [r3, #24]
      break;
 8004694:	e043      	b.n	800471e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fa65 	bl	8004b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0208 	orr.w	r2, r2, #8
 80046b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0204 	bic.w	r2, r2, #4
 80046c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69d9      	ldr	r1, [r3, #28]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	61da      	str	r2, [r3, #28]
      break;
 80046d4:	e023      	b.n	800471e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 faaf 	bl	8004c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69da      	ldr	r2, [r3, #28]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69d9      	ldr	r1, [r3, #28]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	021a      	lsls	r2, r3, #8
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	61da      	str	r2, [r3, #28]
      break;
 8004716:	e002      	b.n	800471e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	75fb      	strb	r3, [r7, #23]
      break;
 800471c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004726:	7dfb      	ldrb	r3, [r7, #23]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_TIM_ConfigClockSource+0x1c>
 8004748:	2302      	movs	r3, #2
 800474a:	e0b4      	b.n	80048b6 <HAL_TIM_ConfigClockSource+0x186>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800476a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004784:	d03e      	beq.n	8004804 <HAL_TIM_ConfigClockSource+0xd4>
 8004786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478a:	f200 8087 	bhi.w	800489c <HAL_TIM_ConfigClockSource+0x16c>
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004792:	f000 8086 	beq.w	80048a2 <HAL_TIM_ConfigClockSource+0x172>
 8004796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479a:	d87f      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
 800479c:	2b70      	cmp	r3, #112	; 0x70
 800479e:	d01a      	beq.n	80047d6 <HAL_TIM_ConfigClockSource+0xa6>
 80047a0:	2b70      	cmp	r3, #112	; 0x70
 80047a2:	d87b      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
 80047a4:	2b60      	cmp	r3, #96	; 0x60
 80047a6:	d050      	beq.n	800484a <HAL_TIM_ConfigClockSource+0x11a>
 80047a8:	2b60      	cmp	r3, #96	; 0x60
 80047aa:	d877      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
 80047ac:	2b50      	cmp	r3, #80	; 0x50
 80047ae:	d03c      	beq.n	800482a <HAL_TIM_ConfigClockSource+0xfa>
 80047b0:	2b50      	cmp	r3, #80	; 0x50
 80047b2:	d873      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d058      	beq.n	800486a <HAL_TIM_ConfigClockSource+0x13a>
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d86f      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
 80047bc:	2b30      	cmp	r3, #48	; 0x30
 80047be:	d064      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x15a>
 80047c0:	2b30      	cmp	r3, #48	; 0x30
 80047c2:	d86b      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d060      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x15a>
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d867      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d05c      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x15a>
 80047d0:	2b10      	cmp	r3, #16
 80047d2:	d05a      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x15a>
 80047d4:	e062      	b.n	800489c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047e6:	f000 faf0 	bl	8004dca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	609a      	str	r2, [r3, #8]
      break;
 8004802:	e04f      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004814:	f000 fad9 	bl	8004dca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004826:	609a      	str	r2, [r3, #8]
      break;
 8004828:	e03c      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004836:	461a      	mov	r2, r3
 8004838:	f000 fa50 	bl	8004cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2150      	movs	r1, #80	; 0x50
 8004842:	4618      	mov	r0, r3
 8004844:	f000 faa7 	bl	8004d96 <TIM_ITRx_SetConfig>
      break;
 8004848:	e02c      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004856:	461a      	mov	r2, r3
 8004858:	f000 fa6e 	bl	8004d38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2160      	movs	r1, #96	; 0x60
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fa97 	bl	8004d96 <TIM_ITRx_SetConfig>
      break;
 8004868:	e01c      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004876:	461a      	mov	r2, r3
 8004878:	f000 fa30 	bl	8004cdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2140      	movs	r1, #64	; 0x40
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fa87 	bl	8004d96 <TIM_ITRx_SetConfig>
      break;
 8004888:	e00c      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4619      	mov	r1, r3
 8004894:	4610      	mov	r0, r2
 8004896:	f000 fa7e 	bl	8004d96 <TIM_ITRx_SetConfig>
      break;
 800489a:	e003      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      break;
 80048a0:	e000      	b.n	80048a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr

080048d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr

080048e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr
	...

08004908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a29      	ldr	r2, [pc, #164]	; (80049c0 <TIM_Base_SetConfig+0xb8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00b      	beq.n	8004938 <TIM_Base_SetConfig+0x30>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004926:	d007      	beq.n	8004938 <TIM_Base_SetConfig+0x30>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <TIM_Base_SetConfig+0xbc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_Base_SetConfig+0x30>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a25      	ldr	r2, [pc, #148]	; (80049c8 <TIM_Base_SetConfig+0xc0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d108      	bne.n	800494a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1c      	ldr	r2, [pc, #112]	; (80049c0 <TIM_Base_SetConfig+0xb8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00b      	beq.n	800496a <TIM_Base_SetConfig+0x62>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004958:	d007      	beq.n	800496a <TIM_Base_SetConfig+0x62>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <TIM_Base_SetConfig+0xbc>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_Base_SetConfig+0x62>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <TIM_Base_SetConfig+0xc0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d108      	bne.n	800497c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a07      	ldr	r2, [pc, #28]	; (80049c0 <TIM_Base_SetConfig+0xb8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d103      	bne.n	80049b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	615a      	str	r2, [r3, #20]
}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40000400 	.word	0x40000400
 80049c8:	40000800 	.word	0x40000800

080049cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f023 0201 	bic.w	r2, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0303 	bic.w	r3, r3, #3
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f023 0302 	bic.w	r3, r3, #2
 8004a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a1c      	ldr	r2, [pc, #112]	; (8004a94 <TIM_OC1_SetConfig+0xc8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d10c      	bne.n	8004a42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f023 0308 	bic.w	r3, r3, #8
 8004a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f023 0304 	bic.w	r3, r3, #4
 8004a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <TIM_OC1_SetConfig+0xc8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d111      	bne.n	8004a6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	621a      	str	r2, [r3, #32]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40012c00 	.word	0x40012c00

08004a98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f023 0210 	bic.w	r2, r3, #16
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f023 0320 	bic.w	r3, r3, #32
 8004ae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <TIM_OC2_SetConfig+0xd0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d10d      	bne.n	8004b14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a14      	ldr	r2, [pc, #80]	; (8004b68 <TIM_OC2_SetConfig+0xd0>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d113      	bne.n	8004b44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	621a      	str	r2, [r3, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	40012c00 	.word	0x40012c00

08004b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <TIM_OC3_SetConfig+0xd0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d10d      	bne.n	8004be6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a14      	ldr	r2, [pc, #80]	; (8004c3c <TIM_OC3_SetConfig+0xd0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d113      	bne.n	8004c16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	621a      	str	r2, [r3, #32]
}
 8004c30:	bf00      	nop
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40012c00 	.word	0x40012c00

08004c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	021b      	lsls	r3, r3, #8
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	031b      	lsls	r3, r3, #12
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a0f      	ldr	r2, [pc, #60]	; (8004cd8 <TIM_OC4_SetConfig+0x98>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d109      	bne.n	8004cb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	019b      	lsls	r3, r3, #6
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	621a      	str	r2, [r3, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr
 8004cd8:	40012c00 	.word	0x40012c00

08004cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	f023 0201 	bic.w	r2, r3, #1
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f023 030a 	bic.w	r3, r3, #10
 8004d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	621a      	str	r2, [r3, #32]
}
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	f023 0210 	bic.w	r2, r3, #16
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	031b      	lsls	r3, r3, #12
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	621a      	str	r2, [r3, #32]
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr

08004d96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b085      	sub	sp, #20
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f043 0307 	orr.w	r3, r3, #7
 8004db8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	bf00      	nop
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr

08004dca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b087      	sub	sp, #28
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	607a      	str	r2, [r7, #4]
 8004dd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004de4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	021a      	lsls	r2, r3, #8
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	609a      	str	r2, [r3, #8]
}
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr

08004e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a1a      	ldr	r2, [r3, #32]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a1a      	ldr	r2, [r3, #32]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e40:	431a      	orrs	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr

08004e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e046      	b.n	8004ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00e      	beq.n	8004eca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb4:	d009      	beq.n	8004eca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a12      	ldr	r2, [pc, #72]	; (8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a10      	ldr	r2, [pc, #64]	; (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr
 8004f00:	40012c00 	.word	0x40012c00
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800

08004f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bc80      	pop	{r7}
 8004f1c:	4770      	bx	lr

08004f1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr

08004f30 <siprintf>:
 8004f30:	b40e      	push	{r1, r2, r3}
 8004f32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f36:	b500      	push	{lr}
 8004f38:	b09c      	sub	sp, #112	; 0x70
 8004f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f3c:	9002      	str	r0, [sp, #8]
 8004f3e:	9006      	str	r0, [sp, #24]
 8004f40:	9107      	str	r1, [sp, #28]
 8004f42:	9104      	str	r1, [sp, #16]
 8004f44:	4808      	ldr	r0, [pc, #32]	; (8004f68 <siprintf+0x38>)
 8004f46:	4909      	ldr	r1, [pc, #36]	; (8004f6c <siprintf+0x3c>)
 8004f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f4c:	9105      	str	r1, [sp, #20]
 8004f4e:	6800      	ldr	r0, [r0, #0]
 8004f50:	a902      	add	r1, sp, #8
 8004f52:	9301      	str	r3, [sp, #4]
 8004f54:	f000 f98e 	bl	8005274 <_svfiprintf_r>
 8004f58:	2200      	movs	r2, #0
 8004f5a:	9b02      	ldr	r3, [sp, #8]
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	b01c      	add	sp, #112	; 0x70
 8004f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f64:	b003      	add	sp, #12
 8004f66:	4770      	bx	lr
 8004f68:	20000078 	.word	0x20000078
 8004f6c:	ffff0208 	.word	0xffff0208

08004f70 <memset>:
 8004f70:	4603      	mov	r3, r0
 8004f72:	4402      	add	r2, r0
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d100      	bne.n	8004f7a <memset+0xa>
 8004f78:	4770      	bx	lr
 8004f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7e:	e7f9      	b.n	8004f74 <memset+0x4>

08004f80 <__errno>:
 8004f80:	4b01      	ldr	r3, [pc, #4]	; (8004f88 <__errno+0x8>)
 8004f82:	6818      	ldr	r0, [r3, #0]
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	20000078 	.word	0x20000078

08004f8c <__libc_init_array>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	2600      	movs	r6, #0
 8004f90:	4d0c      	ldr	r5, [pc, #48]	; (8004fc4 <__libc_init_array+0x38>)
 8004f92:	4c0d      	ldr	r4, [pc, #52]	; (8004fc8 <__libc_init_array+0x3c>)
 8004f94:	1b64      	subs	r4, r4, r5
 8004f96:	10a4      	asrs	r4, r4, #2
 8004f98:	42a6      	cmp	r6, r4
 8004f9a:	d109      	bne.n	8004fb0 <__libc_init_array+0x24>
 8004f9c:	f000 fc7a 	bl	8005894 <_init>
 8004fa0:	2600      	movs	r6, #0
 8004fa2:	4d0a      	ldr	r5, [pc, #40]	; (8004fcc <__libc_init_array+0x40>)
 8004fa4:	4c0a      	ldr	r4, [pc, #40]	; (8004fd0 <__libc_init_array+0x44>)
 8004fa6:	1b64      	subs	r4, r4, r5
 8004fa8:	10a4      	asrs	r4, r4, #2
 8004faa:	42a6      	cmp	r6, r4
 8004fac:	d105      	bne.n	8004fba <__libc_init_array+0x2e>
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
 8004fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb4:	4798      	blx	r3
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	e7ee      	b.n	8004f98 <__libc_init_array+0xc>
 8004fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fbe:	4798      	blx	r3
 8004fc0:	3601      	adds	r6, #1
 8004fc2:	e7f2      	b.n	8004faa <__libc_init_array+0x1e>
 8004fc4:	08005a4c 	.word	0x08005a4c
 8004fc8:	08005a4c 	.word	0x08005a4c
 8004fcc:	08005a4c 	.word	0x08005a4c
 8004fd0:	08005a50 	.word	0x08005a50

08004fd4 <__retarget_lock_acquire_recursive>:
 8004fd4:	4770      	bx	lr

08004fd6 <__retarget_lock_release_recursive>:
 8004fd6:	4770      	bx	lr

08004fd8 <_free_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4605      	mov	r5, r0
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	d040      	beq.n	8005062 <_free_r+0x8a>
 8004fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fe4:	1f0c      	subs	r4, r1, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bfb8      	it	lt
 8004fea:	18e4      	addlt	r4, r4, r3
 8004fec:	f000 f8dc 	bl	80051a8 <__malloc_lock>
 8004ff0:	4a1c      	ldr	r2, [pc, #112]	; (8005064 <_free_r+0x8c>)
 8004ff2:	6813      	ldr	r3, [r2, #0]
 8004ff4:	b933      	cbnz	r3, 8005004 <_free_r+0x2c>
 8004ff6:	6063      	str	r3, [r4, #4]
 8004ff8:	6014      	str	r4, [r2, #0]
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005000:	f000 b8d8 	b.w	80051b4 <__malloc_unlock>
 8005004:	42a3      	cmp	r3, r4
 8005006:	d908      	bls.n	800501a <_free_r+0x42>
 8005008:	6820      	ldr	r0, [r4, #0]
 800500a:	1821      	adds	r1, r4, r0
 800500c:	428b      	cmp	r3, r1
 800500e:	bf01      	itttt	eq
 8005010:	6819      	ldreq	r1, [r3, #0]
 8005012:	685b      	ldreq	r3, [r3, #4]
 8005014:	1809      	addeq	r1, r1, r0
 8005016:	6021      	streq	r1, [r4, #0]
 8005018:	e7ed      	b.n	8004ff6 <_free_r+0x1e>
 800501a:	461a      	mov	r2, r3
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	b10b      	cbz	r3, 8005024 <_free_r+0x4c>
 8005020:	42a3      	cmp	r3, r4
 8005022:	d9fa      	bls.n	800501a <_free_r+0x42>
 8005024:	6811      	ldr	r1, [r2, #0]
 8005026:	1850      	adds	r0, r2, r1
 8005028:	42a0      	cmp	r0, r4
 800502a:	d10b      	bne.n	8005044 <_free_r+0x6c>
 800502c:	6820      	ldr	r0, [r4, #0]
 800502e:	4401      	add	r1, r0
 8005030:	1850      	adds	r0, r2, r1
 8005032:	4283      	cmp	r3, r0
 8005034:	6011      	str	r1, [r2, #0]
 8005036:	d1e0      	bne.n	8004ffa <_free_r+0x22>
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4408      	add	r0, r1
 800503e:	6010      	str	r0, [r2, #0]
 8005040:	6053      	str	r3, [r2, #4]
 8005042:	e7da      	b.n	8004ffa <_free_r+0x22>
 8005044:	d902      	bls.n	800504c <_free_r+0x74>
 8005046:	230c      	movs	r3, #12
 8005048:	602b      	str	r3, [r5, #0]
 800504a:	e7d6      	b.n	8004ffa <_free_r+0x22>
 800504c:	6820      	ldr	r0, [r4, #0]
 800504e:	1821      	adds	r1, r4, r0
 8005050:	428b      	cmp	r3, r1
 8005052:	bf01      	itttt	eq
 8005054:	6819      	ldreq	r1, [r3, #0]
 8005056:	685b      	ldreq	r3, [r3, #4]
 8005058:	1809      	addeq	r1, r1, r0
 800505a:	6021      	streq	r1, [r4, #0]
 800505c:	6063      	str	r3, [r4, #4]
 800505e:	6054      	str	r4, [r2, #4]
 8005060:	e7cb      	b.n	8004ffa <_free_r+0x22>
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	20000298 	.word	0x20000298

08005068 <sbrk_aligned>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	4e0e      	ldr	r6, [pc, #56]	; (80050a4 <sbrk_aligned+0x3c>)
 800506c:	460c      	mov	r4, r1
 800506e:	6831      	ldr	r1, [r6, #0]
 8005070:	4605      	mov	r5, r0
 8005072:	b911      	cbnz	r1, 800507a <sbrk_aligned+0x12>
 8005074:	f000 fbaa 	bl	80057cc <_sbrk_r>
 8005078:	6030      	str	r0, [r6, #0]
 800507a:	4621      	mov	r1, r4
 800507c:	4628      	mov	r0, r5
 800507e:	f000 fba5 	bl	80057cc <_sbrk_r>
 8005082:	1c43      	adds	r3, r0, #1
 8005084:	d00a      	beq.n	800509c <sbrk_aligned+0x34>
 8005086:	1cc4      	adds	r4, r0, #3
 8005088:	f024 0403 	bic.w	r4, r4, #3
 800508c:	42a0      	cmp	r0, r4
 800508e:	d007      	beq.n	80050a0 <sbrk_aligned+0x38>
 8005090:	1a21      	subs	r1, r4, r0
 8005092:	4628      	mov	r0, r5
 8005094:	f000 fb9a 	bl	80057cc <_sbrk_r>
 8005098:	3001      	adds	r0, #1
 800509a:	d101      	bne.n	80050a0 <sbrk_aligned+0x38>
 800509c:	f04f 34ff 	mov.w	r4, #4294967295
 80050a0:	4620      	mov	r0, r4
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	2000029c 	.word	0x2000029c

080050a8 <_malloc_r>:
 80050a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050ac:	1ccd      	adds	r5, r1, #3
 80050ae:	f025 0503 	bic.w	r5, r5, #3
 80050b2:	3508      	adds	r5, #8
 80050b4:	2d0c      	cmp	r5, #12
 80050b6:	bf38      	it	cc
 80050b8:	250c      	movcc	r5, #12
 80050ba:	2d00      	cmp	r5, #0
 80050bc:	4607      	mov	r7, r0
 80050be:	db01      	blt.n	80050c4 <_malloc_r+0x1c>
 80050c0:	42a9      	cmp	r1, r5
 80050c2:	d905      	bls.n	80050d0 <_malloc_r+0x28>
 80050c4:	230c      	movs	r3, #12
 80050c6:	2600      	movs	r6, #0
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	4630      	mov	r0, r6
 80050cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80051a4 <_malloc_r+0xfc>
 80050d4:	f000 f868 	bl	80051a8 <__malloc_lock>
 80050d8:	f8d8 3000 	ldr.w	r3, [r8]
 80050dc:	461c      	mov	r4, r3
 80050de:	bb5c      	cbnz	r4, 8005138 <_malloc_r+0x90>
 80050e0:	4629      	mov	r1, r5
 80050e2:	4638      	mov	r0, r7
 80050e4:	f7ff ffc0 	bl	8005068 <sbrk_aligned>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	4604      	mov	r4, r0
 80050ec:	d155      	bne.n	800519a <_malloc_r+0xf2>
 80050ee:	f8d8 4000 	ldr.w	r4, [r8]
 80050f2:	4626      	mov	r6, r4
 80050f4:	2e00      	cmp	r6, #0
 80050f6:	d145      	bne.n	8005184 <_malloc_r+0xdc>
 80050f8:	2c00      	cmp	r4, #0
 80050fa:	d048      	beq.n	800518e <_malloc_r+0xe6>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	4631      	mov	r1, r6
 8005100:	4638      	mov	r0, r7
 8005102:	eb04 0903 	add.w	r9, r4, r3
 8005106:	f000 fb61 	bl	80057cc <_sbrk_r>
 800510a:	4581      	cmp	r9, r0
 800510c:	d13f      	bne.n	800518e <_malloc_r+0xe6>
 800510e:	6821      	ldr	r1, [r4, #0]
 8005110:	4638      	mov	r0, r7
 8005112:	1a6d      	subs	r5, r5, r1
 8005114:	4629      	mov	r1, r5
 8005116:	f7ff ffa7 	bl	8005068 <sbrk_aligned>
 800511a:	3001      	adds	r0, #1
 800511c:	d037      	beq.n	800518e <_malloc_r+0xe6>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	442b      	add	r3, r5
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	f8d8 3000 	ldr.w	r3, [r8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d038      	beq.n	800519e <_malloc_r+0xf6>
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	42a2      	cmp	r2, r4
 8005130:	d12b      	bne.n	800518a <_malloc_r+0xe2>
 8005132:	2200      	movs	r2, #0
 8005134:	605a      	str	r2, [r3, #4]
 8005136:	e00f      	b.n	8005158 <_malloc_r+0xb0>
 8005138:	6822      	ldr	r2, [r4, #0]
 800513a:	1b52      	subs	r2, r2, r5
 800513c:	d41f      	bmi.n	800517e <_malloc_r+0xd6>
 800513e:	2a0b      	cmp	r2, #11
 8005140:	d917      	bls.n	8005172 <_malloc_r+0xca>
 8005142:	1961      	adds	r1, r4, r5
 8005144:	42a3      	cmp	r3, r4
 8005146:	6025      	str	r5, [r4, #0]
 8005148:	bf18      	it	ne
 800514a:	6059      	strne	r1, [r3, #4]
 800514c:	6863      	ldr	r3, [r4, #4]
 800514e:	bf08      	it	eq
 8005150:	f8c8 1000 	streq.w	r1, [r8]
 8005154:	5162      	str	r2, [r4, r5]
 8005156:	604b      	str	r3, [r1, #4]
 8005158:	4638      	mov	r0, r7
 800515a:	f104 060b 	add.w	r6, r4, #11
 800515e:	f000 f829 	bl	80051b4 <__malloc_unlock>
 8005162:	f026 0607 	bic.w	r6, r6, #7
 8005166:	1d23      	adds	r3, r4, #4
 8005168:	1af2      	subs	r2, r6, r3
 800516a:	d0ae      	beq.n	80050ca <_malloc_r+0x22>
 800516c:	1b9b      	subs	r3, r3, r6
 800516e:	50a3      	str	r3, [r4, r2]
 8005170:	e7ab      	b.n	80050ca <_malloc_r+0x22>
 8005172:	42a3      	cmp	r3, r4
 8005174:	6862      	ldr	r2, [r4, #4]
 8005176:	d1dd      	bne.n	8005134 <_malloc_r+0x8c>
 8005178:	f8c8 2000 	str.w	r2, [r8]
 800517c:	e7ec      	b.n	8005158 <_malloc_r+0xb0>
 800517e:	4623      	mov	r3, r4
 8005180:	6864      	ldr	r4, [r4, #4]
 8005182:	e7ac      	b.n	80050de <_malloc_r+0x36>
 8005184:	4634      	mov	r4, r6
 8005186:	6876      	ldr	r6, [r6, #4]
 8005188:	e7b4      	b.n	80050f4 <_malloc_r+0x4c>
 800518a:	4613      	mov	r3, r2
 800518c:	e7cc      	b.n	8005128 <_malloc_r+0x80>
 800518e:	230c      	movs	r3, #12
 8005190:	4638      	mov	r0, r7
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	f000 f80e 	bl	80051b4 <__malloc_unlock>
 8005198:	e797      	b.n	80050ca <_malloc_r+0x22>
 800519a:	6025      	str	r5, [r4, #0]
 800519c:	e7dc      	b.n	8005158 <_malloc_r+0xb0>
 800519e:	605b      	str	r3, [r3, #4]
 80051a0:	deff      	udf	#255	; 0xff
 80051a2:	bf00      	nop
 80051a4:	20000298 	.word	0x20000298

080051a8 <__malloc_lock>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__malloc_lock+0x8>)
 80051aa:	f7ff bf13 	b.w	8004fd4 <__retarget_lock_acquire_recursive>
 80051ae:	bf00      	nop
 80051b0:	20000294 	.word	0x20000294

080051b4 <__malloc_unlock>:
 80051b4:	4801      	ldr	r0, [pc, #4]	; (80051bc <__malloc_unlock+0x8>)
 80051b6:	f7ff bf0e 	b.w	8004fd6 <__retarget_lock_release_recursive>
 80051ba:	bf00      	nop
 80051bc:	20000294 	.word	0x20000294

080051c0 <__ssputs_r>:
 80051c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c4:	461f      	mov	r7, r3
 80051c6:	688e      	ldr	r6, [r1, #8]
 80051c8:	4682      	mov	sl, r0
 80051ca:	42be      	cmp	r6, r7
 80051cc:	460c      	mov	r4, r1
 80051ce:	4690      	mov	r8, r2
 80051d0:	680b      	ldr	r3, [r1, #0]
 80051d2:	d82c      	bhi.n	800522e <__ssputs_r+0x6e>
 80051d4:	898a      	ldrh	r2, [r1, #12]
 80051d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051da:	d026      	beq.n	800522a <__ssputs_r+0x6a>
 80051dc:	6965      	ldr	r5, [r4, #20]
 80051de:	6909      	ldr	r1, [r1, #16]
 80051e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051e4:	eba3 0901 	sub.w	r9, r3, r1
 80051e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051ec:	1c7b      	adds	r3, r7, #1
 80051ee:	444b      	add	r3, r9
 80051f0:	106d      	asrs	r5, r5, #1
 80051f2:	429d      	cmp	r5, r3
 80051f4:	bf38      	it	cc
 80051f6:	461d      	movcc	r5, r3
 80051f8:	0553      	lsls	r3, r2, #21
 80051fa:	d527      	bpl.n	800524c <__ssputs_r+0x8c>
 80051fc:	4629      	mov	r1, r5
 80051fe:	f7ff ff53 	bl	80050a8 <_malloc_r>
 8005202:	4606      	mov	r6, r0
 8005204:	b360      	cbz	r0, 8005260 <__ssputs_r+0xa0>
 8005206:	464a      	mov	r2, r9
 8005208:	6921      	ldr	r1, [r4, #16]
 800520a:	f000 fafd 	bl	8005808 <memcpy>
 800520e:	89a3      	ldrh	r3, [r4, #12]
 8005210:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005218:	81a3      	strh	r3, [r4, #12]
 800521a:	6126      	str	r6, [r4, #16]
 800521c:	444e      	add	r6, r9
 800521e:	6026      	str	r6, [r4, #0]
 8005220:	463e      	mov	r6, r7
 8005222:	6165      	str	r5, [r4, #20]
 8005224:	eba5 0509 	sub.w	r5, r5, r9
 8005228:	60a5      	str	r5, [r4, #8]
 800522a:	42be      	cmp	r6, r7
 800522c:	d900      	bls.n	8005230 <__ssputs_r+0x70>
 800522e:	463e      	mov	r6, r7
 8005230:	4632      	mov	r2, r6
 8005232:	4641      	mov	r1, r8
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	f000 faaf 	bl	8005798 <memmove>
 800523a:	2000      	movs	r0, #0
 800523c:	68a3      	ldr	r3, [r4, #8]
 800523e:	1b9b      	subs	r3, r3, r6
 8005240:	60a3      	str	r3, [r4, #8]
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	4433      	add	r3, r6
 8005246:	6023      	str	r3, [r4, #0]
 8005248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524c:	462a      	mov	r2, r5
 800524e:	f000 fae9 	bl	8005824 <_realloc_r>
 8005252:	4606      	mov	r6, r0
 8005254:	2800      	cmp	r0, #0
 8005256:	d1e0      	bne.n	800521a <__ssputs_r+0x5a>
 8005258:	4650      	mov	r0, sl
 800525a:	6921      	ldr	r1, [r4, #16]
 800525c:	f7ff febc 	bl	8004fd8 <_free_r>
 8005260:	230c      	movs	r3, #12
 8005262:	f8ca 3000 	str.w	r3, [sl]
 8005266:	89a3      	ldrh	r3, [r4, #12]
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005270:	81a3      	strh	r3, [r4, #12]
 8005272:	e7e9      	b.n	8005248 <__ssputs_r+0x88>

08005274 <_svfiprintf_r>:
 8005274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005278:	4698      	mov	r8, r3
 800527a:	898b      	ldrh	r3, [r1, #12]
 800527c:	4607      	mov	r7, r0
 800527e:	061b      	lsls	r3, r3, #24
 8005280:	460d      	mov	r5, r1
 8005282:	4614      	mov	r4, r2
 8005284:	b09d      	sub	sp, #116	; 0x74
 8005286:	d50e      	bpl.n	80052a6 <_svfiprintf_r+0x32>
 8005288:	690b      	ldr	r3, [r1, #16]
 800528a:	b963      	cbnz	r3, 80052a6 <_svfiprintf_r+0x32>
 800528c:	2140      	movs	r1, #64	; 0x40
 800528e:	f7ff ff0b 	bl	80050a8 <_malloc_r>
 8005292:	6028      	str	r0, [r5, #0]
 8005294:	6128      	str	r0, [r5, #16]
 8005296:	b920      	cbnz	r0, 80052a2 <_svfiprintf_r+0x2e>
 8005298:	230c      	movs	r3, #12
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	e0d0      	b.n	8005444 <_svfiprintf_r+0x1d0>
 80052a2:	2340      	movs	r3, #64	; 0x40
 80052a4:	616b      	str	r3, [r5, #20]
 80052a6:	2300      	movs	r3, #0
 80052a8:	9309      	str	r3, [sp, #36]	; 0x24
 80052aa:	2320      	movs	r3, #32
 80052ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052b0:	2330      	movs	r3, #48	; 0x30
 80052b2:	f04f 0901 	mov.w	r9, #1
 80052b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80052ba:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800545c <_svfiprintf_r+0x1e8>
 80052be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052c2:	4623      	mov	r3, r4
 80052c4:	469a      	mov	sl, r3
 80052c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052ca:	b10a      	cbz	r2, 80052d0 <_svfiprintf_r+0x5c>
 80052cc:	2a25      	cmp	r2, #37	; 0x25
 80052ce:	d1f9      	bne.n	80052c4 <_svfiprintf_r+0x50>
 80052d0:	ebba 0b04 	subs.w	fp, sl, r4
 80052d4:	d00b      	beq.n	80052ee <_svfiprintf_r+0x7a>
 80052d6:	465b      	mov	r3, fp
 80052d8:	4622      	mov	r2, r4
 80052da:	4629      	mov	r1, r5
 80052dc:	4638      	mov	r0, r7
 80052de:	f7ff ff6f 	bl	80051c0 <__ssputs_r>
 80052e2:	3001      	adds	r0, #1
 80052e4:	f000 80a9 	beq.w	800543a <_svfiprintf_r+0x1c6>
 80052e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052ea:	445a      	add	r2, fp
 80052ec:	9209      	str	r2, [sp, #36]	; 0x24
 80052ee:	f89a 3000 	ldrb.w	r3, [sl]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 80a1 	beq.w	800543a <_svfiprintf_r+0x1c6>
 80052f8:	2300      	movs	r3, #0
 80052fa:	f04f 32ff 	mov.w	r2, #4294967295
 80052fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005302:	f10a 0a01 	add.w	sl, sl, #1
 8005306:	9304      	str	r3, [sp, #16]
 8005308:	9307      	str	r3, [sp, #28]
 800530a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800530e:	931a      	str	r3, [sp, #104]	; 0x68
 8005310:	4654      	mov	r4, sl
 8005312:	2205      	movs	r2, #5
 8005314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005318:	4850      	ldr	r0, [pc, #320]	; (800545c <_svfiprintf_r+0x1e8>)
 800531a:	f000 fa67 	bl	80057ec <memchr>
 800531e:	9a04      	ldr	r2, [sp, #16]
 8005320:	b9d8      	cbnz	r0, 800535a <_svfiprintf_r+0xe6>
 8005322:	06d0      	lsls	r0, r2, #27
 8005324:	bf44      	itt	mi
 8005326:	2320      	movmi	r3, #32
 8005328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800532c:	0711      	lsls	r1, r2, #28
 800532e:	bf44      	itt	mi
 8005330:	232b      	movmi	r3, #43	; 0x2b
 8005332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005336:	f89a 3000 	ldrb.w	r3, [sl]
 800533a:	2b2a      	cmp	r3, #42	; 0x2a
 800533c:	d015      	beq.n	800536a <_svfiprintf_r+0xf6>
 800533e:	4654      	mov	r4, sl
 8005340:	2000      	movs	r0, #0
 8005342:	f04f 0c0a 	mov.w	ip, #10
 8005346:	9a07      	ldr	r2, [sp, #28]
 8005348:	4621      	mov	r1, r4
 800534a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800534e:	3b30      	subs	r3, #48	; 0x30
 8005350:	2b09      	cmp	r3, #9
 8005352:	d94d      	bls.n	80053f0 <_svfiprintf_r+0x17c>
 8005354:	b1b0      	cbz	r0, 8005384 <_svfiprintf_r+0x110>
 8005356:	9207      	str	r2, [sp, #28]
 8005358:	e014      	b.n	8005384 <_svfiprintf_r+0x110>
 800535a:	eba0 0308 	sub.w	r3, r0, r8
 800535e:	fa09 f303 	lsl.w	r3, r9, r3
 8005362:	4313      	orrs	r3, r2
 8005364:	46a2      	mov	sl, r4
 8005366:	9304      	str	r3, [sp, #16]
 8005368:	e7d2      	b.n	8005310 <_svfiprintf_r+0x9c>
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	1d19      	adds	r1, r3, #4
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	9103      	str	r1, [sp, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	bfbb      	ittet	lt
 8005376:	425b      	neglt	r3, r3
 8005378:	f042 0202 	orrlt.w	r2, r2, #2
 800537c:	9307      	strge	r3, [sp, #28]
 800537e:	9307      	strlt	r3, [sp, #28]
 8005380:	bfb8      	it	lt
 8005382:	9204      	strlt	r2, [sp, #16]
 8005384:	7823      	ldrb	r3, [r4, #0]
 8005386:	2b2e      	cmp	r3, #46	; 0x2e
 8005388:	d10c      	bne.n	80053a4 <_svfiprintf_r+0x130>
 800538a:	7863      	ldrb	r3, [r4, #1]
 800538c:	2b2a      	cmp	r3, #42	; 0x2a
 800538e:	d134      	bne.n	80053fa <_svfiprintf_r+0x186>
 8005390:	9b03      	ldr	r3, [sp, #12]
 8005392:	3402      	adds	r4, #2
 8005394:	1d1a      	adds	r2, r3, #4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	9203      	str	r2, [sp, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	bfb8      	it	lt
 800539e:	f04f 33ff 	movlt.w	r3, #4294967295
 80053a2:	9305      	str	r3, [sp, #20]
 80053a4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005460 <_svfiprintf_r+0x1ec>
 80053a8:	2203      	movs	r2, #3
 80053aa:	4650      	mov	r0, sl
 80053ac:	7821      	ldrb	r1, [r4, #0]
 80053ae:	f000 fa1d 	bl	80057ec <memchr>
 80053b2:	b138      	cbz	r0, 80053c4 <_svfiprintf_r+0x150>
 80053b4:	2240      	movs	r2, #64	; 0x40
 80053b6:	9b04      	ldr	r3, [sp, #16]
 80053b8:	eba0 000a 	sub.w	r0, r0, sl
 80053bc:	4082      	lsls	r2, r0
 80053be:	4313      	orrs	r3, r2
 80053c0:	3401      	adds	r4, #1
 80053c2:	9304      	str	r3, [sp, #16]
 80053c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053c8:	2206      	movs	r2, #6
 80053ca:	4826      	ldr	r0, [pc, #152]	; (8005464 <_svfiprintf_r+0x1f0>)
 80053cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053d0:	f000 fa0c 	bl	80057ec <memchr>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d038      	beq.n	800544a <_svfiprintf_r+0x1d6>
 80053d8:	4b23      	ldr	r3, [pc, #140]	; (8005468 <_svfiprintf_r+0x1f4>)
 80053da:	bb1b      	cbnz	r3, 8005424 <_svfiprintf_r+0x1b0>
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	3307      	adds	r3, #7
 80053e0:	f023 0307 	bic.w	r3, r3, #7
 80053e4:	3308      	adds	r3, #8
 80053e6:	9303      	str	r3, [sp, #12]
 80053e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ea:	4433      	add	r3, r6
 80053ec:	9309      	str	r3, [sp, #36]	; 0x24
 80053ee:	e768      	b.n	80052c2 <_svfiprintf_r+0x4e>
 80053f0:	460c      	mov	r4, r1
 80053f2:	2001      	movs	r0, #1
 80053f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80053f8:	e7a6      	b.n	8005348 <_svfiprintf_r+0xd4>
 80053fa:	2300      	movs	r3, #0
 80053fc:	f04f 0c0a 	mov.w	ip, #10
 8005400:	4619      	mov	r1, r3
 8005402:	3401      	adds	r4, #1
 8005404:	9305      	str	r3, [sp, #20]
 8005406:	4620      	mov	r0, r4
 8005408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800540c:	3a30      	subs	r2, #48	; 0x30
 800540e:	2a09      	cmp	r2, #9
 8005410:	d903      	bls.n	800541a <_svfiprintf_r+0x1a6>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0c6      	beq.n	80053a4 <_svfiprintf_r+0x130>
 8005416:	9105      	str	r1, [sp, #20]
 8005418:	e7c4      	b.n	80053a4 <_svfiprintf_r+0x130>
 800541a:	4604      	mov	r4, r0
 800541c:	2301      	movs	r3, #1
 800541e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005422:	e7f0      	b.n	8005406 <_svfiprintf_r+0x192>
 8005424:	ab03      	add	r3, sp, #12
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	462a      	mov	r2, r5
 800542a:	4638      	mov	r0, r7
 800542c:	4b0f      	ldr	r3, [pc, #60]	; (800546c <_svfiprintf_r+0x1f8>)
 800542e:	a904      	add	r1, sp, #16
 8005430:	f3af 8000 	nop.w
 8005434:	1c42      	adds	r2, r0, #1
 8005436:	4606      	mov	r6, r0
 8005438:	d1d6      	bne.n	80053e8 <_svfiprintf_r+0x174>
 800543a:	89ab      	ldrh	r3, [r5, #12]
 800543c:	065b      	lsls	r3, r3, #25
 800543e:	f53f af2d 	bmi.w	800529c <_svfiprintf_r+0x28>
 8005442:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005444:	b01d      	add	sp, #116	; 0x74
 8005446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544a:	ab03      	add	r3, sp, #12
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	462a      	mov	r2, r5
 8005450:	4638      	mov	r0, r7
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <_svfiprintf_r+0x1f8>)
 8005454:	a904      	add	r1, sp, #16
 8005456:	f000 f87d 	bl	8005554 <_printf_i>
 800545a:	e7eb      	b.n	8005434 <_svfiprintf_r+0x1c0>
 800545c:	08005a16 	.word	0x08005a16
 8005460:	08005a1c 	.word	0x08005a1c
 8005464:	08005a20 	.word	0x08005a20
 8005468:	00000000 	.word	0x00000000
 800546c:	080051c1 	.word	0x080051c1

08005470 <_printf_common>:
 8005470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	4616      	mov	r6, r2
 8005476:	4699      	mov	r9, r3
 8005478:	688a      	ldr	r2, [r1, #8]
 800547a:	690b      	ldr	r3, [r1, #16]
 800547c:	4607      	mov	r7, r0
 800547e:	4293      	cmp	r3, r2
 8005480:	bfb8      	it	lt
 8005482:	4613      	movlt	r3, r2
 8005484:	6033      	str	r3, [r6, #0]
 8005486:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800548a:	460c      	mov	r4, r1
 800548c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005490:	b10a      	cbz	r2, 8005496 <_printf_common+0x26>
 8005492:	3301      	adds	r3, #1
 8005494:	6033      	str	r3, [r6, #0]
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	0699      	lsls	r1, r3, #26
 800549a:	bf42      	ittt	mi
 800549c:	6833      	ldrmi	r3, [r6, #0]
 800549e:	3302      	addmi	r3, #2
 80054a0:	6033      	strmi	r3, [r6, #0]
 80054a2:	6825      	ldr	r5, [r4, #0]
 80054a4:	f015 0506 	ands.w	r5, r5, #6
 80054a8:	d106      	bne.n	80054b8 <_printf_common+0x48>
 80054aa:	f104 0a19 	add.w	sl, r4, #25
 80054ae:	68e3      	ldr	r3, [r4, #12]
 80054b0:	6832      	ldr	r2, [r6, #0]
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	42ab      	cmp	r3, r5
 80054b6:	dc2b      	bgt.n	8005510 <_printf_common+0xa0>
 80054b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054bc:	1e13      	subs	r3, r2, #0
 80054be:	6822      	ldr	r2, [r4, #0]
 80054c0:	bf18      	it	ne
 80054c2:	2301      	movne	r3, #1
 80054c4:	0692      	lsls	r2, r2, #26
 80054c6:	d430      	bmi.n	800552a <_printf_common+0xba>
 80054c8:	4649      	mov	r1, r9
 80054ca:	4638      	mov	r0, r7
 80054cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054d0:	47c0      	blx	r8
 80054d2:	3001      	adds	r0, #1
 80054d4:	d023      	beq.n	800551e <_printf_common+0xae>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	6922      	ldr	r2, [r4, #16]
 80054da:	f003 0306 	and.w	r3, r3, #6
 80054de:	2b04      	cmp	r3, #4
 80054e0:	bf14      	ite	ne
 80054e2:	2500      	movne	r5, #0
 80054e4:	6833      	ldreq	r3, [r6, #0]
 80054e6:	f04f 0600 	mov.w	r6, #0
 80054ea:	bf08      	it	eq
 80054ec:	68e5      	ldreq	r5, [r4, #12]
 80054ee:	f104 041a 	add.w	r4, r4, #26
 80054f2:	bf08      	it	eq
 80054f4:	1aed      	subeq	r5, r5, r3
 80054f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80054fa:	bf08      	it	eq
 80054fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005500:	4293      	cmp	r3, r2
 8005502:	bfc4      	itt	gt
 8005504:	1a9b      	subgt	r3, r3, r2
 8005506:	18ed      	addgt	r5, r5, r3
 8005508:	42b5      	cmp	r5, r6
 800550a:	d11a      	bne.n	8005542 <_printf_common+0xd2>
 800550c:	2000      	movs	r0, #0
 800550e:	e008      	b.n	8005522 <_printf_common+0xb2>
 8005510:	2301      	movs	r3, #1
 8005512:	4652      	mov	r2, sl
 8005514:	4649      	mov	r1, r9
 8005516:	4638      	mov	r0, r7
 8005518:	47c0      	blx	r8
 800551a:	3001      	adds	r0, #1
 800551c:	d103      	bne.n	8005526 <_printf_common+0xb6>
 800551e:	f04f 30ff 	mov.w	r0, #4294967295
 8005522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005526:	3501      	adds	r5, #1
 8005528:	e7c1      	b.n	80054ae <_printf_common+0x3e>
 800552a:	2030      	movs	r0, #48	; 0x30
 800552c:	18e1      	adds	r1, r4, r3
 800552e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005538:	4422      	add	r2, r4
 800553a:	3302      	adds	r3, #2
 800553c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005540:	e7c2      	b.n	80054c8 <_printf_common+0x58>
 8005542:	2301      	movs	r3, #1
 8005544:	4622      	mov	r2, r4
 8005546:	4649      	mov	r1, r9
 8005548:	4638      	mov	r0, r7
 800554a:	47c0      	blx	r8
 800554c:	3001      	adds	r0, #1
 800554e:	d0e6      	beq.n	800551e <_printf_common+0xae>
 8005550:	3601      	adds	r6, #1
 8005552:	e7d9      	b.n	8005508 <_printf_common+0x98>

08005554 <_printf_i>:
 8005554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005558:	7e0f      	ldrb	r7, [r1, #24]
 800555a:	4691      	mov	r9, r2
 800555c:	2f78      	cmp	r7, #120	; 0x78
 800555e:	4680      	mov	r8, r0
 8005560:	460c      	mov	r4, r1
 8005562:	469a      	mov	sl, r3
 8005564:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005566:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800556a:	d807      	bhi.n	800557c <_printf_i+0x28>
 800556c:	2f62      	cmp	r7, #98	; 0x62
 800556e:	d80a      	bhi.n	8005586 <_printf_i+0x32>
 8005570:	2f00      	cmp	r7, #0
 8005572:	f000 80d5 	beq.w	8005720 <_printf_i+0x1cc>
 8005576:	2f58      	cmp	r7, #88	; 0x58
 8005578:	f000 80c1 	beq.w	80056fe <_printf_i+0x1aa>
 800557c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005584:	e03a      	b.n	80055fc <_printf_i+0xa8>
 8005586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800558a:	2b15      	cmp	r3, #21
 800558c:	d8f6      	bhi.n	800557c <_printf_i+0x28>
 800558e:	a101      	add	r1, pc, #4	; (adr r1, 8005594 <_printf_i+0x40>)
 8005590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005594:	080055ed 	.word	0x080055ed
 8005598:	08005601 	.word	0x08005601
 800559c:	0800557d 	.word	0x0800557d
 80055a0:	0800557d 	.word	0x0800557d
 80055a4:	0800557d 	.word	0x0800557d
 80055a8:	0800557d 	.word	0x0800557d
 80055ac:	08005601 	.word	0x08005601
 80055b0:	0800557d 	.word	0x0800557d
 80055b4:	0800557d 	.word	0x0800557d
 80055b8:	0800557d 	.word	0x0800557d
 80055bc:	0800557d 	.word	0x0800557d
 80055c0:	08005707 	.word	0x08005707
 80055c4:	0800562d 	.word	0x0800562d
 80055c8:	080056c1 	.word	0x080056c1
 80055cc:	0800557d 	.word	0x0800557d
 80055d0:	0800557d 	.word	0x0800557d
 80055d4:	08005729 	.word	0x08005729
 80055d8:	0800557d 	.word	0x0800557d
 80055dc:	0800562d 	.word	0x0800562d
 80055e0:	0800557d 	.word	0x0800557d
 80055e4:	0800557d 	.word	0x0800557d
 80055e8:	080056c9 	.word	0x080056c9
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	1d1a      	adds	r2, r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	602a      	str	r2, [r5, #0]
 80055f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055fc:	2301      	movs	r3, #1
 80055fe:	e0a0      	b.n	8005742 <_printf_i+0x1ee>
 8005600:	6820      	ldr	r0, [r4, #0]
 8005602:	682b      	ldr	r3, [r5, #0]
 8005604:	0607      	lsls	r7, r0, #24
 8005606:	f103 0104 	add.w	r1, r3, #4
 800560a:	6029      	str	r1, [r5, #0]
 800560c:	d501      	bpl.n	8005612 <_printf_i+0xbe>
 800560e:	681e      	ldr	r6, [r3, #0]
 8005610:	e003      	b.n	800561a <_printf_i+0xc6>
 8005612:	0646      	lsls	r6, r0, #25
 8005614:	d5fb      	bpl.n	800560e <_printf_i+0xba>
 8005616:	f9b3 6000 	ldrsh.w	r6, [r3]
 800561a:	2e00      	cmp	r6, #0
 800561c:	da03      	bge.n	8005626 <_printf_i+0xd2>
 800561e:	232d      	movs	r3, #45	; 0x2d
 8005620:	4276      	negs	r6, r6
 8005622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005626:	230a      	movs	r3, #10
 8005628:	4859      	ldr	r0, [pc, #356]	; (8005790 <_printf_i+0x23c>)
 800562a:	e012      	b.n	8005652 <_printf_i+0xfe>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	6820      	ldr	r0, [r4, #0]
 8005630:	1d19      	adds	r1, r3, #4
 8005632:	6029      	str	r1, [r5, #0]
 8005634:	0605      	lsls	r5, r0, #24
 8005636:	d501      	bpl.n	800563c <_printf_i+0xe8>
 8005638:	681e      	ldr	r6, [r3, #0]
 800563a:	e002      	b.n	8005642 <_printf_i+0xee>
 800563c:	0641      	lsls	r1, r0, #25
 800563e:	d5fb      	bpl.n	8005638 <_printf_i+0xe4>
 8005640:	881e      	ldrh	r6, [r3, #0]
 8005642:	2f6f      	cmp	r7, #111	; 0x6f
 8005644:	bf0c      	ite	eq
 8005646:	2308      	moveq	r3, #8
 8005648:	230a      	movne	r3, #10
 800564a:	4851      	ldr	r0, [pc, #324]	; (8005790 <_printf_i+0x23c>)
 800564c:	2100      	movs	r1, #0
 800564e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005652:	6865      	ldr	r5, [r4, #4]
 8005654:	2d00      	cmp	r5, #0
 8005656:	bfa8      	it	ge
 8005658:	6821      	ldrge	r1, [r4, #0]
 800565a:	60a5      	str	r5, [r4, #8]
 800565c:	bfa4      	itt	ge
 800565e:	f021 0104 	bicge.w	r1, r1, #4
 8005662:	6021      	strge	r1, [r4, #0]
 8005664:	b90e      	cbnz	r6, 800566a <_printf_i+0x116>
 8005666:	2d00      	cmp	r5, #0
 8005668:	d04b      	beq.n	8005702 <_printf_i+0x1ae>
 800566a:	4615      	mov	r5, r2
 800566c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005670:	fb03 6711 	mls	r7, r3, r1, r6
 8005674:	5dc7      	ldrb	r7, [r0, r7]
 8005676:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800567a:	4637      	mov	r7, r6
 800567c:	42bb      	cmp	r3, r7
 800567e:	460e      	mov	r6, r1
 8005680:	d9f4      	bls.n	800566c <_printf_i+0x118>
 8005682:	2b08      	cmp	r3, #8
 8005684:	d10b      	bne.n	800569e <_printf_i+0x14a>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	07de      	lsls	r6, r3, #31
 800568a:	d508      	bpl.n	800569e <_printf_i+0x14a>
 800568c:	6923      	ldr	r3, [r4, #16]
 800568e:	6861      	ldr	r1, [r4, #4]
 8005690:	4299      	cmp	r1, r3
 8005692:	bfde      	ittt	le
 8005694:	2330      	movle	r3, #48	; 0x30
 8005696:	f805 3c01 	strble.w	r3, [r5, #-1]
 800569a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800569e:	1b52      	subs	r2, r2, r5
 80056a0:	6122      	str	r2, [r4, #16]
 80056a2:	464b      	mov	r3, r9
 80056a4:	4621      	mov	r1, r4
 80056a6:	4640      	mov	r0, r8
 80056a8:	f8cd a000 	str.w	sl, [sp]
 80056ac:	aa03      	add	r2, sp, #12
 80056ae:	f7ff fedf 	bl	8005470 <_printf_common>
 80056b2:	3001      	adds	r0, #1
 80056b4:	d14a      	bne.n	800574c <_printf_i+0x1f8>
 80056b6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ba:	b004      	add	sp, #16
 80056bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	f043 0320 	orr.w	r3, r3, #32
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	2778      	movs	r7, #120	; 0x78
 80056ca:	4832      	ldr	r0, [pc, #200]	; (8005794 <_printf_i+0x240>)
 80056cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	6829      	ldr	r1, [r5, #0]
 80056d4:	061f      	lsls	r7, r3, #24
 80056d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80056da:	d402      	bmi.n	80056e2 <_printf_i+0x18e>
 80056dc:	065f      	lsls	r7, r3, #25
 80056de:	bf48      	it	mi
 80056e0:	b2b6      	uxthmi	r6, r6
 80056e2:	07df      	lsls	r7, r3, #31
 80056e4:	bf48      	it	mi
 80056e6:	f043 0320 	orrmi.w	r3, r3, #32
 80056ea:	6029      	str	r1, [r5, #0]
 80056ec:	bf48      	it	mi
 80056ee:	6023      	strmi	r3, [r4, #0]
 80056f0:	b91e      	cbnz	r6, 80056fa <_printf_i+0x1a6>
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	f023 0320 	bic.w	r3, r3, #32
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	2310      	movs	r3, #16
 80056fc:	e7a6      	b.n	800564c <_printf_i+0xf8>
 80056fe:	4824      	ldr	r0, [pc, #144]	; (8005790 <_printf_i+0x23c>)
 8005700:	e7e4      	b.n	80056cc <_printf_i+0x178>
 8005702:	4615      	mov	r5, r2
 8005704:	e7bd      	b.n	8005682 <_printf_i+0x12e>
 8005706:	682b      	ldr	r3, [r5, #0]
 8005708:	6826      	ldr	r6, [r4, #0]
 800570a:	1d18      	adds	r0, r3, #4
 800570c:	6961      	ldr	r1, [r4, #20]
 800570e:	6028      	str	r0, [r5, #0]
 8005710:	0635      	lsls	r5, r6, #24
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	d501      	bpl.n	800571a <_printf_i+0x1c6>
 8005716:	6019      	str	r1, [r3, #0]
 8005718:	e002      	b.n	8005720 <_printf_i+0x1cc>
 800571a:	0670      	lsls	r0, r6, #25
 800571c:	d5fb      	bpl.n	8005716 <_printf_i+0x1c2>
 800571e:	8019      	strh	r1, [r3, #0]
 8005720:	2300      	movs	r3, #0
 8005722:	4615      	mov	r5, r2
 8005724:	6123      	str	r3, [r4, #16]
 8005726:	e7bc      	b.n	80056a2 <_printf_i+0x14e>
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	2100      	movs	r1, #0
 800572c:	1d1a      	adds	r2, r3, #4
 800572e:	602a      	str	r2, [r5, #0]
 8005730:	681d      	ldr	r5, [r3, #0]
 8005732:	6862      	ldr	r2, [r4, #4]
 8005734:	4628      	mov	r0, r5
 8005736:	f000 f859 	bl	80057ec <memchr>
 800573a:	b108      	cbz	r0, 8005740 <_printf_i+0x1ec>
 800573c:	1b40      	subs	r0, r0, r5
 800573e:	6060      	str	r0, [r4, #4]
 8005740:	6863      	ldr	r3, [r4, #4]
 8005742:	6123      	str	r3, [r4, #16]
 8005744:	2300      	movs	r3, #0
 8005746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800574a:	e7aa      	b.n	80056a2 <_printf_i+0x14e>
 800574c:	462a      	mov	r2, r5
 800574e:	4649      	mov	r1, r9
 8005750:	4640      	mov	r0, r8
 8005752:	6923      	ldr	r3, [r4, #16]
 8005754:	47d0      	blx	sl
 8005756:	3001      	adds	r0, #1
 8005758:	d0ad      	beq.n	80056b6 <_printf_i+0x162>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	079b      	lsls	r3, r3, #30
 800575e:	d413      	bmi.n	8005788 <_printf_i+0x234>
 8005760:	68e0      	ldr	r0, [r4, #12]
 8005762:	9b03      	ldr	r3, [sp, #12]
 8005764:	4298      	cmp	r0, r3
 8005766:	bfb8      	it	lt
 8005768:	4618      	movlt	r0, r3
 800576a:	e7a6      	b.n	80056ba <_printf_i+0x166>
 800576c:	2301      	movs	r3, #1
 800576e:	4632      	mov	r2, r6
 8005770:	4649      	mov	r1, r9
 8005772:	4640      	mov	r0, r8
 8005774:	47d0      	blx	sl
 8005776:	3001      	adds	r0, #1
 8005778:	d09d      	beq.n	80056b6 <_printf_i+0x162>
 800577a:	3501      	adds	r5, #1
 800577c:	68e3      	ldr	r3, [r4, #12]
 800577e:	9903      	ldr	r1, [sp, #12]
 8005780:	1a5b      	subs	r3, r3, r1
 8005782:	42ab      	cmp	r3, r5
 8005784:	dcf2      	bgt.n	800576c <_printf_i+0x218>
 8005786:	e7eb      	b.n	8005760 <_printf_i+0x20c>
 8005788:	2500      	movs	r5, #0
 800578a:	f104 0619 	add.w	r6, r4, #25
 800578e:	e7f5      	b.n	800577c <_printf_i+0x228>
 8005790:	08005a27 	.word	0x08005a27
 8005794:	08005a38 	.word	0x08005a38

08005798 <memmove>:
 8005798:	4288      	cmp	r0, r1
 800579a:	b510      	push	{r4, lr}
 800579c:	eb01 0402 	add.w	r4, r1, r2
 80057a0:	d902      	bls.n	80057a8 <memmove+0x10>
 80057a2:	4284      	cmp	r4, r0
 80057a4:	4623      	mov	r3, r4
 80057a6:	d807      	bhi.n	80057b8 <memmove+0x20>
 80057a8:	1e43      	subs	r3, r0, #1
 80057aa:	42a1      	cmp	r1, r4
 80057ac:	d008      	beq.n	80057c0 <memmove+0x28>
 80057ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057b6:	e7f8      	b.n	80057aa <memmove+0x12>
 80057b8:	4601      	mov	r1, r0
 80057ba:	4402      	add	r2, r0
 80057bc:	428a      	cmp	r2, r1
 80057be:	d100      	bne.n	80057c2 <memmove+0x2a>
 80057c0:	bd10      	pop	{r4, pc}
 80057c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057ca:	e7f7      	b.n	80057bc <memmove+0x24>

080057cc <_sbrk_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	2300      	movs	r3, #0
 80057d0:	4d05      	ldr	r5, [pc, #20]	; (80057e8 <_sbrk_r+0x1c>)
 80057d2:	4604      	mov	r4, r0
 80057d4:	4608      	mov	r0, r1
 80057d6:	602b      	str	r3, [r5, #0]
 80057d8:	f7fd fc8c 	bl	80030f4 <_sbrk>
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	d102      	bne.n	80057e6 <_sbrk_r+0x1a>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	b103      	cbz	r3, 80057e6 <_sbrk_r+0x1a>
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
 80057e8:	20000290 	.word	0x20000290

080057ec <memchr>:
 80057ec:	4603      	mov	r3, r0
 80057ee:	b510      	push	{r4, lr}
 80057f0:	b2c9      	uxtb	r1, r1
 80057f2:	4402      	add	r2, r0
 80057f4:	4293      	cmp	r3, r2
 80057f6:	4618      	mov	r0, r3
 80057f8:	d101      	bne.n	80057fe <memchr+0x12>
 80057fa:	2000      	movs	r0, #0
 80057fc:	e003      	b.n	8005806 <memchr+0x1a>
 80057fe:	7804      	ldrb	r4, [r0, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	428c      	cmp	r4, r1
 8005804:	d1f6      	bne.n	80057f4 <memchr+0x8>
 8005806:	bd10      	pop	{r4, pc}

08005808 <memcpy>:
 8005808:	440a      	add	r2, r1
 800580a:	4291      	cmp	r1, r2
 800580c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005810:	d100      	bne.n	8005814 <memcpy+0xc>
 8005812:	4770      	bx	lr
 8005814:	b510      	push	{r4, lr}
 8005816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800581a:	4291      	cmp	r1, r2
 800581c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005820:	d1f9      	bne.n	8005816 <memcpy+0xe>
 8005822:	bd10      	pop	{r4, pc}

08005824 <_realloc_r>:
 8005824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	4680      	mov	r8, r0
 800582a:	4614      	mov	r4, r2
 800582c:	460e      	mov	r6, r1
 800582e:	b921      	cbnz	r1, 800583a <_realloc_r+0x16>
 8005830:	4611      	mov	r1, r2
 8005832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005836:	f7ff bc37 	b.w	80050a8 <_malloc_r>
 800583a:	b92a      	cbnz	r2, 8005848 <_realloc_r+0x24>
 800583c:	f7ff fbcc 	bl	8004fd8 <_free_r>
 8005840:	4625      	mov	r5, r4
 8005842:	4628      	mov	r0, r5
 8005844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005848:	f000 f81b 	bl	8005882 <_malloc_usable_size_r>
 800584c:	4284      	cmp	r4, r0
 800584e:	4607      	mov	r7, r0
 8005850:	d802      	bhi.n	8005858 <_realloc_r+0x34>
 8005852:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005856:	d812      	bhi.n	800587e <_realloc_r+0x5a>
 8005858:	4621      	mov	r1, r4
 800585a:	4640      	mov	r0, r8
 800585c:	f7ff fc24 	bl	80050a8 <_malloc_r>
 8005860:	4605      	mov	r5, r0
 8005862:	2800      	cmp	r0, #0
 8005864:	d0ed      	beq.n	8005842 <_realloc_r+0x1e>
 8005866:	42bc      	cmp	r4, r7
 8005868:	4622      	mov	r2, r4
 800586a:	4631      	mov	r1, r6
 800586c:	bf28      	it	cs
 800586e:	463a      	movcs	r2, r7
 8005870:	f7ff ffca 	bl	8005808 <memcpy>
 8005874:	4631      	mov	r1, r6
 8005876:	4640      	mov	r0, r8
 8005878:	f7ff fbae 	bl	8004fd8 <_free_r>
 800587c:	e7e1      	b.n	8005842 <_realloc_r+0x1e>
 800587e:	4635      	mov	r5, r6
 8005880:	e7df      	b.n	8005842 <_realloc_r+0x1e>

08005882 <_malloc_usable_size_r>:
 8005882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005886:	1f18      	subs	r0, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	bfbc      	itt	lt
 800588c:	580b      	ldrlt	r3, [r1, r0]
 800588e:	18c0      	addlt	r0, r0, r3
 8005890:	4770      	bx	lr
	...

08005894 <_init>:
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005896:	bf00      	nop
 8005898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589a:	bc08      	pop	{r3}
 800589c:	469e      	mov	lr, r3
 800589e:	4770      	bx	lr

080058a0 <_fini>:
 80058a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a2:	bf00      	nop
 80058a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a6:	bc08      	pop	{r3}
 80058a8:	469e      	mov	lr, r3
 80058aa:	4770      	bx	lr
